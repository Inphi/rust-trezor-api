// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `messages-webauthn.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct WebAuthnListResidentCredentials {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WebAuthnListResidentCredentials {
    fn default() -> &'a WebAuthnListResidentCredentials {
        <WebAuthnListResidentCredentials as ::protobuf::Message>::default_instance()
    }
}

impl WebAuthnListResidentCredentials {
    pub fn new() -> WebAuthnListResidentCredentials {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for WebAuthnListResidentCredentials {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WebAuthnListResidentCredentials {
        WebAuthnListResidentCredentials::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WebAuthnListResidentCredentials>(
                "WebAuthnListResidentCredentials",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WebAuthnListResidentCredentials {
        static instance: ::protobuf::rt::LazyV2<WebAuthnListResidentCredentials> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WebAuthnListResidentCredentials::new)
    }
}

impl ::protobuf::Clear for WebAuthnListResidentCredentials {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WebAuthnListResidentCredentials {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WebAuthnListResidentCredentials {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WebAuthnAddResidentCredential {
    // message fields
    credential_id: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WebAuthnAddResidentCredential {
    fn default() -> &'a WebAuthnAddResidentCredential {
        <WebAuthnAddResidentCredential as ::protobuf::Message>::default_instance()
    }
}

impl WebAuthnAddResidentCredential {
    pub fn new() -> WebAuthnAddResidentCredential {
        ::std::default::Default::default()
    }

    // optional bytes credential_id = 1;


    pub fn get_credential_id(&self) -> &[u8] {
        match self.credential_id.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_credential_id(&mut self) {
        self.credential_id.clear();
    }

    pub fn has_credential_id(&self) -> bool {
        self.credential_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_credential_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.credential_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_credential_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.credential_id.is_none() {
            self.credential_id.set_default();
        }
        self.credential_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_credential_id(&mut self) -> ::std::vec::Vec<u8> {
        self.credential_id.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for WebAuthnAddResidentCredential {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.credential_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.credential_id.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.credential_id.as_ref() {
            os.write_bytes(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WebAuthnAddResidentCredential {
        WebAuthnAddResidentCredential::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "credential_id",
                |m: &WebAuthnAddResidentCredential| { &m.credential_id },
                |m: &mut WebAuthnAddResidentCredential| { &mut m.credential_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WebAuthnAddResidentCredential>(
                "WebAuthnAddResidentCredential",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WebAuthnAddResidentCredential {
        static instance: ::protobuf::rt::LazyV2<WebAuthnAddResidentCredential> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WebAuthnAddResidentCredential::new)
    }
}

impl ::protobuf::Clear for WebAuthnAddResidentCredential {
    fn clear(&mut self) {
        self.credential_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WebAuthnAddResidentCredential {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WebAuthnAddResidentCredential {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WebAuthnRemoveResidentCredential {
    // message fields
    index: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WebAuthnRemoveResidentCredential {
    fn default() -> &'a WebAuthnRemoveResidentCredential {
        <WebAuthnRemoveResidentCredential as ::protobuf::Message>::default_instance()
    }
}

impl WebAuthnRemoveResidentCredential {
    pub fn new() -> WebAuthnRemoveResidentCredential {
        ::std::default::Default::default()
    }

    // optional uint32 index = 1;


    pub fn get_index(&self) -> u32 {
        self.index.unwrap_or(0)
    }
    pub fn clear_index(&mut self) {
        self.index = ::std::option::Option::None;
    }

    pub fn has_index(&self) -> bool {
        self.index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u32) {
        self.index = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for WebAuthnRemoveResidentCredential {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.index = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.index {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.index {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WebAuthnRemoveResidentCredential {
        WebAuthnRemoveResidentCredential::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "index",
                |m: &WebAuthnRemoveResidentCredential| { &m.index },
                |m: &mut WebAuthnRemoveResidentCredential| { &mut m.index },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WebAuthnRemoveResidentCredential>(
                "WebAuthnRemoveResidentCredential",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WebAuthnRemoveResidentCredential {
        static instance: ::protobuf::rt::LazyV2<WebAuthnRemoveResidentCredential> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WebAuthnRemoveResidentCredential::new)
    }
}

impl ::protobuf::Clear for WebAuthnRemoveResidentCredential {
    fn clear(&mut self) {
        self.index = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WebAuthnRemoveResidentCredential {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WebAuthnRemoveResidentCredential {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WebAuthnCredentials {
    // message fields
    pub credentials: ::protobuf::RepeatedField<WebAuthnCredentials_WebAuthnCredential>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WebAuthnCredentials {
    fn default() -> &'a WebAuthnCredentials {
        <WebAuthnCredentials as ::protobuf::Message>::default_instance()
    }
}

impl WebAuthnCredentials {
    pub fn new() -> WebAuthnCredentials {
        ::std::default::Default::default()
    }

    // repeated .hw.trezor.messages.webauthn.WebAuthnCredentials.WebAuthnCredential credentials = 1;


    pub fn get_credentials(&self) -> &[WebAuthnCredentials_WebAuthnCredential] {
        &self.credentials
    }
    pub fn clear_credentials(&mut self) {
        self.credentials.clear();
    }

    // Param is passed by value, moved
    pub fn set_credentials(&mut self, v: ::protobuf::RepeatedField<WebAuthnCredentials_WebAuthnCredential>) {
        self.credentials = v;
    }

    // Mutable pointer to the field.
    pub fn mut_credentials(&mut self) -> &mut ::protobuf::RepeatedField<WebAuthnCredentials_WebAuthnCredential> {
        &mut self.credentials
    }

    // Take field
    pub fn take_credentials(&mut self) -> ::protobuf::RepeatedField<WebAuthnCredentials_WebAuthnCredential> {
        ::std::mem::replace(&mut self.credentials, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for WebAuthnCredentials {
    fn is_initialized(&self) -> bool {
        for v in &self.credentials {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.credentials)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.credentials {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.credentials {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WebAuthnCredentials {
        WebAuthnCredentials::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<WebAuthnCredentials_WebAuthnCredential>>(
                "credentials",
                |m: &WebAuthnCredentials| { &m.credentials },
                |m: &mut WebAuthnCredentials| { &mut m.credentials },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WebAuthnCredentials>(
                "WebAuthnCredentials",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WebAuthnCredentials {
        static instance: ::protobuf::rt::LazyV2<WebAuthnCredentials> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WebAuthnCredentials::new)
    }
}

impl ::protobuf::Clear for WebAuthnCredentials {
    fn clear(&mut self) {
        self.credentials.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WebAuthnCredentials {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WebAuthnCredentials {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WebAuthnCredentials_WebAuthnCredential {
    // message fields
    index: ::std::option::Option<u32>,
    id: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    rp_id: ::protobuf::SingularField<::std::string::String>,
    rp_name: ::protobuf::SingularField<::std::string::String>,
    user_id: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    user_name: ::protobuf::SingularField<::std::string::String>,
    user_display_name: ::protobuf::SingularField<::std::string::String>,
    creation_time: ::std::option::Option<u32>,
    hmac_secret: ::std::option::Option<bool>,
    use_sign_count: ::std::option::Option<bool>,
    algorithm: ::std::option::Option<i32>,
    curve: ::std::option::Option<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WebAuthnCredentials_WebAuthnCredential {
    fn default() -> &'a WebAuthnCredentials_WebAuthnCredential {
        <WebAuthnCredentials_WebAuthnCredential as ::protobuf::Message>::default_instance()
    }
}

impl WebAuthnCredentials_WebAuthnCredential {
    pub fn new() -> WebAuthnCredentials_WebAuthnCredential {
        ::std::default::Default::default()
    }

    // optional uint32 index = 1;


    pub fn get_index(&self) -> u32 {
        self.index.unwrap_or(0)
    }
    pub fn clear_index(&mut self) {
        self.index = ::std::option::Option::None;
    }

    pub fn has_index(&self) -> bool {
        self.index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u32) {
        self.index = ::std::option::Option::Some(v);
    }

    // optional bytes id = 2;


    pub fn get_id(&self) -> &[u8] {
        match self.id.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.id.is_none() {
            self.id.set_default();
        }
        self.id.as_mut().unwrap()
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
        self.id.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional string rp_id = 3;


    pub fn get_rp_id(&self) -> &str {
        match self.rp_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_rp_id(&mut self) {
        self.rp_id.clear();
    }

    pub fn has_rp_id(&self) -> bool {
        self.rp_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rp_id(&mut self, v: ::std::string::String) {
        self.rp_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rp_id(&mut self) -> &mut ::std::string::String {
        if self.rp_id.is_none() {
            self.rp_id.set_default();
        }
        self.rp_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_rp_id(&mut self) -> ::std::string::String {
        self.rp_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string rp_name = 4;


    pub fn get_rp_name(&self) -> &str {
        match self.rp_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_rp_name(&mut self) {
        self.rp_name.clear();
    }

    pub fn has_rp_name(&self) -> bool {
        self.rp_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rp_name(&mut self, v: ::std::string::String) {
        self.rp_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rp_name(&mut self) -> &mut ::std::string::String {
        if self.rp_name.is_none() {
            self.rp_name.set_default();
        }
        self.rp_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_rp_name(&mut self) -> ::std::string::String {
        self.rp_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes user_id = 5;


    pub fn get_user_id(&self) -> &[u8] {
        match self.user_id.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_user_id(&mut self) {
        self.user_id.clear();
    }

    pub fn has_user_id(&self) -> bool {
        self.user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.user_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.user_id.is_none() {
            self.user_id.set_default();
        }
        self.user_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_user_id(&mut self) -> ::std::vec::Vec<u8> {
        self.user_id.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional string user_name = 6;


    pub fn get_user_name(&self) -> &str {
        match self.user_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_user_name(&mut self) {
        self.user_name.clear();
    }

    pub fn has_user_name(&self) -> bool {
        self.user_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_name(&mut self, v: ::std::string::String) {
        self.user_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user_name(&mut self) -> &mut ::std::string::String {
        if self.user_name.is_none() {
            self.user_name.set_default();
        }
        self.user_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_user_name(&mut self) -> ::std::string::String {
        self.user_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string user_display_name = 7;


    pub fn get_user_display_name(&self) -> &str {
        match self.user_display_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_user_display_name(&mut self) {
        self.user_display_name.clear();
    }

    pub fn has_user_display_name(&self) -> bool {
        self.user_display_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_display_name(&mut self, v: ::std::string::String) {
        self.user_display_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user_display_name(&mut self) -> &mut ::std::string::String {
        if self.user_display_name.is_none() {
            self.user_display_name.set_default();
        }
        self.user_display_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_user_display_name(&mut self) -> ::std::string::String {
        self.user_display_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 creation_time = 8;


    pub fn get_creation_time(&self) -> u32 {
        self.creation_time.unwrap_or(0)
    }
    pub fn clear_creation_time(&mut self) {
        self.creation_time = ::std::option::Option::None;
    }

    pub fn has_creation_time(&self) -> bool {
        self.creation_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_creation_time(&mut self, v: u32) {
        self.creation_time = ::std::option::Option::Some(v);
    }

    // optional bool hmac_secret = 9;


    pub fn get_hmac_secret(&self) -> bool {
        self.hmac_secret.unwrap_or(false)
    }
    pub fn clear_hmac_secret(&mut self) {
        self.hmac_secret = ::std::option::Option::None;
    }

    pub fn has_hmac_secret(&self) -> bool {
        self.hmac_secret.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hmac_secret(&mut self, v: bool) {
        self.hmac_secret = ::std::option::Option::Some(v);
    }

    // optional bool use_sign_count = 10;


    pub fn get_use_sign_count(&self) -> bool {
        self.use_sign_count.unwrap_or(false)
    }
    pub fn clear_use_sign_count(&mut self) {
        self.use_sign_count = ::std::option::Option::None;
    }

    pub fn has_use_sign_count(&self) -> bool {
        self.use_sign_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_use_sign_count(&mut self, v: bool) {
        self.use_sign_count = ::std::option::Option::Some(v);
    }

    // optional sint32 algorithm = 11;


    pub fn get_algorithm(&self) -> i32 {
        self.algorithm.unwrap_or(0)
    }
    pub fn clear_algorithm(&mut self) {
        self.algorithm = ::std::option::Option::None;
    }

    pub fn has_algorithm(&self) -> bool {
        self.algorithm.is_some()
    }

    // Param is passed by value, moved
    pub fn set_algorithm(&mut self, v: i32) {
        self.algorithm = ::std::option::Option::Some(v);
    }

    // optional sint32 curve = 12;


    pub fn get_curve(&self) -> i32 {
        self.curve.unwrap_or(0)
    }
    pub fn clear_curve(&mut self) {
        self.curve = ::std::option::Option::None;
    }

    pub fn has_curve(&self) -> bool {
        self.curve.is_some()
    }

    // Param is passed by value, moved
    pub fn set_curve(&mut self, v: i32) {
        self.curve = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for WebAuthnCredentials_WebAuthnCredential {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.index = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.rp_id)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.rp_name)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.user_id)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.user_name)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.user_display_name)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.creation_time = ::std::option::Option::Some(tmp);
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.hmac_secret = ::std::option::Option::Some(tmp);
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.use_sign_count = ::std::option::Option::Some(tmp);
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.algorithm = ::std::option::Option::Some(tmp);
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.curve = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.index {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.id.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(ref v) = self.rp_id.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(ref v) = self.rp_name.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(ref v) = self.user_id.as_ref() {
            my_size += ::protobuf::rt::bytes_size(5, &v);
        }
        if let Some(ref v) = self.user_name.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(ref v) = self.user_display_name.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.creation_time {
            my_size += ::protobuf::rt::value_size(8, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.hmac_secret {
            my_size += 2;
        }
        if let Some(v) = self.use_sign_count {
            my_size += 2;
        }
        if let Some(v) = self.algorithm {
            my_size += ::protobuf::rt::value_varint_zigzag_size(11, v);
        }
        if let Some(v) = self.curve {
            my_size += ::protobuf::rt::value_varint_zigzag_size(12, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.index {
            os.write_uint32(1, v)?;
        }
        if let Some(ref v) = self.id.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(ref v) = self.rp_id.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(ref v) = self.rp_name.as_ref() {
            os.write_string(4, &v)?;
        }
        if let Some(ref v) = self.user_id.as_ref() {
            os.write_bytes(5, &v)?;
        }
        if let Some(ref v) = self.user_name.as_ref() {
            os.write_string(6, &v)?;
        }
        if let Some(ref v) = self.user_display_name.as_ref() {
            os.write_string(7, &v)?;
        }
        if let Some(v) = self.creation_time {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.hmac_secret {
            os.write_bool(9, v)?;
        }
        if let Some(v) = self.use_sign_count {
            os.write_bool(10, v)?;
        }
        if let Some(v) = self.algorithm {
            os.write_sint32(11, v)?;
        }
        if let Some(v) = self.curve {
            os.write_sint32(12, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WebAuthnCredentials_WebAuthnCredential {
        WebAuthnCredentials_WebAuthnCredential::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "index",
                |m: &WebAuthnCredentials_WebAuthnCredential| { &m.index },
                |m: &mut WebAuthnCredentials_WebAuthnCredential| { &mut m.index },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "id",
                |m: &WebAuthnCredentials_WebAuthnCredential| { &m.id },
                |m: &mut WebAuthnCredentials_WebAuthnCredential| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rp_id",
                |m: &WebAuthnCredentials_WebAuthnCredential| { &m.rp_id },
                |m: &mut WebAuthnCredentials_WebAuthnCredential| { &mut m.rp_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rp_name",
                |m: &WebAuthnCredentials_WebAuthnCredential| { &m.rp_name },
                |m: &mut WebAuthnCredentials_WebAuthnCredential| { &mut m.rp_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "user_id",
                |m: &WebAuthnCredentials_WebAuthnCredential| { &m.user_id },
                |m: &mut WebAuthnCredentials_WebAuthnCredential| { &mut m.user_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "user_name",
                |m: &WebAuthnCredentials_WebAuthnCredential| { &m.user_name },
                |m: &mut WebAuthnCredentials_WebAuthnCredential| { &mut m.user_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "user_display_name",
                |m: &WebAuthnCredentials_WebAuthnCredential| { &m.user_display_name },
                |m: &mut WebAuthnCredentials_WebAuthnCredential| { &mut m.user_display_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "creation_time",
                |m: &WebAuthnCredentials_WebAuthnCredential| { &m.creation_time },
                |m: &mut WebAuthnCredentials_WebAuthnCredential| { &mut m.creation_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "hmac_secret",
                |m: &WebAuthnCredentials_WebAuthnCredential| { &m.hmac_secret },
                |m: &mut WebAuthnCredentials_WebAuthnCredential| { &mut m.hmac_secret },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "use_sign_count",
                |m: &WebAuthnCredentials_WebAuthnCredential| { &m.use_sign_count },
                |m: &mut WebAuthnCredentials_WebAuthnCredential| { &mut m.use_sign_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                "algorithm",
                |m: &WebAuthnCredentials_WebAuthnCredential| { &m.algorithm },
                |m: &mut WebAuthnCredentials_WebAuthnCredential| { &mut m.algorithm },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                "curve",
                |m: &WebAuthnCredentials_WebAuthnCredential| { &m.curve },
                |m: &mut WebAuthnCredentials_WebAuthnCredential| { &mut m.curve },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WebAuthnCredentials_WebAuthnCredential>(
                "WebAuthnCredentials.WebAuthnCredential",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WebAuthnCredentials_WebAuthnCredential {
        static instance: ::protobuf::rt::LazyV2<WebAuthnCredentials_WebAuthnCredential> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WebAuthnCredentials_WebAuthnCredential::new)
    }
}

impl ::protobuf::Clear for WebAuthnCredentials_WebAuthnCredential {
    fn clear(&mut self) {
        self.index = ::std::option::Option::None;
        self.id.clear();
        self.rp_id.clear();
        self.rp_name.clear();
        self.user_id.clear();
        self.user_name.clear();
        self.user_display_name.clear();
        self.creation_time = ::std::option::Option::None;
        self.hmac_secret = ::std::option::Option::None;
        self.use_sign_count = ::std::option::Option::None;
        self.algorithm = ::std::option::Option::None;
        self.curve = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WebAuthnCredentials_WebAuthnCredential {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WebAuthnCredentials_WebAuthnCredential {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17messages-webauthn.proto\x12\x1bhw.trezor.messages.webauthn\x1a\x0e\
    messages.proto\"!\n\x1fWebAuthnListResidentCredentials\"D\n\x1dWebAuthnA\
    ddResidentCredential\x12#\n\rcredential_id\x18\x01\x20\x01(\x0cR\x0ccred\
    entialId\"8\n\x20WebAuthnRemoveResidentCredential\x12\x14\n\x05index\x18\
    \x01\x20\x01(\rR\x05index\"\xe9\x03\n\x13WebAuthnCredentials\x12e\n\x0bc\
    redentials\x18\x01\x20\x03(\x0b2C.hw.trezor.messages.webauthn.WebAuthnCr\
    edentials.WebAuthnCredentialR\x0bcredentials\x1a\xea\x02\n\x12WebAuthnCr\
    edential\x12\x14\n\x05index\x18\x01\x20\x01(\rR\x05index\x12\x0e\n\x02id\
    \x18\x02\x20\x01(\x0cR\x02id\x12\x13\n\x05rp_id\x18\x03\x20\x01(\tR\x04r\
    pId\x12\x17\n\x07rp_name\x18\x04\x20\x01(\tR\x06rpName\x12\x17\n\x07user\
    _id\x18\x05\x20\x01(\x0cR\x06userId\x12\x1b\n\tuser_name\x18\x06\x20\x01\
    (\tR\x08userName\x12*\n\x11user_display_name\x18\x07\x20\x01(\tR\x0fuser\
    DisplayName\x12#\n\rcreation_time\x18\x08\x20\x01(\rR\x0ccreationTime\
    \x12\x1f\n\x0bhmac_secret\x18\t\x20\x01(\x08R\nhmacSecret\x12$\n\x0euse_\
    sign_count\x18\n\x20\x01(\x08R\x0cuseSignCount\x12\x1c\n\talgorithm\x18\
    \x0b\x20\x01(\x11R\talgorithm\x12\x14\n\x05curve\x18\x0c\x20\x01(\x11R\
    \x05curveB<\n#com.satoshilabs.trezor.lib.protobufB\x15TrezorMessageWebAu\
    thnJ\xa5\r\n\x06\x12\x04\0\0<\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\
    \n\x01\x02\x12\x03\x01\x08#\n\x08\n\x01\x08\x12\x03\x04\0<\n.\n\x02\x08\
    \x01\x12\x03\x04\0<\x1a#\x20Sugar\x20for\x20easier\x20handling\x20in\x20\
    Java\n\n\x08\n\x01\x08\x12\x03\x05\06\n\t\n\x02\x08\x08\x12\x03\x05\06\n\
    \t\n\x02\x03\0\x12\x03\x07\x07\x17\nd\n\x02\x04\0\x12\x04\x0f\0\x10\x01\
    \x1aX*\n\x20Request:\x20List\x20resident\x20credentials\n\x20@start\n\
    \x20@next\x20WebAuthnCredentials\n\x20@next\x20Failure\n\n\n\n\x03\x04\0\
    \x01\x12\x03\x0f\x08'\nV\n\x02\x04\x01\x12\x04\x18\0\x1a\x01\x1aJ*\n\x20\
    Request:\x20Add\x20resident\x20credential\n\x20@start\n\x20@next\x20Succ\
    ess\n\x20@next\x20Failure\n\n\n\n\x03\x04\x01\x01\x12\x03\x18\x08%\n\x0b\
    \n\x04\x04\x01\x02\0\x12\x03\x19\x04%\n\x0c\n\x05\x04\x01\x02\0\x04\x12\
    \x03\x19\x04\x0c\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x19\r\x12\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03\x19\x13\x20\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x19#$\nY\n\x02\x04\x02\x12\x04\"\0$\x01\x1aM*\n\x20Request:\x20\
    Remove\x20resident\x20credential\n\x20@start\n\x20@next\x20Success\n\x20\
    @next\x20Failure\n\n\n\n\x03\x04\x02\x01\x12\x03\"\x08(\n\x0b\n\x04\x04\
    \x02\x02\0\x12\x03#\x04\x1e\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03#\x04\
    \x0c\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03#\r\x13\n\x0c\n\x05\x04\x02\
    \x02\0\x01\x12\x03#\x14\x19\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03#\x1c\
    \x1d\nE\n\x02\x04\x03\x12\x04,\0<\x01\x1a9*\n\x20Response:\x20Resident\
    \x20credential\x20list\n\x20@start\n\x20@next\x20end\n\n\n\n\x03\x04\x03\
    \x01\x12\x03,\x08\x1b\n\x0b\n\x04\x04\x03\x02\0\x12\x03-\x040\n\x0c\n\
    \x05\x04\x03\x02\0\x04\x12\x03-\x04\x0c\n\x0c\n\x05\x04\x03\x02\0\x06\
    \x12\x03-\r\x1f\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03-\x20+\n\x0c\n\x05\
    \x04\x03\x02\0\x03\x12\x03-./\n\x0c\n\x04\x04\x03\x03\0\x12\x04.\x04;\
    \x05\n\x0c\n\x05\x04\x03\x03\0\x01\x12\x03.\x0c\x1e\n\r\n\x06\x04\x03\
    \x03\0\x02\0\x12\x03/\x08\"\n\x0e\n\x07\x04\x03\x03\0\x02\0\x04\x12\x03/\
    \x08\x10\n\x0e\n\x07\x04\x03\x03\0\x02\0\x05\x12\x03/\x11\x17\n\x0e\n\
    \x07\x04\x03\x03\0\x02\0\x01\x12\x03/\x18\x1d\n\x0e\n\x07\x04\x03\x03\0\
    \x02\0\x03\x12\x03/\x20!\n\r\n\x06\x04\x03\x03\0\x02\x01\x12\x030\x08\
    \x1e\n\x0e\n\x07\x04\x03\x03\0\x02\x01\x04\x12\x030\x08\x10\n\x0e\n\x07\
    \x04\x03\x03\0\x02\x01\x05\x12\x030\x11\x16\n\x0e\n\x07\x04\x03\x03\0\
    \x02\x01\x01\x12\x030\x17\x19\n\x0e\n\x07\x04\x03\x03\0\x02\x01\x03\x12\
    \x030\x1c\x1d\n\r\n\x06\x04\x03\x03\0\x02\x02\x12\x031\x08\"\n\x0e\n\x07\
    \x04\x03\x03\0\x02\x02\x04\x12\x031\x08\x10\n\x0e\n\x07\x04\x03\x03\0\
    \x02\x02\x05\x12\x031\x11\x17\n\x0e\n\x07\x04\x03\x03\0\x02\x02\x01\x12\
    \x031\x18\x1d\n\x0e\n\x07\x04\x03\x03\0\x02\x02\x03\x12\x031\x20!\n\r\n\
    \x06\x04\x03\x03\0\x02\x03\x12\x032\x08$\n\x0e\n\x07\x04\x03\x03\0\x02\
    \x03\x04\x12\x032\x08\x10\n\x0e\n\x07\x04\x03\x03\0\x02\x03\x05\x12\x032\
    \x11\x17\n\x0e\n\x07\x04\x03\x03\0\x02\x03\x01\x12\x032\x18\x1f\n\x0e\n\
    \x07\x04\x03\x03\0\x02\x03\x03\x12\x032\"#\n\r\n\x06\x04\x03\x03\0\x02\
    \x04\x12\x033\x08#\n\x0e\n\x07\x04\x03\x03\0\x02\x04\x04\x12\x033\x08\
    \x10\n\x0e\n\x07\x04\x03\x03\0\x02\x04\x05\x12\x033\x11\x16\n\x0e\n\x07\
    \x04\x03\x03\0\x02\x04\x01\x12\x033\x17\x1e\n\x0e\n\x07\x04\x03\x03\0\
    \x02\x04\x03\x12\x033!\"\n\r\n\x06\x04\x03\x03\0\x02\x05\x12\x034\x08&\n\
    \x0e\n\x07\x04\x03\x03\0\x02\x05\x04\x12\x034\x08\x10\n\x0e\n\x07\x04\
    \x03\x03\0\x02\x05\x05\x12\x034\x11\x17\n\x0e\n\x07\x04\x03\x03\0\x02\
    \x05\x01\x12\x034\x18!\n\x0e\n\x07\x04\x03\x03\0\x02\x05\x03\x12\x034$%\
    \n\r\n\x06\x04\x03\x03\0\x02\x06\x12\x035\x08.\n\x0e\n\x07\x04\x03\x03\0\
    \x02\x06\x04\x12\x035\x08\x10\n\x0e\n\x07\x04\x03\x03\0\x02\x06\x05\x12\
    \x035\x11\x17\n\x0e\n\x07\x04\x03\x03\0\x02\x06\x01\x12\x035\x18)\n\x0e\
    \n\x07\x04\x03\x03\0\x02\x06\x03\x12\x035,-\n\r\n\x06\x04\x03\x03\0\x02\
    \x07\x12\x036\x08*\n\x0e\n\x07\x04\x03\x03\0\x02\x07\x04\x12\x036\x08\
    \x10\n\x0e\n\x07\x04\x03\x03\0\x02\x07\x05\x12\x036\x11\x17\n\x0e\n\x07\
    \x04\x03\x03\0\x02\x07\x01\x12\x036\x18%\n\x0e\n\x07\x04\x03\x03\0\x02\
    \x07\x03\x12\x036()\n\r\n\x06\x04\x03\x03\0\x02\x08\x12\x037\x08&\n\x0e\
    \n\x07\x04\x03\x03\0\x02\x08\x04\x12\x037\x08\x10\n\x0e\n\x07\x04\x03\
    \x03\0\x02\x08\x05\x12\x037\x11\x15\n\x0e\n\x07\x04\x03\x03\0\x02\x08\
    \x01\x12\x037\x16!\n\x0e\n\x07\x04\x03\x03\0\x02\x08\x03\x12\x037$%\n\r\
    \n\x06\x04\x03\x03\0\x02\t\x12\x038\x08*\n\x0e\n\x07\x04\x03\x03\0\x02\t\
    \x04\x12\x038\x08\x10\n\x0e\n\x07\x04\x03\x03\0\x02\t\x05\x12\x038\x11\
    \x15\n\x0e\n\x07\x04\x03\x03\0\x02\t\x01\x12\x038\x16$\n\x0e\n\x07\x04\
    \x03\x03\0\x02\t\x03\x12\x038')\n\r\n\x06\x04\x03\x03\0\x02\n\x12\x039\
    \x08'\n\x0e\n\x07\x04\x03\x03\0\x02\n\x04\x12\x039\x08\x10\n\x0e\n\x07\
    \x04\x03\x03\0\x02\n\x05\x12\x039\x11\x17\n\x0e\n\x07\x04\x03\x03\0\x02\
    \n\x01\x12\x039\x18!\n\x0e\n\x07\x04\x03\x03\0\x02\n\x03\x12\x039$&\n\r\
    \n\x06\x04\x03\x03\0\x02\x0b\x12\x03:\x08#\n\x0e\n\x07\x04\x03\x03\0\x02\
    \x0b\x04\x12\x03:\x08\x10\n\x0e\n\x07\x04\x03\x03\0\x02\x0b\x05\x12\x03:\
    \x11\x17\n\x0e\n\x07\x04\x03\x03\0\x02\x0b\x01\x12\x03:\x18\x1d\n\x0e\n\
    \x07\x04\x03\x03\0\x02\x0b\x03\x12\x03:\x20\"\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
