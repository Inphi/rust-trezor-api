// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `messages-binance.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct BinanceGetAddress {
    // message fields
    pub address_n: ::std::vec::Vec<u32>,
    show_display: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BinanceGetAddress {
    fn default() -> &'a BinanceGetAddress {
        <BinanceGetAddress as ::protobuf::Message>::default_instance()
    }
}

impl BinanceGetAddress {
    pub fn new() -> BinanceGetAddress {
        ::std::default::Default::default()
    }

    // repeated uint32 address_n = 1;


    pub fn get_address_n(&self) -> &[u32] {
        &self.address_n
    }
    pub fn clear_address_n(&mut self) {
        self.address_n.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_n(&mut self, v: ::std::vec::Vec<u32>) {
        self.address_n = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_n(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.address_n
    }

    // Take field
    pub fn take_address_n(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.address_n, ::std::vec::Vec::new())
    }

    // optional bool show_display = 2;


    pub fn get_show_display(&self) -> bool {
        self.show_display.unwrap_or(false)
    }
    pub fn clear_show_display(&mut self) {
        self.show_display = ::std::option::Option::None;
    }

    pub fn has_show_display(&self) -> bool {
        self.show_display.is_some()
    }

    // Param is passed by value, moved
    pub fn set_show_display(&mut self, v: bool) {
        self.show_display = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for BinanceGetAddress {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.address_n)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.show_display = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.show_display {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.show_display {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BinanceGetAddress {
        BinanceGetAddress::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "address_n",
                |m: &BinanceGetAddress| { &m.address_n },
                |m: &mut BinanceGetAddress| { &mut m.address_n },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "show_display",
                |m: &BinanceGetAddress| { &m.show_display },
                |m: &mut BinanceGetAddress| { &mut m.show_display },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BinanceGetAddress>(
                "BinanceGetAddress",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BinanceGetAddress {
        static instance: ::protobuf::rt::LazyV2<BinanceGetAddress> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BinanceGetAddress::new)
    }
}

impl ::protobuf::Clear for BinanceGetAddress {
    fn clear(&mut self) {
        self.address_n.clear();
        self.show_display = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BinanceGetAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BinanceGetAddress {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BinanceAddress {
    // message fields
    address: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BinanceAddress {
    fn default() -> &'a BinanceAddress {
        <BinanceAddress as ::protobuf::Message>::default_instance()
    }
}

impl BinanceAddress {
    pub fn new() -> BinanceAddress {
        ::std::default::Default::default()
    }

    // required string address = 1;


    pub fn get_address(&self) -> &str {
        match self.address.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        if self.address.is_none() {
            self.address.set_default();
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        self.address.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for BinanceAddress {
    fn is_initialized(&self) -> bool {
        if self.address.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.address.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.address.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BinanceAddress {
        BinanceAddress::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &BinanceAddress| { &m.address },
                |m: &mut BinanceAddress| { &mut m.address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BinanceAddress>(
                "BinanceAddress",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BinanceAddress {
        static instance: ::protobuf::rt::LazyV2<BinanceAddress> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BinanceAddress::new)
    }
}

impl ::protobuf::Clear for BinanceAddress {
    fn clear(&mut self) {
        self.address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BinanceAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BinanceAddress {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BinanceGetPublicKey {
    // message fields
    pub address_n: ::std::vec::Vec<u32>,
    show_display: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BinanceGetPublicKey {
    fn default() -> &'a BinanceGetPublicKey {
        <BinanceGetPublicKey as ::protobuf::Message>::default_instance()
    }
}

impl BinanceGetPublicKey {
    pub fn new() -> BinanceGetPublicKey {
        ::std::default::Default::default()
    }

    // repeated uint32 address_n = 1;


    pub fn get_address_n(&self) -> &[u32] {
        &self.address_n
    }
    pub fn clear_address_n(&mut self) {
        self.address_n.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_n(&mut self, v: ::std::vec::Vec<u32>) {
        self.address_n = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_n(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.address_n
    }

    // Take field
    pub fn take_address_n(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.address_n, ::std::vec::Vec::new())
    }

    // optional bool show_display = 2;


    pub fn get_show_display(&self) -> bool {
        self.show_display.unwrap_or(false)
    }
    pub fn clear_show_display(&mut self) {
        self.show_display = ::std::option::Option::None;
    }

    pub fn has_show_display(&self) -> bool {
        self.show_display.is_some()
    }

    // Param is passed by value, moved
    pub fn set_show_display(&mut self, v: bool) {
        self.show_display = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for BinanceGetPublicKey {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.address_n)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.show_display = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.show_display {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.show_display {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BinanceGetPublicKey {
        BinanceGetPublicKey::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "address_n",
                |m: &BinanceGetPublicKey| { &m.address_n },
                |m: &mut BinanceGetPublicKey| { &mut m.address_n },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "show_display",
                |m: &BinanceGetPublicKey| { &m.show_display },
                |m: &mut BinanceGetPublicKey| { &mut m.show_display },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BinanceGetPublicKey>(
                "BinanceGetPublicKey",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BinanceGetPublicKey {
        static instance: ::protobuf::rt::LazyV2<BinanceGetPublicKey> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BinanceGetPublicKey::new)
    }
}

impl ::protobuf::Clear for BinanceGetPublicKey {
    fn clear(&mut self) {
        self.address_n.clear();
        self.show_display = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BinanceGetPublicKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BinanceGetPublicKey {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BinancePublicKey {
    // message fields
    public_key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BinancePublicKey {
    fn default() -> &'a BinancePublicKey {
        <BinancePublicKey as ::protobuf::Message>::default_instance()
    }
}

impl BinancePublicKey {
    pub fn new() -> BinancePublicKey {
        ::std::default::Default::default()
    }

    // required bytes public_key = 1;


    pub fn get_public_key(&self) -> &[u8] {
        match self.public_key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_public_key(&mut self) {
        self.public_key.clear();
    }

    pub fn has_public_key(&self) -> bool {
        self.public_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.public_key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.public_key.is_none() {
            self.public_key.set_default();
        }
        self.public_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::std::vec::Vec<u8> {
        self.public_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for BinancePublicKey {
    fn is_initialized(&self) -> bool {
        if self.public_key.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.public_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.public_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.public_key.as_ref() {
            os.write_bytes(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BinancePublicKey {
        BinancePublicKey::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "public_key",
                |m: &BinancePublicKey| { &m.public_key },
                |m: &mut BinancePublicKey| { &mut m.public_key },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BinancePublicKey>(
                "BinancePublicKey",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BinancePublicKey {
        static instance: ::protobuf::rt::LazyV2<BinancePublicKey> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BinancePublicKey::new)
    }
}

impl ::protobuf::Clear for BinancePublicKey {
    fn clear(&mut self) {
        self.public_key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BinancePublicKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BinancePublicKey {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BinanceSignTx {
    // message fields
    pub address_n: ::std::vec::Vec<u32>,
    msg_count: ::std::option::Option<u32>,
    account_number: ::std::option::Option<i64>,
    chain_id: ::protobuf::SingularField<::std::string::String>,
    memo: ::protobuf::SingularField<::std::string::String>,
    sequence: ::std::option::Option<i64>,
    source: ::std::option::Option<i64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BinanceSignTx {
    fn default() -> &'a BinanceSignTx {
        <BinanceSignTx as ::protobuf::Message>::default_instance()
    }
}

impl BinanceSignTx {
    pub fn new() -> BinanceSignTx {
        ::std::default::Default::default()
    }

    // repeated uint32 address_n = 1;


    pub fn get_address_n(&self) -> &[u32] {
        &self.address_n
    }
    pub fn clear_address_n(&mut self) {
        self.address_n.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_n(&mut self, v: ::std::vec::Vec<u32>) {
        self.address_n = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_n(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.address_n
    }

    // Take field
    pub fn take_address_n(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.address_n, ::std::vec::Vec::new())
    }

    // optional uint32 msg_count = 2;


    pub fn get_msg_count(&self) -> u32 {
        self.msg_count.unwrap_or(0)
    }
    pub fn clear_msg_count(&mut self) {
        self.msg_count = ::std::option::Option::None;
    }

    pub fn has_msg_count(&self) -> bool {
        self.msg_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_msg_count(&mut self, v: u32) {
        self.msg_count = ::std::option::Option::Some(v);
    }

    // optional sint64 account_number = 3;


    pub fn get_account_number(&self) -> i64 {
        self.account_number.unwrap_or(0)
    }
    pub fn clear_account_number(&mut self) {
        self.account_number = ::std::option::Option::None;
    }

    pub fn has_account_number(&self) -> bool {
        self.account_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_number(&mut self, v: i64) {
        self.account_number = ::std::option::Option::Some(v);
    }

    // optional string chain_id = 4;


    pub fn get_chain_id(&self) -> &str {
        match self.chain_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_chain_id(&mut self) {
        self.chain_id.clear();
    }

    pub fn has_chain_id(&self) -> bool {
        self.chain_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chain_id(&mut self, v: ::std::string::String) {
        self.chain_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chain_id(&mut self) -> &mut ::std::string::String {
        if self.chain_id.is_none() {
            self.chain_id.set_default();
        }
        self.chain_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_chain_id(&mut self) -> ::std::string::String {
        self.chain_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string memo = 5;


    pub fn get_memo(&self) -> &str {
        match self.memo.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_memo(&mut self) {
        self.memo.clear();
    }

    pub fn has_memo(&self) -> bool {
        self.memo.is_some()
    }

    // Param is passed by value, moved
    pub fn set_memo(&mut self, v: ::std::string::String) {
        self.memo = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_memo(&mut self) -> &mut ::std::string::String {
        if self.memo.is_none() {
            self.memo.set_default();
        }
        self.memo.as_mut().unwrap()
    }

    // Take field
    pub fn take_memo(&mut self) -> ::std::string::String {
        self.memo.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional sint64 sequence = 6;


    pub fn get_sequence(&self) -> i64 {
        self.sequence.unwrap_or(0)
    }
    pub fn clear_sequence(&mut self) {
        self.sequence = ::std::option::Option::None;
    }

    pub fn has_sequence(&self) -> bool {
        self.sequence.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sequence(&mut self, v: i64) {
        self.sequence = ::std::option::Option::Some(v);
    }

    // optional sint64 source = 7;


    pub fn get_source(&self) -> i64 {
        self.source.unwrap_or(0)
    }
    pub fn clear_source(&mut self) {
        self.source = ::std::option::Option::None;
    }

    pub fn has_source(&self) -> bool {
        self.source.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source(&mut self, v: i64) {
        self.source = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for BinanceSignTx {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.address_n)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.msg_count = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.account_number = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.chain_id)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.memo)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.sequence = ::std::option::Option::Some(tmp);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.source = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.msg_count {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.account_number {
            my_size += ::protobuf::rt::value_varint_zigzag_size(3, v);
        }
        if let Some(ref v) = self.chain_id.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(ref v) = self.memo.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.sequence {
            my_size += ::protobuf::rt::value_varint_zigzag_size(6, v);
        }
        if let Some(v) = self.source {
            my_size += ::protobuf::rt::value_varint_zigzag_size(7, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.msg_count {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.account_number {
            os.write_sint64(3, v)?;
        }
        if let Some(ref v) = self.chain_id.as_ref() {
            os.write_string(4, &v)?;
        }
        if let Some(ref v) = self.memo.as_ref() {
            os.write_string(5, &v)?;
        }
        if let Some(v) = self.sequence {
            os.write_sint64(6, v)?;
        }
        if let Some(v) = self.source {
            os.write_sint64(7, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BinanceSignTx {
        BinanceSignTx::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "address_n",
                |m: &BinanceSignTx| { &m.address_n },
                |m: &mut BinanceSignTx| { &mut m.address_n },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "msg_count",
                |m: &BinanceSignTx| { &m.msg_count },
                |m: &mut BinanceSignTx| { &mut m.msg_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                "account_number",
                |m: &BinanceSignTx| { &m.account_number },
                |m: &mut BinanceSignTx| { &mut m.account_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "chain_id",
                |m: &BinanceSignTx| { &m.chain_id },
                |m: &mut BinanceSignTx| { &mut m.chain_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "memo",
                |m: &BinanceSignTx| { &m.memo },
                |m: &mut BinanceSignTx| { &mut m.memo },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                "sequence",
                |m: &BinanceSignTx| { &m.sequence },
                |m: &mut BinanceSignTx| { &mut m.sequence },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                "source",
                |m: &BinanceSignTx| { &m.source },
                |m: &mut BinanceSignTx| { &mut m.source },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BinanceSignTx>(
                "BinanceSignTx",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BinanceSignTx {
        static instance: ::protobuf::rt::LazyV2<BinanceSignTx> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BinanceSignTx::new)
    }
}

impl ::protobuf::Clear for BinanceSignTx {
    fn clear(&mut self) {
        self.address_n.clear();
        self.msg_count = ::std::option::Option::None;
        self.account_number = ::std::option::Option::None;
        self.chain_id.clear();
        self.memo.clear();
        self.sequence = ::std::option::Option::None;
        self.source = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BinanceSignTx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BinanceSignTx {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BinanceTxRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BinanceTxRequest {
    fn default() -> &'a BinanceTxRequest {
        <BinanceTxRequest as ::protobuf::Message>::default_instance()
    }
}

impl BinanceTxRequest {
    pub fn new() -> BinanceTxRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for BinanceTxRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BinanceTxRequest {
        BinanceTxRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BinanceTxRequest>(
                "BinanceTxRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BinanceTxRequest {
        static instance: ::protobuf::rt::LazyV2<BinanceTxRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BinanceTxRequest::new)
    }
}

impl ::protobuf::Clear for BinanceTxRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BinanceTxRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BinanceTxRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BinanceTransferMsg {
    // message fields
    pub inputs: ::protobuf::RepeatedField<BinanceTransferMsg_BinanceInputOutput>,
    pub outputs: ::protobuf::RepeatedField<BinanceTransferMsg_BinanceInputOutput>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BinanceTransferMsg {
    fn default() -> &'a BinanceTransferMsg {
        <BinanceTransferMsg as ::protobuf::Message>::default_instance()
    }
}

impl BinanceTransferMsg {
    pub fn new() -> BinanceTransferMsg {
        ::std::default::Default::default()
    }

    // repeated .hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput inputs = 1;


    pub fn get_inputs(&self) -> &[BinanceTransferMsg_BinanceInputOutput] {
        &self.inputs
    }
    pub fn clear_inputs(&mut self) {
        self.inputs.clear();
    }

    // Param is passed by value, moved
    pub fn set_inputs(&mut self, v: ::protobuf::RepeatedField<BinanceTransferMsg_BinanceInputOutput>) {
        self.inputs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_inputs(&mut self) -> &mut ::protobuf::RepeatedField<BinanceTransferMsg_BinanceInputOutput> {
        &mut self.inputs
    }

    // Take field
    pub fn take_inputs(&mut self) -> ::protobuf::RepeatedField<BinanceTransferMsg_BinanceInputOutput> {
        ::std::mem::replace(&mut self.inputs, ::protobuf::RepeatedField::new())
    }

    // repeated .hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput outputs = 2;


    pub fn get_outputs(&self) -> &[BinanceTransferMsg_BinanceInputOutput] {
        &self.outputs
    }
    pub fn clear_outputs(&mut self) {
        self.outputs.clear();
    }

    // Param is passed by value, moved
    pub fn set_outputs(&mut self, v: ::protobuf::RepeatedField<BinanceTransferMsg_BinanceInputOutput>) {
        self.outputs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_outputs(&mut self) -> &mut ::protobuf::RepeatedField<BinanceTransferMsg_BinanceInputOutput> {
        &mut self.outputs
    }

    // Take field
    pub fn take_outputs(&mut self) -> ::protobuf::RepeatedField<BinanceTransferMsg_BinanceInputOutput> {
        ::std::mem::replace(&mut self.outputs, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for BinanceTransferMsg {
    fn is_initialized(&self) -> bool {
        for v in &self.inputs {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.outputs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.inputs)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.outputs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.inputs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.outputs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.inputs {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.outputs {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BinanceTransferMsg {
        BinanceTransferMsg::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BinanceTransferMsg_BinanceInputOutput>>(
                "inputs",
                |m: &BinanceTransferMsg| { &m.inputs },
                |m: &mut BinanceTransferMsg| { &mut m.inputs },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BinanceTransferMsg_BinanceInputOutput>>(
                "outputs",
                |m: &BinanceTransferMsg| { &m.outputs },
                |m: &mut BinanceTransferMsg| { &mut m.outputs },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BinanceTransferMsg>(
                "BinanceTransferMsg",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BinanceTransferMsg {
        static instance: ::protobuf::rt::LazyV2<BinanceTransferMsg> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BinanceTransferMsg::new)
    }
}

impl ::protobuf::Clear for BinanceTransferMsg {
    fn clear(&mut self) {
        self.inputs.clear();
        self.outputs.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BinanceTransferMsg {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BinanceTransferMsg {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BinanceTransferMsg_BinanceInputOutput {
    // message fields
    address: ::protobuf::SingularField<::std::string::String>,
    pub coins: ::protobuf::RepeatedField<BinanceTransferMsg_BinanceCoin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BinanceTransferMsg_BinanceInputOutput {
    fn default() -> &'a BinanceTransferMsg_BinanceInputOutput {
        <BinanceTransferMsg_BinanceInputOutput as ::protobuf::Message>::default_instance()
    }
}

impl BinanceTransferMsg_BinanceInputOutput {
    pub fn new() -> BinanceTransferMsg_BinanceInputOutput {
        ::std::default::Default::default()
    }

    // optional string address = 1;


    pub fn get_address(&self) -> &str {
        match self.address.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        if self.address.is_none() {
            self.address.set_default();
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        self.address.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated .hw.trezor.messages.binance.BinanceTransferMsg.BinanceCoin coins = 2;


    pub fn get_coins(&self) -> &[BinanceTransferMsg_BinanceCoin] {
        &self.coins
    }
    pub fn clear_coins(&mut self) {
        self.coins.clear();
    }

    // Param is passed by value, moved
    pub fn set_coins(&mut self, v: ::protobuf::RepeatedField<BinanceTransferMsg_BinanceCoin>) {
        self.coins = v;
    }

    // Mutable pointer to the field.
    pub fn mut_coins(&mut self) -> &mut ::protobuf::RepeatedField<BinanceTransferMsg_BinanceCoin> {
        &mut self.coins
    }

    // Take field
    pub fn take_coins(&mut self) -> ::protobuf::RepeatedField<BinanceTransferMsg_BinanceCoin> {
        ::std::mem::replace(&mut self.coins, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for BinanceTransferMsg_BinanceInputOutput {
    fn is_initialized(&self) -> bool {
        for v in &self.coins {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.coins)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.address.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.coins {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.address.as_ref() {
            os.write_string(1, &v)?;
        }
        for v in &self.coins {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BinanceTransferMsg_BinanceInputOutput {
        BinanceTransferMsg_BinanceInputOutput::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &BinanceTransferMsg_BinanceInputOutput| { &m.address },
                |m: &mut BinanceTransferMsg_BinanceInputOutput| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BinanceTransferMsg_BinanceCoin>>(
                "coins",
                |m: &BinanceTransferMsg_BinanceInputOutput| { &m.coins },
                |m: &mut BinanceTransferMsg_BinanceInputOutput| { &mut m.coins },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BinanceTransferMsg_BinanceInputOutput>(
                "BinanceTransferMsg.BinanceInputOutput",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BinanceTransferMsg_BinanceInputOutput {
        static instance: ::protobuf::rt::LazyV2<BinanceTransferMsg_BinanceInputOutput> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BinanceTransferMsg_BinanceInputOutput::new)
    }
}

impl ::protobuf::Clear for BinanceTransferMsg_BinanceInputOutput {
    fn clear(&mut self) {
        self.address.clear();
        self.coins.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BinanceTransferMsg_BinanceInputOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BinanceTransferMsg_BinanceInputOutput {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BinanceTransferMsg_BinanceCoin {
    // message fields
    amount: ::std::option::Option<i64>,
    denom: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BinanceTransferMsg_BinanceCoin {
    fn default() -> &'a BinanceTransferMsg_BinanceCoin {
        <BinanceTransferMsg_BinanceCoin as ::protobuf::Message>::default_instance()
    }
}

impl BinanceTransferMsg_BinanceCoin {
    pub fn new() -> BinanceTransferMsg_BinanceCoin {
        ::std::default::Default::default()
    }

    // optional sint64 amount = 1;


    pub fn get_amount(&self) -> i64 {
        self.amount.unwrap_or(0)
    }
    pub fn clear_amount(&mut self) {
        self.amount = ::std::option::Option::None;
    }

    pub fn has_amount(&self) -> bool {
        self.amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: i64) {
        self.amount = ::std::option::Option::Some(v);
    }

    // optional string denom = 2;


    pub fn get_denom(&self) -> &str {
        match self.denom.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_denom(&mut self) {
        self.denom.clear();
    }

    pub fn has_denom(&self) -> bool {
        self.denom.is_some()
    }

    // Param is passed by value, moved
    pub fn set_denom(&mut self, v: ::std::string::String) {
        self.denom = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_denom(&mut self) -> &mut ::std::string::String {
        if self.denom.is_none() {
            self.denom.set_default();
        }
        self.denom.as_mut().unwrap()
    }

    // Take field
    pub fn take_denom(&mut self) -> ::std::string::String {
        self.denom.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for BinanceTransferMsg_BinanceCoin {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.amount = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.denom)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.amount {
            my_size += ::protobuf::rt::value_varint_zigzag_size(1, v);
        }
        if let Some(ref v) = self.denom.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.amount {
            os.write_sint64(1, v)?;
        }
        if let Some(ref v) = self.denom.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BinanceTransferMsg_BinanceCoin {
        BinanceTransferMsg_BinanceCoin::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                "amount",
                |m: &BinanceTransferMsg_BinanceCoin| { &m.amount },
                |m: &mut BinanceTransferMsg_BinanceCoin| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "denom",
                |m: &BinanceTransferMsg_BinanceCoin| { &m.denom },
                |m: &mut BinanceTransferMsg_BinanceCoin| { &mut m.denom },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BinanceTransferMsg_BinanceCoin>(
                "BinanceTransferMsg.BinanceCoin",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BinanceTransferMsg_BinanceCoin {
        static instance: ::protobuf::rt::LazyV2<BinanceTransferMsg_BinanceCoin> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BinanceTransferMsg_BinanceCoin::new)
    }
}

impl ::protobuf::Clear for BinanceTransferMsg_BinanceCoin {
    fn clear(&mut self) {
        self.amount = ::std::option::Option::None;
        self.denom.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BinanceTransferMsg_BinanceCoin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BinanceTransferMsg_BinanceCoin {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BinanceOrderMsg {
    // message fields
    id: ::protobuf::SingularField<::std::string::String>,
    ordertype: ::std::option::Option<BinanceOrderMsg_BinanceOrderType>,
    price: ::std::option::Option<i64>,
    quantity: ::std::option::Option<i64>,
    sender: ::protobuf::SingularField<::std::string::String>,
    side: ::std::option::Option<BinanceOrderMsg_BinanceOrderSide>,
    symbol: ::protobuf::SingularField<::std::string::String>,
    timeinforce: ::std::option::Option<BinanceOrderMsg_BinanceTimeInForce>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BinanceOrderMsg {
    fn default() -> &'a BinanceOrderMsg {
        <BinanceOrderMsg as ::protobuf::Message>::default_instance()
    }
}

impl BinanceOrderMsg {
    pub fn new() -> BinanceOrderMsg {
        ::std::default::Default::default()
    }

    // optional string id = 1;


    pub fn get_id(&self) -> &str {
        match self.id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        if self.id.is_none() {
            self.id.set_default();
        }
        self.id.as_mut().unwrap()
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        self.id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .hw.trezor.messages.binance.BinanceOrderMsg.BinanceOrderType ordertype = 2;


    pub fn get_ordertype(&self) -> BinanceOrderMsg_BinanceOrderType {
        self.ordertype.unwrap_or(BinanceOrderMsg_BinanceOrderType::OT_UNKNOWN)
    }
    pub fn clear_ordertype(&mut self) {
        self.ordertype = ::std::option::Option::None;
    }

    pub fn has_ordertype(&self) -> bool {
        self.ordertype.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ordertype(&mut self, v: BinanceOrderMsg_BinanceOrderType) {
        self.ordertype = ::std::option::Option::Some(v);
    }

    // optional sint64 price = 3;


    pub fn get_price(&self) -> i64 {
        self.price.unwrap_or(0)
    }
    pub fn clear_price(&mut self) {
        self.price = ::std::option::Option::None;
    }

    pub fn has_price(&self) -> bool {
        self.price.is_some()
    }

    // Param is passed by value, moved
    pub fn set_price(&mut self, v: i64) {
        self.price = ::std::option::Option::Some(v);
    }

    // optional sint64 quantity = 4;


    pub fn get_quantity(&self) -> i64 {
        self.quantity.unwrap_or(0)
    }
    pub fn clear_quantity(&mut self) {
        self.quantity = ::std::option::Option::None;
    }

    pub fn has_quantity(&self) -> bool {
        self.quantity.is_some()
    }

    // Param is passed by value, moved
    pub fn set_quantity(&mut self, v: i64) {
        self.quantity = ::std::option::Option::Some(v);
    }

    // optional string sender = 5;


    pub fn get_sender(&self) -> &str {
        match self.sender.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    pub fn has_sender(&self) -> bool {
        self.sender.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: ::std::string::String) {
        self.sender = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut ::std::string::String {
        if self.sender.is_none() {
            self.sender.set_default();
        }
        self.sender.as_mut().unwrap()
    }

    // Take field
    pub fn take_sender(&mut self) -> ::std::string::String {
        self.sender.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .hw.trezor.messages.binance.BinanceOrderMsg.BinanceOrderSide side = 6;


    pub fn get_side(&self) -> BinanceOrderMsg_BinanceOrderSide {
        self.side.unwrap_or(BinanceOrderMsg_BinanceOrderSide::SIDE_UNKNOWN)
    }
    pub fn clear_side(&mut self) {
        self.side = ::std::option::Option::None;
    }

    pub fn has_side(&self) -> bool {
        self.side.is_some()
    }

    // Param is passed by value, moved
    pub fn set_side(&mut self, v: BinanceOrderMsg_BinanceOrderSide) {
        self.side = ::std::option::Option::Some(v);
    }

    // optional string symbol = 7;


    pub fn get_symbol(&self) -> &str {
        match self.symbol.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_symbol(&mut self) {
        self.symbol.clear();
    }

    pub fn has_symbol(&self) -> bool {
        self.symbol.is_some()
    }

    // Param is passed by value, moved
    pub fn set_symbol(&mut self, v: ::std::string::String) {
        self.symbol = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_symbol(&mut self) -> &mut ::std::string::String {
        if self.symbol.is_none() {
            self.symbol.set_default();
        }
        self.symbol.as_mut().unwrap()
    }

    // Take field
    pub fn take_symbol(&mut self) -> ::std::string::String {
        self.symbol.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .hw.trezor.messages.binance.BinanceOrderMsg.BinanceTimeInForce timeinforce = 8;


    pub fn get_timeinforce(&self) -> BinanceOrderMsg_BinanceTimeInForce {
        self.timeinforce.unwrap_or(BinanceOrderMsg_BinanceTimeInForce::TIF_UNKNOWN)
    }
    pub fn clear_timeinforce(&mut self) {
        self.timeinforce = ::std::option::Option::None;
    }

    pub fn has_timeinforce(&self) -> bool {
        self.timeinforce.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timeinforce(&mut self, v: BinanceOrderMsg_BinanceTimeInForce) {
        self.timeinforce = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for BinanceOrderMsg {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.ordertype, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.price = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.quantity = ::std::option::Option::Some(tmp);
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.sender)?;
                },
                6 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.side, 6, &mut self.unknown_fields)?
                },
                7 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.symbol)?;
                },
                8 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.timeinforce, 8, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.ordertype {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        if let Some(v) = self.price {
            my_size += ::protobuf::rt::value_varint_zigzag_size(3, v);
        }
        if let Some(v) = self.quantity {
            my_size += ::protobuf::rt::value_varint_zigzag_size(4, v);
        }
        if let Some(ref v) = self.sender.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.side {
            my_size += ::protobuf::rt::enum_size(6, v);
        }
        if let Some(ref v) = self.symbol.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(v) = self.timeinforce {
            my_size += ::protobuf::rt::enum_size(8, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.id.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.ordertype {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(v) = self.price {
            os.write_sint64(3, v)?;
        }
        if let Some(v) = self.quantity {
            os.write_sint64(4, v)?;
        }
        if let Some(ref v) = self.sender.as_ref() {
            os.write_string(5, &v)?;
        }
        if let Some(v) = self.side {
            os.write_enum(6, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.symbol.as_ref() {
            os.write_string(7, &v)?;
        }
        if let Some(v) = self.timeinforce {
            os.write_enum(8, ::protobuf::ProtobufEnum::value(&v))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BinanceOrderMsg {
        BinanceOrderMsg::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &BinanceOrderMsg| { &m.id },
                |m: &mut BinanceOrderMsg| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<BinanceOrderMsg_BinanceOrderType>>(
                "ordertype",
                |m: &BinanceOrderMsg| { &m.ordertype },
                |m: &mut BinanceOrderMsg| { &mut m.ordertype },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                "price",
                |m: &BinanceOrderMsg| { &m.price },
                |m: &mut BinanceOrderMsg| { &mut m.price },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                "quantity",
                |m: &BinanceOrderMsg| { &m.quantity },
                |m: &mut BinanceOrderMsg| { &mut m.quantity },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sender",
                |m: &BinanceOrderMsg| { &m.sender },
                |m: &mut BinanceOrderMsg| { &mut m.sender },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<BinanceOrderMsg_BinanceOrderSide>>(
                "side",
                |m: &BinanceOrderMsg| { &m.side },
                |m: &mut BinanceOrderMsg| { &mut m.side },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "symbol",
                |m: &BinanceOrderMsg| { &m.symbol },
                |m: &mut BinanceOrderMsg| { &mut m.symbol },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<BinanceOrderMsg_BinanceTimeInForce>>(
                "timeinforce",
                |m: &BinanceOrderMsg| { &m.timeinforce },
                |m: &mut BinanceOrderMsg| { &mut m.timeinforce },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BinanceOrderMsg>(
                "BinanceOrderMsg",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BinanceOrderMsg {
        static instance: ::protobuf::rt::LazyV2<BinanceOrderMsg> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BinanceOrderMsg::new)
    }
}

impl ::protobuf::Clear for BinanceOrderMsg {
    fn clear(&mut self) {
        self.id.clear();
        self.ordertype = ::std::option::Option::None;
        self.price = ::std::option::Option::None;
        self.quantity = ::std::option::Option::None;
        self.sender.clear();
        self.side = ::std::option::Option::None;
        self.symbol.clear();
        self.timeinforce = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BinanceOrderMsg {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BinanceOrderMsg {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum BinanceOrderMsg_BinanceOrderType {
    OT_UNKNOWN = 0,
    MARKET = 1,
    LIMIT = 2,
    OT_RESERVED = 3,
}

impl ::protobuf::ProtobufEnum for BinanceOrderMsg_BinanceOrderType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<BinanceOrderMsg_BinanceOrderType> {
        match value {
            0 => ::std::option::Option::Some(BinanceOrderMsg_BinanceOrderType::OT_UNKNOWN),
            1 => ::std::option::Option::Some(BinanceOrderMsg_BinanceOrderType::MARKET),
            2 => ::std::option::Option::Some(BinanceOrderMsg_BinanceOrderType::LIMIT),
            3 => ::std::option::Option::Some(BinanceOrderMsg_BinanceOrderType::OT_RESERVED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [BinanceOrderMsg_BinanceOrderType] = &[
            BinanceOrderMsg_BinanceOrderType::OT_UNKNOWN,
            BinanceOrderMsg_BinanceOrderType::MARKET,
            BinanceOrderMsg_BinanceOrderType::LIMIT,
            BinanceOrderMsg_BinanceOrderType::OT_RESERVED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<BinanceOrderMsg_BinanceOrderType>("BinanceOrderMsg.BinanceOrderType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for BinanceOrderMsg_BinanceOrderType {
}

impl ::std::default::Default for BinanceOrderMsg_BinanceOrderType {
    fn default() -> Self {
        BinanceOrderMsg_BinanceOrderType::OT_UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for BinanceOrderMsg_BinanceOrderType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum BinanceOrderMsg_BinanceOrderSide {
    SIDE_UNKNOWN = 0,
    BUY = 1,
    SELL = 2,
}

impl ::protobuf::ProtobufEnum for BinanceOrderMsg_BinanceOrderSide {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<BinanceOrderMsg_BinanceOrderSide> {
        match value {
            0 => ::std::option::Option::Some(BinanceOrderMsg_BinanceOrderSide::SIDE_UNKNOWN),
            1 => ::std::option::Option::Some(BinanceOrderMsg_BinanceOrderSide::BUY),
            2 => ::std::option::Option::Some(BinanceOrderMsg_BinanceOrderSide::SELL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [BinanceOrderMsg_BinanceOrderSide] = &[
            BinanceOrderMsg_BinanceOrderSide::SIDE_UNKNOWN,
            BinanceOrderMsg_BinanceOrderSide::BUY,
            BinanceOrderMsg_BinanceOrderSide::SELL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<BinanceOrderMsg_BinanceOrderSide>("BinanceOrderMsg.BinanceOrderSide", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for BinanceOrderMsg_BinanceOrderSide {
}

impl ::std::default::Default for BinanceOrderMsg_BinanceOrderSide {
    fn default() -> Self {
        BinanceOrderMsg_BinanceOrderSide::SIDE_UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for BinanceOrderMsg_BinanceOrderSide {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum BinanceOrderMsg_BinanceTimeInForce {
    TIF_UNKNOWN = 0,
    GTE = 1,
    TIF_RESERVED = 2,
    IOC = 3,
}

impl ::protobuf::ProtobufEnum for BinanceOrderMsg_BinanceTimeInForce {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<BinanceOrderMsg_BinanceTimeInForce> {
        match value {
            0 => ::std::option::Option::Some(BinanceOrderMsg_BinanceTimeInForce::TIF_UNKNOWN),
            1 => ::std::option::Option::Some(BinanceOrderMsg_BinanceTimeInForce::GTE),
            2 => ::std::option::Option::Some(BinanceOrderMsg_BinanceTimeInForce::TIF_RESERVED),
            3 => ::std::option::Option::Some(BinanceOrderMsg_BinanceTimeInForce::IOC),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [BinanceOrderMsg_BinanceTimeInForce] = &[
            BinanceOrderMsg_BinanceTimeInForce::TIF_UNKNOWN,
            BinanceOrderMsg_BinanceTimeInForce::GTE,
            BinanceOrderMsg_BinanceTimeInForce::TIF_RESERVED,
            BinanceOrderMsg_BinanceTimeInForce::IOC,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<BinanceOrderMsg_BinanceTimeInForce>("BinanceOrderMsg.BinanceTimeInForce", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for BinanceOrderMsg_BinanceTimeInForce {
}

impl ::std::default::Default for BinanceOrderMsg_BinanceTimeInForce {
    fn default() -> Self {
        BinanceOrderMsg_BinanceTimeInForce::TIF_UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for BinanceOrderMsg_BinanceTimeInForce {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BinanceCancelMsg {
    // message fields
    refid: ::protobuf::SingularField<::std::string::String>,
    sender: ::protobuf::SingularField<::std::string::String>,
    symbol: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BinanceCancelMsg {
    fn default() -> &'a BinanceCancelMsg {
        <BinanceCancelMsg as ::protobuf::Message>::default_instance()
    }
}

impl BinanceCancelMsg {
    pub fn new() -> BinanceCancelMsg {
        ::std::default::Default::default()
    }

    // optional string refid = 1;


    pub fn get_refid(&self) -> &str {
        match self.refid.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_refid(&mut self) {
        self.refid.clear();
    }

    pub fn has_refid(&self) -> bool {
        self.refid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_refid(&mut self, v: ::std::string::String) {
        self.refid = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_refid(&mut self) -> &mut ::std::string::String {
        if self.refid.is_none() {
            self.refid.set_default();
        }
        self.refid.as_mut().unwrap()
    }

    // Take field
    pub fn take_refid(&mut self) -> ::std::string::String {
        self.refid.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string sender = 2;


    pub fn get_sender(&self) -> &str {
        match self.sender.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    pub fn has_sender(&self) -> bool {
        self.sender.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: ::std::string::String) {
        self.sender = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut ::std::string::String {
        if self.sender.is_none() {
            self.sender.set_default();
        }
        self.sender.as_mut().unwrap()
    }

    // Take field
    pub fn take_sender(&mut self) -> ::std::string::String {
        self.sender.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string symbol = 3;


    pub fn get_symbol(&self) -> &str {
        match self.symbol.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_symbol(&mut self) {
        self.symbol.clear();
    }

    pub fn has_symbol(&self) -> bool {
        self.symbol.is_some()
    }

    // Param is passed by value, moved
    pub fn set_symbol(&mut self, v: ::std::string::String) {
        self.symbol = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_symbol(&mut self) -> &mut ::std::string::String {
        if self.symbol.is_none() {
            self.symbol.set_default();
        }
        self.symbol.as_mut().unwrap()
    }

    // Take field
    pub fn take_symbol(&mut self) -> ::std::string::String {
        self.symbol.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for BinanceCancelMsg {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.refid)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.sender)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.symbol)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.refid.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.sender.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.symbol.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.refid.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.sender.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.symbol.as_ref() {
            os.write_string(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BinanceCancelMsg {
        BinanceCancelMsg::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "refid",
                |m: &BinanceCancelMsg| { &m.refid },
                |m: &mut BinanceCancelMsg| { &mut m.refid },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sender",
                |m: &BinanceCancelMsg| { &m.sender },
                |m: &mut BinanceCancelMsg| { &mut m.sender },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "symbol",
                |m: &BinanceCancelMsg| { &m.symbol },
                |m: &mut BinanceCancelMsg| { &mut m.symbol },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BinanceCancelMsg>(
                "BinanceCancelMsg",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BinanceCancelMsg {
        static instance: ::protobuf::rt::LazyV2<BinanceCancelMsg> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BinanceCancelMsg::new)
    }
}

impl ::protobuf::Clear for BinanceCancelMsg {
    fn clear(&mut self) {
        self.refid.clear();
        self.sender.clear();
        self.symbol.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BinanceCancelMsg {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BinanceCancelMsg {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BinanceSignedTx {
    // message fields
    signature: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    public_key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BinanceSignedTx {
    fn default() -> &'a BinanceSignedTx {
        <BinanceSignedTx as ::protobuf::Message>::default_instance()
    }
}

impl BinanceSignedTx {
    pub fn new() -> BinanceSignedTx {
        ::std::default::Default::default()
    }

    // required bytes signature = 1;


    pub fn get_signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required bytes public_key = 2;


    pub fn get_public_key(&self) -> &[u8] {
        match self.public_key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_public_key(&mut self) {
        self.public_key.clear();
    }

    pub fn has_public_key(&self) -> bool {
        self.public_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.public_key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.public_key.is_none() {
            self.public_key.set_default();
        }
        self.public_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::std::vec::Vec<u8> {
        self.public_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for BinanceSignedTx {
    fn is_initialized(&self) -> bool {
        if self.signature.is_none() {
            return false;
        }
        if self.public_key.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.signature)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.public_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.public_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.signature.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.public_key.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BinanceSignedTx {
        BinanceSignedTx::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signature",
                |m: &BinanceSignedTx| { &m.signature },
                |m: &mut BinanceSignedTx| { &mut m.signature },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "public_key",
                |m: &BinanceSignedTx| { &m.public_key },
                |m: &mut BinanceSignedTx| { &mut m.public_key },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BinanceSignedTx>(
                "BinanceSignedTx",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BinanceSignedTx {
        static instance: ::protobuf::rt::LazyV2<BinanceSignedTx> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BinanceSignedTx::new)
    }
}

impl ::protobuf::Clear for BinanceSignedTx {
    fn clear(&mut self) {
        self.signature.clear();
        self.public_key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BinanceSignedTx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BinanceSignedTx {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16messages-binance.proto\x12\x1ahw.trezor.messages.binance\"S\n\x11B\
    inanceGetAddress\x12\x1b\n\taddress_n\x18\x01\x20\x03(\rR\x08addressN\
    \x12!\n\x0cshow_display\x18\x02\x20\x01(\x08R\x0bshowDisplay\"*\n\x0eBin\
    anceAddress\x12\x18\n\x07address\x18\x01\x20\x02(\tR\x07address\"U\n\x13\
    BinanceGetPublicKey\x12\x1b\n\taddress_n\x18\x01\x20\x03(\rR\x08addressN\
    \x12!\n\x0cshow_display\x18\x02\x20\x01(\x08R\x0bshowDisplay\"1\n\x10Bin\
    ancePublicKey\x12\x1d\n\npublic_key\x18\x01\x20\x02(\x0cR\tpublicKey\"\
    \xd3\x01\n\rBinanceSignTx\x12\x1b\n\taddress_n\x18\x01\x20\x03(\rR\x08ad\
    dressN\x12\x1b\n\tmsg_count\x18\x02\x20\x01(\rR\x08msgCount\x12%\n\x0eac\
    count_number\x18\x03\x20\x01(\x12R\raccountNumber\x12\x19\n\x08chain_id\
    \x18\x04\x20\x01(\tR\x07chainId\x12\x12\n\x04memo\x18\x05\x20\x01(\tR\
    \x04memo\x12\x1a\n\x08sequence\x18\x06\x20\x01(\x12R\x08sequence\x12\x16\
    \n\x06source\x18\x07\x20\x01(\x12R\x06source\"\x12\n\x10BinanceTxRequest\
    \"\x8c\x03\n\x12BinanceTransferMsg\x12Y\n\x06inputs\x18\x01\x20\x03(\x0b\
    2A.hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutputR\x06\
    inputs\x12[\n\x07outputs\x18\x02\x20\x03(\x0b2A.hw.trezor.messages.binan\
    ce.BinanceTransferMsg.BinanceInputOutputR\x07outputs\x1a\x80\x01\n\x12Bi\
    nanceInputOutput\x12\x18\n\x07address\x18\x01\x20\x01(\tR\x07address\x12\
    P\n\x05coins\x18\x02\x20\x03(\x0b2:.hw.trezor.messages.binance.BinanceTr\
    ansferMsg.BinanceCoinR\x05coins\x1a;\n\x0bBinanceCoin\x12\x16\n\x06amoun\
    t\x18\x01\x20\x01(\x12R\x06amount\x12\x14\n\x05denom\x18\x02\x20\x01(\tR\
    \x05denom\"\xe3\x04\n\x0fBinanceOrderMsg\x12\x0e\n\x02id\x18\x01\x20\x01\
    (\tR\x02id\x12Z\n\tordertype\x18\x02\x20\x01(\x0e2<.hw.trezor.messages.b\
    inance.BinanceOrderMsg.BinanceOrderTypeR\tordertype\x12\x14\n\x05price\
    \x18\x03\x20\x01(\x12R\x05price\x12\x1a\n\x08quantity\x18\x04\x20\x01(\
    \x12R\x08quantity\x12\x16\n\x06sender\x18\x05\x20\x01(\tR\x06sender\x12P\
    \n\x04side\x18\x06\x20\x01(\x0e2<.hw.trezor.messages.binance.BinanceOrde\
    rMsg.BinanceOrderSideR\x04side\x12\x16\n\x06symbol\x18\x07\x20\x01(\tR\
    \x06symbol\x12`\n\x0btimeinforce\x18\x08\x20\x01(\x0e2>.hw.trezor.messag\
    es.binance.BinanceOrderMsg.BinanceTimeInForceR\x0btimeinforce\"J\n\x10Bi\
    nanceOrderType\x12\x0e\n\nOT_UNKNOWN\x10\0\x12\n\n\x06MARKET\x10\x01\x12\
    \t\n\x05LIMIT\x10\x02\x12\x0f\n\x0bOT_RESERVED\x10\x03\"7\n\x10BinanceOr\
    derSide\x12\x10\n\x0cSIDE_UNKNOWN\x10\0\x12\x07\n\x03BUY\x10\x01\x12\x08\
    \n\x04SELL\x10\x02\"I\n\x12BinanceTimeInForce\x12\x0f\n\x0bTIF_UNKNOWN\
    \x10\0\x12\x07\n\x03GTE\x10\x01\x12\x10\n\x0cTIF_RESERVED\x10\x02\x12\
    \x07\n\x03IOC\x10\x03\"X\n\x10BinanceCancelMsg\x12\x14\n\x05refid\x18\
    \x01\x20\x01(\tR\x05refid\x12\x16\n\x06sender\x18\x02\x20\x01(\tR\x06sen\
    der\x12\x16\n\x06symbol\x18\x03\x20\x01(\tR\x06symbol\"N\n\x0fBinanceSig\
    nedTx\x12\x1c\n\tsignature\x18\x01\x20\x02(\x0cR\tsignature\x12\x1d\n\np\
    ublic_key\x18\x02\x20\x02(\x0cR\tpublicKeyB;\n#com.satoshilabs.trezor.li\
    b.protobufB\x14TrezorMessageBinanceJ\x9b&\n\x07\x12\x05\0\0\x91\x01\x01\
    \n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\x08\"\n\x08\
    \n\x01\x08\x12\x03\x04\0<\n.\n\x02\x08\x01\x12\x03\x04\0<\x1a#\x20Sugar\
    \x20for\x20easier\x20handling\x20in\x20Java\n\n\x08\n\x01\x08\x12\x03\
    \x05\05\n\t\n\x02\x08\x08\x12\x03\x05\05\nk\n\x02\x04\0\x12\x04\r\0\x10\
    \x01\x1a_*\n\x20Request:\x20Ask\x20the\x20device\x20for\x20a\x20Binance\
    \x20address.\n\x20@start\n\x20@next\x20BinanceAddress\n\x20@next\x20Fail\
    ure\n\n\n\n\x03\x04\0\x01\x12\x03\r\x08\x19\nC\n\x04\x04\0\x02\0\x12\x03\
    \x0e\x04\"\"6\x20BIP-32-style\x20path\x20to\x20derive\x20the\x20key\x20f\
    rom\x20master\x20node\n\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x0e\x04\x0c\
    \n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0e\r\x13\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03\x0e\x14\x1d\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0e\x20!\nC\
    \n\x04\x04\0\x02\x01\x12\x03\x0f\x04#\"6\x20optionally\x20prompt\x20for\
    \x20confirmation\x20on\x20trezor\x20display\n\n\x0c\n\x05\x04\0\x02\x01\
    \x04\x12\x03\x0f\x04\x0c\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x0f\r\x11\
    \n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0f\x12\x1e\n\x0c\n\x05\x04\0\x02\
    \x01\x03\x12\x03\x0f!\"\n2\n\x02\x04\x01\x12\x04\x16\0\x18\x01\x1a&*\n\
    \x20Response:\x20A\x20Binance\x20address.\n\x20@end\n\n\n\n\x03\x04\x01\
    \x01\x12\x03\x16\x08\x16\n.\n\x04\x04\x01\x02\0\x12\x03\x17\x04\x20\"!\
    \x20prefixed\x20bech32\x20Binance\x20address\n\n\x0c\n\x05\x04\x01\x02\0\
    \x04\x12\x03\x17\x04\x0c\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x17\r\x13\
    \n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x17\x14\x1b\n\x0c\n\x05\x04\x01\
    \x02\0\x03\x12\x03\x17\x1e\x1f\nu\n\x02\x04\x02\x12\x04\x1f\0\"\x01\x1ai\
    *\n\x20Request:\x20Ask\x20device\x20for\x20a\x20public\x20key\x20corresp\
    onding\x20to\x20address_n\x20path.\n\x20@start\n\x20@next\x20BinancePubl\
    icKey\n\n\n\n\x03\x04\x02\x01\x12\x03\x1f\x08\x1b\n=\n\x04\x04\x02\x02\0\
    \x12\x03\x20\x04\"\"0\x20BIP-32\x20path\x20to\x20derive\x20the\x20key\
    \x20from\x20master\x20node\n\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03\x20\
    \x04\x0c\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x20\r\x13\n\x0c\n\x05\x04\
    \x02\x02\0\x01\x12\x03\x20\x14\x1d\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\
    \x20\x20!\nC\n\x04\x04\x02\x02\x01\x12\x03!\x04#\"6\x20optionally\x20sho\
    w\x20on\x20display\x20before\x20sending\x20the\x20result\n\n\x0c\n\x05\
    \x04\x02\x02\x01\x04\x12\x03!\x04\x0c\n\x0c\n\x05\x04\x02\x02\x01\x05\
    \x12\x03!\r\x11\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03!\x12\x1e\n\x0c\n\
    \x05\x04\x02\x02\x01\x03\x12\x03!!\"\nM\n\x02\x04\x03\x12\x04(\0*\x01\
    \x1aA*\n\x20Response:\x20A\x20public\x20key\x20corresponding\x20to\x20ad\
    dress_n\x20path.\n\x20@end\n\n\n\n\x03\x04\x03\x01\x12\x03(\x08\x18\n\
    \x0b\n\x04\x04\x03\x02\0\x12\x03)\x04\"\n\x0c\n\x05\x04\x03\x02\0\x04\
    \x12\x03)\x04\x0c\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03)\r\x12\n\x0c\n\
    \x05\x04\x03\x02\0\x01\x12\x03)\x13\x1d\n\x0c\n\x05\x04\x03\x02\0\x03\
    \x12\x03)\x20!\n\xbf\x02\n\x02\x04\x04\x12\x044\0<\x01\x1a\xb2\x02*\n\
    \x20Request:\x20Starts\x20the\x20Binance\x20transaction\x20protocol\x20f\
    low.\n\x20A\x20transaction\x20consists\x20of\x20these\x20common\x20field\
    s\x20and\x20a\x20series\x20of\x20Binance<Any>Msg\x20messages.\n\x20These\
    \x20parts\x20form\x20a\x20JSON\x20structure\x20(a\x20string)\x20in\x20Tr\
    ezor's\x20memory,\x20which\x20is\x20signed\x20to\x20produce\x20a\x20Bina\
    nceSignedTx.\n\x20@start\n\x20@next\x20BinanceTxRequest\n\x20@next\x20Fa\
    ilure\n\n\n\n\x03\x04\x04\x01\x12\x034\x08\x15\nC\n\x04\x04\x04\x02\0\
    \x12\x035\x04\"\"6\x20BIP-32-style\x20path\x20to\x20derive\x20the\x20key\
    \x20from\x20master\x20node\n\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x035\x04\
    \x0c\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x035\r\x13\n\x0c\n\x05\x04\x04\
    \x02\0\x01\x12\x035\x14\x1d\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x035\x20!\
    \nA\n\x04\x04\x04\x02\x01\x12\x036\x04\"\"4\x20count\x20of\x20Binance<An\
    y>Msg\x20to\x20be\x20included\x20in\x20this\x20tx\n\n\x0c\n\x05\x04\x04\
    \x02\x01\x04\x12\x036\x04\x0c\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x036\r\
    \x13\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x036\x14\x1d\n\x0c\n\x05\x04\
    \x04\x02\x01\x03\x12\x036\x20!\n\x0b\n\x04\x04\x04\x02\x02\x12\x037\x04'\
    \n\x0c\n\x05\x04\x04\x02\x02\x04\x12\x037\x04\x0c\n\x0c\n\x05\x04\x04\
    \x02\x02\x05\x12\x037\r\x13\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x037\x14\
    \"\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x037%&\n\x0b\n\x04\x04\x04\x02\
    \x03\x12\x038\x04!\n\x0c\n\x05\x04\x04\x02\x03\x04\x12\x038\x04\x0c\n\
    \x0c\n\x05\x04\x04\x02\x03\x05\x12\x038\r\x13\n\x0c\n\x05\x04\x04\x02\
    \x03\x01\x12\x038\x14\x1c\n\x0c\n\x05\x04\x04\x02\x03\x03\x12\x038\x1f\
    \x20\n\x0b\n\x04\x04\x04\x02\x04\x12\x039\x04\x1d\n\x0c\n\x05\x04\x04\
    \x02\x04\x04\x12\x039\x04\x0c\n\x0c\n\x05\x04\x04\x02\x04\x05\x12\x039\r\
    \x13\n\x0c\n\x05\x04\x04\x02\x04\x01\x12\x039\x14\x18\n\x0c\n\x05\x04\
    \x04\x02\x04\x03\x12\x039\x1b\x1c\n\x0b\n\x04\x04\x04\x02\x05\x12\x03:\
    \x04!\n\x0c\n\x05\x04\x04\x02\x05\x04\x12\x03:\x04\x0c\n\x0c\n\x05\x04\
    \x04\x02\x05\x05\x12\x03:\r\x13\n\x0c\n\x05\x04\x04\x02\x05\x01\x12\x03:\
    \x14\x1c\n\x0c\n\x05\x04\x04\x02\x05\x03\x12\x03:\x1f\x20\n\x0b\n\x04\
    \x04\x04\x02\x06\x12\x03;\x04\x1f\n\x0c\n\x05\x04\x04\x02\x06\x04\x12\
    \x03;\x04\x0c\n\x0c\n\x05\x04\x04\x02\x06\x05\x12\x03;\r\x13\n\x0c\n\x05\
    \x04\x04\x02\x06\x01\x12\x03;\x14\x1a\n\x0c\n\x05\x04\x04\x02\x06\x03\
    \x12\x03;\x1d\x1e\n\xbb\x01\n\x02\x04\x05\x12\x04D\0E\x01\x1a\xae\x01*\n\
    \x20Response:\x20Trezor\x20requests\x20the\x20next\x20message\x20or\x20s\
    ignals\x20that\x20it\x20is\x20ready\x20to\x20send\x20a\x20BinanceSignedT\
    x.\n\x20@next\x20BinanceTransferMsg\n\x20@next\x20BinanceOrderMsg\n\x20@\
    next\x20BinanceCancelMsg\n\n\n\n\x03\x04\x05\x01\x12\x03D\x08\x18\nz\n\
    \x02\x04\x06\x12\x04L\0Y\x01\x1an*\n\x20Request:\x20Ask\x20the\x20device\
    \x20to\x20include\x20a\x20Binance\x20transfer\x20msg\x20in\x20the\x20tx.\
    \n\x20@next\x20BinanceSignedTx\n\x20@next\x20Failure\n\n\n\n\x03\x04\x06\
    \x01\x12\x03L\x08\x1a\n\x0b\n\x04\x04\x06\x02\0\x12\x03M\x04+\n\x0c\n\
    \x05\x04\x06\x02\0\x04\x12\x03M\x04\x0c\n\x0c\n\x05\x04\x06\x02\0\x06\
    \x12\x03M\r\x1f\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03M\x20&\n\x0c\n\x05\
    \x04\x06\x02\0\x03\x12\x03M)*\n\x0b\n\x04\x04\x06\x02\x01\x12\x03N\x04,\
    \n\x0c\n\x05\x04\x06\x02\x01\x04\x12\x03N\x04\x0c\n\x0c\n\x05\x04\x06\
    \x02\x01\x06\x12\x03N\r\x1f\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03N\x20\
    '\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x03N*+\n\x0c\n\x04\x04\x06\x03\0\
    \x12\x04P\x04S\x05\n\x0c\n\x05\x04\x06\x03\0\x01\x12\x03P\x0c\x1e\n\r\n\
    \x06\x04\x06\x03\0\x02\0\x12\x03Q\x08$\n\x0e\n\x07\x04\x06\x03\0\x02\0\
    \x04\x12\x03Q\x08\x10\n\x0e\n\x07\x04\x06\x03\0\x02\0\x05\x12\x03Q\x11\
    \x17\n\x0e\n\x07\x04\x06\x03\0\x02\0\x01\x12\x03Q\x18\x1f\n\x0e\n\x07\
    \x04\x06\x03\0\x02\0\x03\x12\x03Q\"#\n\r\n\x06\x04\x06\x03\0\x02\x01\x12\
    \x03R\x08'\n\x0e\n\x07\x04\x06\x03\0\x02\x01\x04\x12\x03R\x08\x10\n\x0e\
    \n\x07\x04\x06\x03\0\x02\x01\x06\x12\x03R\x11\x1c\n\x0e\n\x07\x04\x06\
    \x03\0\x02\x01\x01\x12\x03R\x1d\"\n\x0e\n\x07\x04\x06\x03\0\x02\x01\x03\
    \x12\x03R%&\n\x0c\n\x04\x04\x06\x03\x01\x12\x04U\x04X\x05\n\x0c\n\x05\
    \x04\x06\x03\x01\x01\x12\x03U\x0c\x17\n\r\n\x06\x04\x06\x03\x01\x02\0\
    \x12\x03V\x08#\n\x0e\n\x07\x04\x06\x03\x01\x02\0\x04\x12\x03V\x08\x10\n\
    \x0e\n\x07\x04\x06\x03\x01\x02\0\x05\x12\x03V\x11\x17\n\x0e\n\x07\x04\
    \x06\x03\x01\x02\0\x01\x12\x03V\x18\x1e\n\x0e\n\x07\x04\x06\x03\x01\x02\
    \0\x03\x12\x03V!\"\n\r\n\x06\x04\x06\x03\x01\x02\x01\x12\x03W\x08\"\n\
    \x0e\n\x07\x04\x06\x03\x01\x02\x01\x04\x12\x03W\x08\x10\n\x0e\n\x07\x04\
    \x06\x03\x01\x02\x01\x05\x12\x03W\x11\x17\n\x0e\n\x07\x04\x06\x03\x01\
    \x02\x01\x01\x12\x03W\x18\x1d\n\x0e\n\x07\x04\x06\x03\x01\x02\x01\x03\
    \x12\x03W\x20!\nw\n\x02\x04\x07\x12\x04`\0}\x01\x1ak*\n\x20Request:\x20A\
    sk\x20the\x20device\x20to\x20include\x20a\x20Binance\x20order\x20msg\x20\
    in\x20the\x20tx.\n\x20@next\x20BinanceSignedTx\n\x20@next\x20Failure\n\n\
    \n\n\x03\x04\x07\x01\x12\x03`\x08\x17\n\x0b\n\x04\x04\x07\x02\0\x12\x03a\
    \x04\x1b\n\x0c\n\x05\x04\x07\x02\0\x04\x12\x03a\x04\x0c\n\x0c\n\x05\x04\
    \x07\x02\0\x05\x12\x03a\r\x13\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03a\x14\
    \x16\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03a\x19\x1a\n\x0b\n\x04\x04\x07\
    \x02\x01\x12\x03b\x04,\n\x0c\n\x05\x04\x07\x02\x01\x04\x12\x03b\x04\x0c\
    \n\x0c\n\x05\x04\x07\x02\x01\x06\x12\x03b\r\x1d\n\x0c\n\x05\x04\x07\x02\
    \x01\x01\x12\x03b\x1e'\n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x03b*+\n\x0b\
    \n\x04\x04\x07\x02\x02\x12\x03c\x04\x1e\n\x0c\n\x05\x04\x07\x02\x02\x04\
    \x12\x03c\x04\x0c\n\x0c\n\x05\x04\x07\x02\x02\x05\x12\x03c\r\x13\n\x0c\n\
    \x05\x04\x07\x02\x02\x01\x12\x03c\x14\x19\n\x0c\n\x05\x04\x07\x02\x02\
    \x03\x12\x03c\x1c\x1d\n\x0b\n\x04\x04\x07\x02\x03\x12\x03d\x04!\n\x0c\n\
    \x05\x04\x07\x02\x03\x04\x12\x03d\x04\x0c\n\x0c\n\x05\x04\x07\x02\x03\
    \x05\x12\x03d\r\x13\n\x0c\n\x05\x04\x07\x02\x03\x01\x12\x03d\x14\x1c\n\
    \x0c\n\x05\x04\x07\x02\x03\x03\x12\x03d\x1f\x20\n\x0b\n\x04\x04\x07\x02\
    \x04\x12\x03e\x04\x1f\n\x0c\n\x05\x04\x07\x02\x04\x04\x12\x03e\x04\x0c\n\
    \x0c\n\x05\x04\x07\x02\x04\x05\x12\x03e\r\x13\n\x0c\n\x05\x04\x07\x02\
    \x04\x01\x12\x03e\x14\x1a\n\x0c\n\x05\x04\x07\x02\x04\x03\x12\x03e\x1d\
    \x1e\n\x0b\n\x04\x04\x07\x02\x05\x12\x03f\x04'\n\x0c\n\x05\x04\x07\x02\
    \x05\x04\x12\x03f\x04\x0c\n\x0c\n\x05\x04\x07\x02\x05\x06\x12\x03f\r\x1d\
    \n\x0c\n\x05\x04\x07\x02\x05\x01\x12\x03f\x1e\"\n\x0c\n\x05\x04\x07\x02\
    \x05\x03\x12\x03f%&\n\x0b\n\x04\x04\x07\x02\x06\x12\x03g\x04\x1f\n\x0c\n\
    \x05\x04\x07\x02\x06\x04\x12\x03g\x04\x0c\n\x0c\n\x05\x04\x07\x02\x06\
    \x05\x12\x03g\r\x13\n\x0c\n\x05\x04\x07\x02\x06\x01\x12\x03g\x14\x1a\n\
    \x0c\n\x05\x04\x07\x02\x06\x03\x12\x03g\x1d\x1e\n\x0b\n\x04\x04\x07\x02\
    \x07\x12\x03h\x040\n\x0c\n\x05\x04\x07\x02\x07\x04\x12\x03h\x04\x0c\n\
    \x0c\n\x05\x04\x07\x02\x07\x06\x12\x03h\r\x1f\n\x0c\n\x05\x04\x07\x02\
    \x07\x01\x12\x03h\x20+\n\x0c\n\x05\x04\x07\x02\x07\x03\x12\x03h./\n\x0c\
    \n\x04\x04\x07\x04\0\x12\x04j\x04o\x05\n\x0c\n\x05\x04\x07\x04\0\x01\x12\
    \x03j\t\x19\n\r\n\x06\x04\x07\x04\0\x02\0\x12\x03k\x08\x17\n\x0e\n\x07\
    \x04\x07\x04\0\x02\0\x01\x12\x03k\x08\x12\n\x0e\n\x07\x04\x07\x04\0\x02\
    \0\x02\x12\x03k\x15\x16\n\r\n\x06\x04\x07\x04\0\x02\x01\x12\x03l\x08\x13\
    \n\x0e\n\x07\x04\x07\x04\0\x02\x01\x01\x12\x03l\x08\x0e\n\x0e\n\x07\x04\
    \x07\x04\0\x02\x01\x02\x12\x03l\x11\x12\n\r\n\x06\x04\x07\x04\0\x02\x02\
    \x12\x03m\x08\x12\n\x0e\n\x07\x04\x07\x04\0\x02\x02\x01\x12\x03m\x08\r\n\
    \x0e\n\x07\x04\x07\x04\0\x02\x02\x02\x12\x03m\x10\x11\n\r\n\x06\x04\x07\
    \x04\0\x02\x03\x12\x03n\x08\x18\n\x0e\n\x07\x04\x07\x04\0\x02\x03\x01\
    \x12\x03n\x08\x13\n\x0e\n\x07\x04\x07\x04\0\x02\x03\x02\x12\x03n\x16\x17\
    \n\x0c\n\x04\x04\x07\x04\x01\x12\x04q\x04u\x05\n\x0c\n\x05\x04\x07\x04\
    \x01\x01\x12\x03q\t\x19\n\r\n\x06\x04\x07\x04\x01\x02\0\x12\x03r\x08\x19\
    \n\x0e\n\x07\x04\x07\x04\x01\x02\0\x01\x12\x03r\x08\x14\n\x0e\n\x07\x04\
    \x07\x04\x01\x02\0\x02\x12\x03r\x17\x18\n\r\n\x06\x04\x07\x04\x01\x02\
    \x01\x12\x03s\x08\x10\n\x0e\n\x07\x04\x07\x04\x01\x02\x01\x01\x12\x03s\
    \x08\x0b\n\x0e\n\x07\x04\x07\x04\x01\x02\x01\x02\x12\x03s\x0e\x0f\n\r\n\
    \x06\x04\x07\x04\x01\x02\x02\x12\x03t\x08\x11\n\x0e\n\x07\x04\x07\x04\
    \x01\x02\x02\x01\x12\x03t\x08\x0c\n\x0e\n\x07\x04\x07\x04\x01\x02\x02\
    \x02\x12\x03t\x0f\x10\n\x0c\n\x04\x04\x07\x04\x02\x12\x04w\x04|\x05\n\
    \x0c\n\x05\x04\x07\x04\x02\x01\x12\x03w\t\x1b\n\r\n\x06\x04\x07\x04\x02\
    \x02\0\x12\x03x\x08\x18\n\x0e\n\x07\x04\x07\x04\x02\x02\0\x01\x12\x03x\
    \x08\x13\n\x0e\n\x07\x04\x07\x04\x02\x02\0\x02\x12\x03x\x16\x17\n\r\n\
    \x06\x04\x07\x04\x02\x02\x01\x12\x03y\x08\x10\n\x0e\n\x07\x04\x07\x04\
    \x02\x02\x01\x01\x12\x03y\x08\x0b\n\x0e\n\x07\x04\x07\x04\x02\x02\x01\
    \x02\x12\x03y\x0e\x0f\n\r\n\x06\x04\x07\x04\x02\x02\x02\x12\x03z\x08\x19\
    \n\x0e\n\x07\x04\x07\x04\x02\x02\x02\x01\x12\x03z\x08\x14\n\x0e\n\x07\
    \x04\x07\x04\x02\x02\x02\x02\x12\x03z\x17\x18\n\r\n\x06\x04\x07\x04\x02\
    \x02\x03\x12\x03{\x08\x10\n\x0e\n\x07\x04\x07\x04\x02\x02\x03\x01\x12\
    \x03{\x08\x0b\n\x0e\n\x07\x04\x07\x04\x02\x02\x03\x02\x12\x03{\x0e\x0f\n\
    z\n\x02\x04\x08\x12\x06\x84\x01\0\x88\x01\x01\x1al*\n\x20Request:\x20Ask\
    \x20the\x20device\x20to\x20include\x20a\x20Binance\x20cancel\x20msg\x20i\
    n\x20the\x20tx.\n\x20@next\x20BinanceSignedTx\n\x20@next\x20Failure\n\n\
    \x0b\n\x03\x04\x08\x01\x12\x04\x84\x01\x08\x18\n\x0c\n\x04\x04\x08\x02\0\
    \x12\x04\x85\x01\x04\x1e\n\r\n\x05\x04\x08\x02\0\x04\x12\x04\x85\x01\x04\
    \x0c\n\r\n\x05\x04\x08\x02\0\x05\x12\x04\x85\x01\r\x13\n\r\n\x05\x04\x08\
    \x02\0\x01\x12\x04\x85\x01\x14\x19\n\r\n\x05\x04\x08\x02\0\x03\x12\x04\
    \x85\x01\x1c\x1d\n\x0c\n\x04\x04\x08\x02\x01\x12\x04\x86\x01\x04\x1f\n\r\
    \n\x05\x04\x08\x02\x01\x04\x12\x04\x86\x01\x04\x0c\n\r\n\x05\x04\x08\x02\
    \x01\x05\x12\x04\x86\x01\r\x13\n\r\n\x05\x04\x08\x02\x01\x01\x12\x04\x86\
    \x01\x14\x1a\n\r\n\x05\x04\x08\x02\x01\x03\x12\x04\x86\x01\x1d\x1e\n\x0c\
    \n\x04\x04\x08\x02\x02\x12\x04\x87\x01\x04\x1f\n\r\n\x05\x04\x08\x02\x02\
    \x04\x12\x04\x87\x01\x04\x0c\n\r\n\x05\x04\x08\x02\x02\x05\x12\x04\x87\
    \x01\r\x13\n\r\n\x05\x04\x08\x02\x02\x01\x12\x04\x87\x01\x14\x1a\n\r\n\
    \x05\x04\x08\x02\x02\x03\x12\x04\x87\x01\x1d\x1e\n~\n\x02\x04\t\x12\x06\
    \x8e\x01\0\x91\x01\x01\x1ap*\n\x20Response:\x20A\x20transaction\x20signa\
    ture\x20and\x20public\x20key\x20corresponding\x20to\x20the\x20address_n\
    \x20path\x20in\x20BinanceSignTx.\n\x20@end\n\n\x0b\n\x03\x04\t\x01\x12\
    \x04\x8e\x01\x08\x17\n\x0c\n\x04\x04\t\x02\0\x12\x04\x8f\x01\x08%\n\r\n\
    \x05\x04\t\x02\0\x04\x12\x04\x8f\x01\x08\x10\n\r\n\x05\x04\t\x02\0\x05\
    \x12\x04\x8f\x01\x11\x16\n\r\n\x05\x04\t\x02\0\x01\x12\x04\x8f\x01\x17\
    \x20\n\r\n\x05\x04\t\x02\0\x03\x12\x04\x8f\x01#$\n\x0c\n\x04\x04\t\x02\
    \x01\x12\x04\x90\x01\x04\"\n\r\n\x05\x04\t\x02\x01\x04\x12\x04\x90\x01\
    \x04\x0c\n\r\n\x05\x04\t\x02\x01\x05\x12\x04\x90\x01\r\x12\n\r\n\x05\x04\
    \t\x02\x01\x01\x12\x04\x90\x01\x13\x1d\n\r\n\x05\x04\t\x02\x01\x03\x12\
    \x04\x90\x01\x20!\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
