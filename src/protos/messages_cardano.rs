// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `messages-cardano.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct CardanoBlockchainPointerType {
    // message fields
    block_index: ::std::option::Option<u32>,
    tx_index: ::std::option::Option<u32>,
    certificate_index: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoBlockchainPointerType {
    fn default() -> &'a CardanoBlockchainPointerType {
        <CardanoBlockchainPointerType as ::protobuf::Message>::default_instance()
    }
}

impl CardanoBlockchainPointerType {
    pub fn new() -> CardanoBlockchainPointerType {
        ::std::default::Default::default()
    }

    // required uint32 block_index = 1;


    pub fn get_block_index(&self) -> u32 {
        self.block_index.unwrap_or(0)
    }
    pub fn clear_block_index(&mut self) {
        self.block_index = ::std::option::Option::None;
    }

    pub fn has_block_index(&self) -> bool {
        self.block_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block_index(&mut self, v: u32) {
        self.block_index = ::std::option::Option::Some(v);
    }

    // required uint32 tx_index = 2;


    pub fn get_tx_index(&self) -> u32 {
        self.tx_index.unwrap_or(0)
    }
    pub fn clear_tx_index(&mut self) {
        self.tx_index = ::std::option::Option::None;
    }

    pub fn has_tx_index(&self) -> bool {
        self.tx_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx_index(&mut self, v: u32) {
        self.tx_index = ::std::option::Option::Some(v);
    }

    // required uint32 certificate_index = 3;


    pub fn get_certificate_index(&self) -> u32 {
        self.certificate_index.unwrap_or(0)
    }
    pub fn clear_certificate_index(&mut self) {
        self.certificate_index = ::std::option::Option::None;
    }

    pub fn has_certificate_index(&self) -> bool {
        self.certificate_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_certificate_index(&mut self, v: u32) {
        self.certificate_index = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CardanoBlockchainPointerType {
    fn is_initialized(&self) -> bool {
        if self.block_index.is_none() {
            return false;
        }
        if self.tx_index.is_none() {
            return false;
        }
        if self.certificate_index.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.block_index = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.tx_index = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.certificate_index = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.block_index {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.tx_index {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.certificate_index {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.block_index {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.tx_index {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.certificate_index {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoBlockchainPointerType {
        CardanoBlockchainPointerType::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "block_index",
                |m: &CardanoBlockchainPointerType| { &m.block_index },
                |m: &mut CardanoBlockchainPointerType| { &mut m.block_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "tx_index",
                |m: &CardanoBlockchainPointerType| { &m.tx_index },
                |m: &mut CardanoBlockchainPointerType| { &mut m.tx_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "certificate_index",
                |m: &CardanoBlockchainPointerType| { &m.certificate_index },
                |m: &mut CardanoBlockchainPointerType| { &mut m.certificate_index },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoBlockchainPointerType>(
                "CardanoBlockchainPointerType",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoBlockchainPointerType {
        static instance: ::protobuf::rt::LazyV2<CardanoBlockchainPointerType> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoBlockchainPointerType::new)
    }
}

impl ::protobuf::Clear for CardanoBlockchainPointerType {
    fn clear(&mut self) {
        self.block_index = ::std::option::Option::None;
        self.tx_index = ::std::option::Option::None;
        self.certificate_index = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoBlockchainPointerType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoBlockchainPointerType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoNativeScript {
    // message fields
    field_type: ::std::option::Option<CardanoNativeScriptType>,
    pub scripts: ::protobuf::RepeatedField<CardanoNativeScript>,
    key_hash: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    pub key_path: ::std::vec::Vec<u32>,
    required_signatures_count: ::std::option::Option<u32>,
    invalid_before: ::std::option::Option<u64>,
    invalid_hereafter: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoNativeScript {
    fn default() -> &'a CardanoNativeScript {
        <CardanoNativeScript as ::protobuf::Message>::default_instance()
    }
}

impl CardanoNativeScript {
    pub fn new() -> CardanoNativeScript {
        ::std::default::Default::default()
    }

    // required .hw.trezor.messages.cardano.CardanoNativeScriptType type = 1;


    pub fn get_field_type(&self) -> CardanoNativeScriptType {
        self.field_type.unwrap_or(CardanoNativeScriptType::PUB_KEY)
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: CardanoNativeScriptType) {
        self.field_type = ::std::option::Option::Some(v);
    }

    // repeated .hw.trezor.messages.cardano.CardanoNativeScript scripts = 2;


    pub fn get_scripts(&self) -> &[CardanoNativeScript] {
        &self.scripts
    }
    pub fn clear_scripts(&mut self) {
        self.scripts.clear();
    }

    // Param is passed by value, moved
    pub fn set_scripts(&mut self, v: ::protobuf::RepeatedField<CardanoNativeScript>) {
        self.scripts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_scripts(&mut self) -> &mut ::protobuf::RepeatedField<CardanoNativeScript> {
        &mut self.scripts
    }

    // Take field
    pub fn take_scripts(&mut self) -> ::protobuf::RepeatedField<CardanoNativeScript> {
        ::std::mem::replace(&mut self.scripts, ::protobuf::RepeatedField::new())
    }

    // optional bytes key_hash = 3;


    pub fn get_key_hash(&self) -> &[u8] {
        match self.key_hash.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_key_hash(&mut self) {
        self.key_hash.clear();
    }

    pub fn has_key_hash(&self) -> bool {
        self.key_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.key_hash = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.key_hash.is_none() {
            self.key_hash.set_default();
        }
        self.key_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_key_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.key_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // repeated uint32 key_path = 4;


    pub fn get_key_path(&self) -> &[u32] {
        &self.key_path
    }
    pub fn clear_key_path(&mut self) {
        self.key_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_key_path(&mut self, v: ::std::vec::Vec<u32>) {
        self.key_path = v;
    }

    // Mutable pointer to the field.
    pub fn mut_key_path(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.key_path
    }

    // Take field
    pub fn take_key_path(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.key_path, ::std::vec::Vec::new())
    }

    // optional uint32 required_signatures_count = 5;


    pub fn get_required_signatures_count(&self) -> u32 {
        self.required_signatures_count.unwrap_or(0)
    }
    pub fn clear_required_signatures_count(&mut self) {
        self.required_signatures_count = ::std::option::Option::None;
    }

    pub fn has_required_signatures_count(&self) -> bool {
        self.required_signatures_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_required_signatures_count(&mut self, v: u32) {
        self.required_signatures_count = ::std::option::Option::Some(v);
    }

    // optional uint64 invalid_before = 6;


    pub fn get_invalid_before(&self) -> u64 {
        self.invalid_before.unwrap_or(0)
    }
    pub fn clear_invalid_before(&mut self) {
        self.invalid_before = ::std::option::Option::None;
    }

    pub fn has_invalid_before(&self) -> bool {
        self.invalid_before.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invalid_before(&mut self, v: u64) {
        self.invalid_before = ::std::option::Option::Some(v);
    }

    // optional uint64 invalid_hereafter = 7;


    pub fn get_invalid_hereafter(&self) -> u64 {
        self.invalid_hereafter.unwrap_or(0)
    }
    pub fn clear_invalid_hereafter(&mut self) {
        self.invalid_hereafter = ::std::option::Option::None;
    }

    pub fn has_invalid_hereafter(&self) -> bool {
        self.invalid_hereafter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invalid_hereafter(&mut self, v: u64) {
        self.invalid_hereafter = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CardanoNativeScript {
    fn is_initialized(&self) -> bool {
        if self.field_type.is_none() {
            return false;
        }
        for v in &self.scripts {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.scripts)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.key_hash)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.key_path)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.required_signatures_count = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.invalid_before = ::std::option::Option::Some(tmp);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.invalid_hereafter = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_type {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        for value in &self.scripts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.key_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        for value in &self.key_path {
            my_size += ::protobuf::rt::value_size(4, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.required_signatures_count {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.invalid_before {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.invalid_hereafter {
            my_size += ::protobuf::rt::value_size(7, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_type {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        for v in &self.scripts {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.key_hash.as_ref() {
            os.write_bytes(3, &v)?;
        }
        for v in &self.key_path {
            os.write_uint32(4, *v)?;
        };
        if let Some(v) = self.required_signatures_count {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.invalid_before {
            os.write_uint64(6, v)?;
        }
        if let Some(v) = self.invalid_hereafter {
            os.write_uint64(7, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoNativeScript {
        CardanoNativeScript::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CardanoNativeScriptType>>(
                "type",
                |m: &CardanoNativeScript| { &m.field_type },
                |m: &mut CardanoNativeScript| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CardanoNativeScript>>(
                "scripts",
                |m: &CardanoNativeScript| { &m.scripts },
                |m: &mut CardanoNativeScript| { &mut m.scripts },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "key_hash",
                |m: &CardanoNativeScript| { &m.key_hash },
                |m: &mut CardanoNativeScript| { &mut m.key_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "key_path",
                |m: &CardanoNativeScript| { &m.key_path },
                |m: &mut CardanoNativeScript| { &mut m.key_path },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "required_signatures_count",
                |m: &CardanoNativeScript| { &m.required_signatures_count },
                |m: &mut CardanoNativeScript| { &mut m.required_signatures_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "invalid_before",
                |m: &CardanoNativeScript| { &m.invalid_before },
                |m: &mut CardanoNativeScript| { &mut m.invalid_before },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "invalid_hereafter",
                |m: &CardanoNativeScript| { &m.invalid_hereafter },
                |m: &mut CardanoNativeScript| { &mut m.invalid_hereafter },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoNativeScript>(
                "CardanoNativeScript",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoNativeScript {
        static instance: ::protobuf::rt::LazyV2<CardanoNativeScript> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoNativeScript::new)
    }
}

impl ::protobuf::Clear for CardanoNativeScript {
    fn clear(&mut self) {
        self.field_type = ::std::option::Option::None;
        self.scripts.clear();
        self.key_hash.clear();
        self.key_path.clear();
        self.required_signatures_count = ::std::option::Option::None;
        self.invalid_before = ::std::option::Option::None;
        self.invalid_hereafter = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoNativeScript {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoNativeScript {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoGetNativeScriptHash {
    // message fields
    pub script: ::protobuf::SingularPtrField<CardanoNativeScript>,
    display_format: ::std::option::Option<CardanoNativeScriptHashDisplayFormat>,
    derivation_type: ::std::option::Option<CardanoDerivationType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoGetNativeScriptHash {
    fn default() -> &'a CardanoGetNativeScriptHash {
        <CardanoGetNativeScriptHash as ::protobuf::Message>::default_instance()
    }
}

impl CardanoGetNativeScriptHash {
    pub fn new() -> CardanoGetNativeScriptHash {
        ::std::default::Default::default()
    }

    // required .hw.trezor.messages.cardano.CardanoNativeScript script = 1;


    pub fn get_script(&self) -> &CardanoNativeScript {
        self.script.as_ref().unwrap_or_else(|| <CardanoNativeScript as ::protobuf::Message>::default_instance())
    }
    pub fn clear_script(&mut self) {
        self.script.clear();
    }

    pub fn has_script(&self) -> bool {
        self.script.is_some()
    }

    // Param is passed by value, moved
    pub fn set_script(&mut self, v: CardanoNativeScript) {
        self.script = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_script(&mut self) -> &mut CardanoNativeScript {
        if self.script.is_none() {
            self.script.set_default();
        }
        self.script.as_mut().unwrap()
    }

    // Take field
    pub fn take_script(&mut self) -> CardanoNativeScript {
        self.script.take().unwrap_or_else(|| CardanoNativeScript::new())
    }

    // required .hw.trezor.messages.cardano.CardanoNativeScriptHashDisplayFormat display_format = 2;


    pub fn get_display_format(&self) -> CardanoNativeScriptHashDisplayFormat {
        self.display_format.unwrap_or(CardanoNativeScriptHashDisplayFormat::HIDE)
    }
    pub fn clear_display_format(&mut self) {
        self.display_format = ::std::option::Option::None;
    }

    pub fn has_display_format(&self) -> bool {
        self.display_format.is_some()
    }

    // Param is passed by value, moved
    pub fn set_display_format(&mut self, v: CardanoNativeScriptHashDisplayFormat) {
        self.display_format = ::std::option::Option::Some(v);
    }

    // required .hw.trezor.messages.cardano.CardanoDerivationType derivation_type = 3;


    pub fn get_derivation_type(&self) -> CardanoDerivationType {
        self.derivation_type.unwrap_or(CardanoDerivationType::LEDGER)
    }
    pub fn clear_derivation_type(&mut self) {
        self.derivation_type = ::std::option::Option::None;
    }

    pub fn has_derivation_type(&self) -> bool {
        self.derivation_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_derivation_type(&mut self, v: CardanoDerivationType) {
        self.derivation_type = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CardanoGetNativeScriptHash {
    fn is_initialized(&self) -> bool {
        if self.script.is_none() {
            return false;
        }
        if self.display_format.is_none() {
            return false;
        }
        if self.derivation_type.is_none() {
            return false;
        }
        for v in &self.script {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.script)?;
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.display_format, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.derivation_type, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.script.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.display_format {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        if let Some(v) = self.derivation_type {
            my_size += ::protobuf::rt::enum_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.script.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.display_format {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(v) = self.derivation_type {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&v))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoGetNativeScriptHash {
        CardanoGetNativeScriptHash::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CardanoNativeScript>>(
                "script",
                |m: &CardanoGetNativeScriptHash| { &m.script },
                |m: &mut CardanoGetNativeScriptHash| { &mut m.script },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CardanoNativeScriptHashDisplayFormat>>(
                "display_format",
                |m: &CardanoGetNativeScriptHash| { &m.display_format },
                |m: &mut CardanoGetNativeScriptHash| { &mut m.display_format },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CardanoDerivationType>>(
                "derivation_type",
                |m: &CardanoGetNativeScriptHash| { &m.derivation_type },
                |m: &mut CardanoGetNativeScriptHash| { &mut m.derivation_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoGetNativeScriptHash>(
                "CardanoGetNativeScriptHash",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoGetNativeScriptHash {
        static instance: ::protobuf::rt::LazyV2<CardanoGetNativeScriptHash> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoGetNativeScriptHash::new)
    }
}

impl ::protobuf::Clear for CardanoGetNativeScriptHash {
    fn clear(&mut self) {
        self.script.clear();
        self.display_format = ::std::option::Option::None;
        self.derivation_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoGetNativeScriptHash {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoGetNativeScriptHash {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoNativeScriptHash {
    // message fields
    script_hash: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoNativeScriptHash {
    fn default() -> &'a CardanoNativeScriptHash {
        <CardanoNativeScriptHash as ::protobuf::Message>::default_instance()
    }
}

impl CardanoNativeScriptHash {
    pub fn new() -> CardanoNativeScriptHash {
        ::std::default::Default::default()
    }

    // required bytes script_hash = 1;


    pub fn get_script_hash(&self) -> &[u8] {
        match self.script_hash.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_script_hash(&mut self) {
        self.script_hash.clear();
    }

    pub fn has_script_hash(&self) -> bool {
        self.script_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_script_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.script_hash = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_script_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.script_hash.is_none() {
            self.script_hash.set_default();
        }
        self.script_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_script_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.script_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CardanoNativeScriptHash {
    fn is_initialized(&self) -> bool {
        if self.script_hash.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.script_hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.script_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.script_hash.as_ref() {
            os.write_bytes(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoNativeScriptHash {
        CardanoNativeScriptHash::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "script_hash",
                |m: &CardanoNativeScriptHash| { &m.script_hash },
                |m: &mut CardanoNativeScriptHash| { &mut m.script_hash },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoNativeScriptHash>(
                "CardanoNativeScriptHash",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoNativeScriptHash {
        static instance: ::protobuf::rt::LazyV2<CardanoNativeScriptHash> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoNativeScriptHash::new)
    }
}

impl ::protobuf::Clear for CardanoNativeScriptHash {
    fn clear(&mut self) {
        self.script_hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoNativeScriptHash {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoNativeScriptHash {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoAddressParametersType {
    // message fields
    address_type: ::std::option::Option<CardanoAddressType>,
    pub address_n: ::std::vec::Vec<u32>,
    pub address_n_staking: ::std::vec::Vec<u32>,
    staking_key_hash: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    pub certificate_pointer: ::protobuf::SingularPtrField<CardanoBlockchainPointerType>,
    script_payment_hash: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    script_staking_hash: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoAddressParametersType {
    fn default() -> &'a CardanoAddressParametersType {
        <CardanoAddressParametersType as ::protobuf::Message>::default_instance()
    }
}

impl CardanoAddressParametersType {
    pub fn new() -> CardanoAddressParametersType {
        ::std::default::Default::default()
    }

    // required .hw.trezor.messages.cardano.CardanoAddressType address_type = 1;


    pub fn get_address_type(&self) -> CardanoAddressType {
        self.address_type.unwrap_or(CardanoAddressType::BASE)
    }
    pub fn clear_address_type(&mut self) {
        self.address_type = ::std::option::Option::None;
    }

    pub fn has_address_type(&self) -> bool {
        self.address_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address_type(&mut self, v: CardanoAddressType) {
        self.address_type = ::std::option::Option::Some(v);
    }

    // repeated uint32 address_n = 2;


    pub fn get_address_n(&self) -> &[u32] {
        &self.address_n
    }
    pub fn clear_address_n(&mut self) {
        self.address_n.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_n(&mut self, v: ::std::vec::Vec<u32>) {
        self.address_n = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_n(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.address_n
    }

    // Take field
    pub fn take_address_n(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.address_n, ::std::vec::Vec::new())
    }

    // repeated uint32 address_n_staking = 3;


    pub fn get_address_n_staking(&self) -> &[u32] {
        &self.address_n_staking
    }
    pub fn clear_address_n_staking(&mut self) {
        self.address_n_staking.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_n_staking(&mut self, v: ::std::vec::Vec<u32>) {
        self.address_n_staking = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_n_staking(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.address_n_staking
    }

    // Take field
    pub fn take_address_n_staking(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.address_n_staking, ::std::vec::Vec::new())
    }

    // optional bytes staking_key_hash = 4;


    pub fn get_staking_key_hash(&self) -> &[u8] {
        match self.staking_key_hash.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_staking_key_hash(&mut self) {
        self.staking_key_hash.clear();
    }

    pub fn has_staking_key_hash(&self) -> bool {
        self.staking_key_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_staking_key_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.staking_key_hash = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_staking_key_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.staking_key_hash.is_none() {
            self.staking_key_hash.set_default();
        }
        self.staking_key_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_staking_key_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.staking_key_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional .hw.trezor.messages.cardano.CardanoBlockchainPointerType certificate_pointer = 5;


    pub fn get_certificate_pointer(&self) -> &CardanoBlockchainPointerType {
        self.certificate_pointer.as_ref().unwrap_or_else(|| <CardanoBlockchainPointerType as ::protobuf::Message>::default_instance())
    }
    pub fn clear_certificate_pointer(&mut self) {
        self.certificate_pointer.clear();
    }

    pub fn has_certificate_pointer(&self) -> bool {
        self.certificate_pointer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_certificate_pointer(&mut self, v: CardanoBlockchainPointerType) {
        self.certificate_pointer = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_certificate_pointer(&mut self) -> &mut CardanoBlockchainPointerType {
        if self.certificate_pointer.is_none() {
            self.certificate_pointer.set_default();
        }
        self.certificate_pointer.as_mut().unwrap()
    }

    // Take field
    pub fn take_certificate_pointer(&mut self) -> CardanoBlockchainPointerType {
        self.certificate_pointer.take().unwrap_or_else(|| CardanoBlockchainPointerType::new())
    }

    // optional bytes script_payment_hash = 6;


    pub fn get_script_payment_hash(&self) -> &[u8] {
        match self.script_payment_hash.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_script_payment_hash(&mut self) {
        self.script_payment_hash.clear();
    }

    pub fn has_script_payment_hash(&self) -> bool {
        self.script_payment_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_script_payment_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.script_payment_hash = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_script_payment_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.script_payment_hash.is_none() {
            self.script_payment_hash.set_default();
        }
        self.script_payment_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_script_payment_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.script_payment_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes script_staking_hash = 7;


    pub fn get_script_staking_hash(&self) -> &[u8] {
        match self.script_staking_hash.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_script_staking_hash(&mut self) {
        self.script_staking_hash.clear();
    }

    pub fn has_script_staking_hash(&self) -> bool {
        self.script_staking_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_script_staking_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.script_staking_hash = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_script_staking_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.script_staking_hash.is_none() {
            self.script_staking_hash.set_default();
        }
        self.script_staking_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_script_staking_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.script_staking_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CardanoAddressParametersType {
    fn is_initialized(&self) -> bool {
        if self.address_type.is_none() {
            return false;
        }
        for v in &self.certificate_pointer {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.address_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.address_n)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.address_n_staking)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.staking_key_hash)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.certificate_pointer)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.script_payment_hash)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.script_staking_hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.address_type {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        for value in &self.address_n {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.address_n_staking {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(ref v) = self.staking_key_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        if let Some(ref v) = self.certificate_pointer.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.script_payment_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(6, &v);
        }
        if let Some(ref v) = self.script_staking_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(7, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.address_type {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        for v in &self.address_n {
            os.write_uint32(2, *v)?;
        };
        for v in &self.address_n_staking {
            os.write_uint32(3, *v)?;
        };
        if let Some(ref v) = self.staking_key_hash.as_ref() {
            os.write_bytes(4, &v)?;
        }
        if let Some(ref v) = self.certificate_pointer.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.script_payment_hash.as_ref() {
            os.write_bytes(6, &v)?;
        }
        if let Some(ref v) = self.script_staking_hash.as_ref() {
            os.write_bytes(7, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoAddressParametersType {
        CardanoAddressParametersType::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CardanoAddressType>>(
                "address_type",
                |m: &CardanoAddressParametersType| { &m.address_type },
                |m: &mut CardanoAddressParametersType| { &mut m.address_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "address_n",
                |m: &CardanoAddressParametersType| { &m.address_n },
                |m: &mut CardanoAddressParametersType| { &mut m.address_n },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "address_n_staking",
                |m: &CardanoAddressParametersType| { &m.address_n_staking },
                |m: &mut CardanoAddressParametersType| { &mut m.address_n_staking },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "staking_key_hash",
                |m: &CardanoAddressParametersType| { &m.staking_key_hash },
                |m: &mut CardanoAddressParametersType| { &mut m.staking_key_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CardanoBlockchainPointerType>>(
                "certificate_pointer",
                |m: &CardanoAddressParametersType| { &m.certificate_pointer },
                |m: &mut CardanoAddressParametersType| { &mut m.certificate_pointer },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "script_payment_hash",
                |m: &CardanoAddressParametersType| { &m.script_payment_hash },
                |m: &mut CardanoAddressParametersType| { &mut m.script_payment_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "script_staking_hash",
                |m: &CardanoAddressParametersType| { &m.script_staking_hash },
                |m: &mut CardanoAddressParametersType| { &mut m.script_staking_hash },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoAddressParametersType>(
                "CardanoAddressParametersType",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoAddressParametersType {
        static instance: ::protobuf::rt::LazyV2<CardanoAddressParametersType> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoAddressParametersType::new)
    }
}

impl ::protobuf::Clear for CardanoAddressParametersType {
    fn clear(&mut self) {
        self.address_type = ::std::option::Option::None;
        self.address_n.clear();
        self.address_n_staking.clear();
        self.staking_key_hash.clear();
        self.certificate_pointer.clear();
        self.script_payment_hash.clear();
        self.script_staking_hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoAddressParametersType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoAddressParametersType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoGetAddress {
    // message fields
    show_display: ::std::option::Option<bool>,
    protocol_magic: ::std::option::Option<u32>,
    network_id: ::std::option::Option<u32>,
    pub address_parameters: ::protobuf::SingularPtrField<CardanoAddressParametersType>,
    derivation_type: ::std::option::Option<CardanoDerivationType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoGetAddress {
    fn default() -> &'a CardanoGetAddress {
        <CardanoGetAddress as ::protobuf::Message>::default_instance()
    }
}

impl CardanoGetAddress {
    pub fn new() -> CardanoGetAddress {
        ::std::default::Default::default()
    }

    // optional bool show_display = 2;


    pub fn get_show_display(&self) -> bool {
        self.show_display.unwrap_or(false)
    }
    pub fn clear_show_display(&mut self) {
        self.show_display = ::std::option::Option::None;
    }

    pub fn has_show_display(&self) -> bool {
        self.show_display.is_some()
    }

    // Param is passed by value, moved
    pub fn set_show_display(&mut self, v: bool) {
        self.show_display = ::std::option::Option::Some(v);
    }

    // required uint32 protocol_magic = 3;


    pub fn get_protocol_magic(&self) -> u32 {
        self.protocol_magic.unwrap_or(0)
    }
    pub fn clear_protocol_magic(&mut self) {
        self.protocol_magic = ::std::option::Option::None;
    }

    pub fn has_protocol_magic(&self) -> bool {
        self.protocol_magic.is_some()
    }

    // Param is passed by value, moved
    pub fn set_protocol_magic(&mut self, v: u32) {
        self.protocol_magic = ::std::option::Option::Some(v);
    }

    // required uint32 network_id = 4;


    pub fn get_network_id(&self) -> u32 {
        self.network_id.unwrap_or(0)
    }
    pub fn clear_network_id(&mut self) {
        self.network_id = ::std::option::Option::None;
    }

    pub fn has_network_id(&self) -> bool {
        self.network_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_network_id(&mut self, v: u32) {
        self.network_id = ::std::option::Option::Some(v);
    }

    // required .hw.trezor.messages.cardano.CardanoAddressParametersType address_parameters = 5;


    pub fn get_address_parameters(&self) -> &CardanoAddressParametersType {
        self.address_parameters.as_ref().unwrap_or_else(|| <CardanoAddressParametersType as ::protobuf::Message>::default_instance())
    }
    pub fn clear_address_parameters(&mut self) {
        self.address_parameters.clear();
    }

    pub fn has_address_parameters(&self) -> bool {
        self.address_parameters.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address_parameters(&mut self, v: CardanoAddressParametersType) {
        self.address_parameters = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address_parameters(&mut self) -> &mut CardanoAddressParametersType {
        if self.address_parameters.is_none() {
            self.address_parameters.set_default();
        }
        self.address_parameters.as_mut().unwrap()
    }

    // Take field
    pub fn take_address_parameters(&mut self) -> CardanoAddressParametersType {
        self.address_parameters.take().unwrap_or_else(|| CardanoAddressParametersType::new())
    }

    // required .hw.trezor.messages.cardano.CardanoDerivationType derivation_type = 6;


    pub fn get_derivation_type(&self) -> CardanoDerivationType {
        self.derivation_type.unwrap_or(CardanoDerivationType::LEDGER)
    }
    pub fn clear_derivation_type(&mut self) {
        self.derivation_type = ::std::option::Option::None;
    }

    pub fn has_derivation_type(&self) -> bool {
        self.derivation_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_derivation_type(&mut self, v: CardanoDerivationType) {
        self.derivation_type = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CardanoGetAddress {
    fn is_initialized(&self) -> bool {
        if self.protocol_magic.is_none() {
            return false;
        }
        if self.network_id.is_none() {
            return false;
        }
        if self.address_parameters.is_none() {
            return false;
        }
        if self.derivation_type.is_none() {
            return false;
        }
        for v in &self.address_parameters {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.show_display = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.protocol_magic = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.network_id = ::std::option::Option::Some(tmp);
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.address_parameters)?;
                },
                6 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.derivation_type, 6, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.show_display {
            my_size += 2;
        }
        if let Some(v) = self.protocol_magic {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.network_id {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.address_parameters.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.derivation_type {
            my_size += ::protobuf::rt::enum_size(6, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.show_display {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.protocol_magic {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.network_id {
            os.write_uint32(4, v)?;
        }
        if let Some(ref v) = self.address_parameters.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.derivation_type {
            os.write_enum(6, ::protobuf::ProtobufEnum::value(&v))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoGetAddress {
        CardanoGetAddress::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "show_display",
                |m: &CardanoGetAddress| { &m.show_display },
                |m: &mut CardanoGetAddress| { &mut m.show_display },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "protocol_magic",
                |m: &CardanoGetAddress| { &m.protocol_magic },
                |m: &mut CardanoGetAddress| { &mut m.protocol_magic },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "network_id",
                |m: &CardanoGetAddress| { &m.network_id },
                |m: &mut CardanoGetAddress| { &mut m.network_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CardanoAddressParametersType>>(
                "address_parameters",
                |m: &CardanoGetAddress| { &m.address_parameters },
                |m: &mut CardanoGetAddress| { &mut m.address_parameters },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CardanoDerivationType>>(
                "derivation_type",
                |m: &CardanoGetAddress| { &m.derivation_type },
                |m: &mut CardanoGetAddress| { &mut m.derivation_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoGetAddress>(
                "CardanoGetAddress",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoGetAddress {
        static instance: ::protobuf::rt::LazyV2<CardanoGetAddress> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoGetAddress::new)
    }
}

impl ::protobuf::Clear for CardanoGetAddress {
    fn clear(&mut self) {
        self.show_display = ::std::option::Option::None;
        self.protocol_magic = ::std::option::Option::None;
        self.network_id = ::std::option::Option::None;
        self.address_parameters.clear();
        self.derivation_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoGetAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoGetAddress {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoAddress {
    // message fields
    address: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoAddress {
    fn default() -> &'a CardanoAddress {
        <CardanoAddress as ::protobuf::Message>::default_instance()
    }
}

impl CardanoAddress {
    pub fn new() -> CardanoAddress {
        ::std::default::Default::default()
    }

    // required string address = 1;


    pub fn get_address(&self) -> &str {
        match self.address.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        if self.address.is_none() {
            self.address.set_default();
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        self.address.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CardanoAddress {
    fn is_initialized(&self) -> bool {
        if self.address.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.address.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.address.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoAddress {
        CardanoAddress::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &CardanoAddress| { &m.address },
                |m: &mut CardanoAddress| { &mut m.address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoAddress>(
                "CardanoAddress",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoAddress {
        static instance: ::protobuf::rt::LazyV2<CardanoAddress> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoAddress::new)
    }
}

impl ::protobuf::Clear for CardanoAddress {
    fn clear(&mut self) {
        self.address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoAddress {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoGetPublicKey {
    // message fields
    pub address_n: ::std::vec::Vec<u32>,
    show_display: ::std::option::Option<bool>,
    derivation_type: ::std::option::Option<CardanoDerivationType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoGetPublicKey {
    fn default() -> &'a CardanoGetPublicKey {
        <CardanoGetPublicKey as ::protobuf::Message>::default_instance()
    }
}

impl CardanoGetPublicKey {
    pub fn new() -> CardanoGetPublicKey {
        ::std::default::Default::default()
    }

    // repeated uint32 address_n = 1;


    pub fn get_address_n(&self) -> &[u32] {
        &self.address_n
    }
    pub fn clear_address_n(&mut self) {
        self.address_n.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_n(&mut self, v: ::std::vec::Vec<u32>) {
        self.address_n = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_n(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.address_n
    }

    // Take field
    pub fn take_address_n(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.address_n, ::std::vec::Vec::new())
    }

    // optional bool show_display = 2;


    pub fn get_show_display(&self) -> bool {
        self.show_display.unwrap_or(false)
    }
    pub fn clear_show_display(&mut self) {
        self.show_display = ::std::option::Option::None;
    }

    pub fn has_show_display(&self) -> bool {
        self.show_display.is_some()
    }

    // Param is passed by value, moved
    pub fn set_show_display(&mut self, v: bool) {
        self.show_display = ::std::option::Option::Some(v);
    }

    // required .hw.trezor.messages.cardano.CardanoDerivationType derivation_type = 3;


    pub fn get_derivation_type(&self) -> CardanoDerivationType {
        self.derivation_type.unwrap_or(CardanoDerivationType::LEDGER)
    }
    pub fn clear_derivation_type(&mut self) {
        self.derivation_type = ::std::option::Option::None;
    }

    pub fn has_derivation_type(&self) -> bool {
        self.derivation_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_derivation_type(&mut self, v: CardanoDerivationType) {
        self.derivation_type = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CardanoGetPublicKey {
    fn is_initialized(&self) -> bool {
        if self.derivation_type.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.address_n)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.show_display = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.derivation_type, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.show_display {
            my_size += 2;
        }
        if let Some(v) = self.derivation_type {
            my_size += ::protobuf::rt::enum_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.show_display {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.derivation_type {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&v))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoGetPublicKey {
        CardanoGetPublicKey::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "address_n",
                |m: &CardanoGetPublicKey| { &m.address_n },
                |m: &mut CardanoGetPublicKey| { &mut m.address_n },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "show_display",
                |m: &CardanoGetPublicKey| { &m.show_display },
                |m: &mut CardanoGetPublicKey| { &mut m.show_display },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CardanoDerivationType>>(
                "derivation_type",
                |m: &CardanoGetPublicKey| { &m.derivation_type },
                |m: &mut CardanoGetPublicKey| { &mut m.derivation_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoGetPublicKey>(
                "CardanoGetPublicKey",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoGetPublicKey {
        static instance: ::protobuf::rt::LazyV2<CardanoGetPublicKey> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoGetPublicKey::new)
    }
}

impl ::protobuf::Clear for CardanoGetPublicKey {
    fn clear(&mut self) {
        self.address_n.clear();
        self.show_display = ::std::option::Option::None;
        self.derivation_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoGetPublicKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoGetPublicKey {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoPublicKey {
    // message fields
    xpub: ::protobuf::SingularField<::std::string::String>,
    pub node: ::protobuf::SingularPtrField<super::messages_common::HDNodeType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoPublicKey {
    fn default() -> &'a CardanoPublicKey {
        <CardanoPublicKey as ::protobuf::Message>::default_instance()
    }
}

impl CardanoPublicKey {
    pub fn new() -> CardanoPublicKey {
        ::std::default::Default::default()
    }

    // required string xpub = 1;


    pub fn get_xpub(&self) -> &str {
        match self.xpub.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_xpub(&mut self) {
        self.xpub.clear();
    }

    pub fn has_xpub(&self) -> bool {
        self.xpub.is_some()
    }

    // Param is passed by value, moved
    pub fn set_xpub(&mut self, v: ::std::string::String) {
        self.xpub = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_xpub(&mut self) -> &mut ::std::string::String {
        if self.xpub.is_none() {
            self.xpub.set_default();
        }
        self.xpub.as_mut().unwrap()
    }

    // Take field
    pub fn take_xpub(&mut self) -> ::std::string::String {
        self.xpub.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required .hw.trezor.messages.common.HDNodeType node = 2;


    pub fn get_node(&self) -> &super::messages_common::HDNodeType {
        self.node.as_ref().unwrap_or_else(|| <super::messages_common::HDNodeType as ::protobuf::Message>::default_instance())
    }
    pub fn clear_node(&mut self) {
        self.node.clear();
    }

    pub fn has_node(&self) -> bool {
        self.node.is_some()
    }

    // Param is passed by value, moved
    pub fn set_node(&mut self, v: super::messages_common::HDNodeType) {
        self.node = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node(&mut self) -> &mut super::messages_common::HDNodeType {
        if self.node.is_none() {
            self.node.set_default();
        }
        self.node.as_mut().unwrap()
    }

    // Take field
    pub fn take_node(&mut self) -> super::messages_common::HDNodeType {
        self.node.take().unwrap_or_else(|| super::messages_common::HDNodeType::new())
    }
}

impl ::protobuf::Message for CardanoPublicKey {
    fn is_initialized(&self) -> bool {
        if self.xpub.is_none() {
            return false;
        }
        if self.node.is_none() {
            return false;
        }
        for v in &self.node {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.xpub)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.node)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.xpub.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.node.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.xpub.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.node.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoPublicKey {
        CardanoPublicKey::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "xpub",
                |m: &CardanoPublicKey| { &m.xpub },
                |m: &mut CardanoPublicKey| { &mut m.xpub },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::messages_common::HDNodeType>>(
                "node",
                |m: &CardanoPublicKey| { &m.node },
                |m: &mut CardanoPublicKey| { &mut m.node },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoPublicKey>(
                "CardanoPublicKey",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoPublicKey {
        static instance: ::protobuf::rt::LazyV2<CardanoPublicKey> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoPublicKey::new)
    }
}

impl ::protobuf::Clear for CardanoPublicKey {
    fn clear(&mut self) {
        self.xpub.clear();
        self.node.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoPublicKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoPublicKey {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoSignTxInit {
    // message fields
    signing_mode: ::std::option::Option<CardanoTxSigningMode>,
    protocol_magic: ::std::option::Option<u32>,
    network_id: ::std::option::Option<u32>,
    inputs_count: ::std::option::Option<u32>,
    outputs_count: ::std::option::Option<u32>,
    fee: ::std::option::Option<u64>,
    ttl: ::std::option::Option<u64>,
    certificates_count: ::std::option::Option<u32>,
    withdrawals_count: ::std::option::Option<u32>,
    has_auxiliary_data: ::std::option::Option<bool>,
    validity_interval_start: ::std::option::Option<u64>,
    witness_requests_count: ::std::option::Option<u32>,
    minting_asset_groups_count: ::std::option::Option<u32>,
    derivation_type: ::std::option::Option<CardanoDerivationType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoSignTxInit {
    fn default() -> &'a CardanoSignTxInit {
        <CardanoSignTxInit as ::protobuf::Message>::default_instance()
    }
}

impl CardanoSignTxInit {
    pub fn new() -> CardanoSignTxInit {
        ::std::default::Default::default()
    }

    // required .hw.trezor.messages.cardano.CardanoTxSigningMode signing_mode = 1;


    pub fn get_signing_mode(&self) -> CardanoTxSigningMode {
        self.signing_mode.unwrap_or(CardanoTxSigningMode::ORDINARY_TRANSACTION)
    }
    pub fn clear_signing_mode(&mut self) {
        self.signing_mode = ::std::option::Option::None;
    }

    pub fn has_signing_mode(&self) -> bool {
        self.signing_mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signing_mode(&mut self, v: CardanoTxSigningMode) {
        self.signing_mode = ::std::option::Option::Some(v);
    }

    // required uint32 protocol_magic = 2;


    pub fn get_protocol_magic(&self) -> u32 {
        self.protocol_magic.unwrap_or(0)
    }
    pub fn clear_protocol_magic(&mut self) {
        self.protocol_magic = ::std::option::Option::None;
    }

    pub fn has_protocol_magic(&self) -> bool {
        self.protocol_magic.is_some()
    }

    // Param is passed by value, moved
    pub fn set_protocol_magic(&mut self, v: u32) {
        self.protocol_magic = ::std::option::Option::Some(v);
    }

    // required uint32 network_id = 3;


    pub fn get_network_id(&self) -> u32 {
        self.network_id.unwrap_or(0)
    }
    pub fn clear_network_id(&mut self) {
        self.network_id = ::std::option::Option::None;
    }

    pub fn has_network_id(&self) -> bool {
        self.network_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_network_id(&mut self, v: u32) {
        self.network_id = ::std::option::Option::Some(v);
    }

    // required uint32 inputs_count = 4;


    pub fn get_inputs_count(&self) -> u32 {
        self.inputs_count.unwrap_or(0)
    }
    pub fn clear_inputs_count(&mut self) {
        self.inputs_count = ::std::option::Option::None;
    }

    pub fn has_inputs_count(&self) -> bool {
        self.inputs_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_inputs_count(&mut self, v: u32) {
        self.inputs_count = ::std::option::Option::Some(v);
    }

    // required uint32 outputs_count = 5;


    pub fn get_outputs_count(&self) -> u32 {
        self.outputs_count.unwrap_or(0)
    }
    pub fn clear_outputs_count(&mut self) {
        self.outputs_count = ::std::option::Option::None;
    }

    pub fn has_outputs_count(&self) -> bool {
        self.outputs_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_outputs_count(&mut self, v: u32) {
        self.outputs_count = ::std::option::Option::Some(v);
    }

    // required uint64 fee = 6;


    pub fn get_fee(&self) -> u64 {
        self.fee.unwrap_or(0)
    }
    pub fn clear_fee(&mut self) {
        self.fee = ::std::option::Option::None;
    }

    pub fn has_fee(&self) -> bool {
        self.fee.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fee(&mut self, v: u64) {
        self.fee = ::std::option::Option::Some(v);
    }

    // optional uint64 ttl = 7;


    pub fn get_ttl(&self) -> u64 {
        self.ttl.unwrap_or(0)
    }
    pub fn clear_ttl(&mut self) {
        self.ttl = ::std::option::Option::None;
    }

    pub fn has_ttl(&self) -> bool {
        self.ttl.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ttl(&mut self, v: u64) {
        self.ttl = ::std::option::Option::Some(v);
    }

    // required uint32 certificates_count = 8;


    pub fn get_certificates_count(&self) -> u32 {
        self.certificates_count.unwrap_or(0)
    }
    pub fn clear_certificates_count(&mut self) {
        self.certificates_count = ::std::option::Option::None;
    }

    pub fn has_certificates_count(&self) -> bool {
        self.certificates_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_certificates_count(&mut self, v: u32) {
        self.certificates_count = ::std::option::Option::Some(v);
    }

    // required uint32 withdrawals_count = 9;


    pub fn get_withdrawals_count(&self) -> u32 {
        self.withdrawals_count.unwrap_or(0)
    }
    pub fn clear_withdrawals_count(&mut self) {
        self.withdrawals_count = ::std::option::Option::None;
    }

    pub fn has_withdrawals_count(&self) -> bool {
        self.withdrawals_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_withdrawals_count(&mut self, v: u32) {
        self.withdrawals_count = ::std::option::Option::Some(v);
    }

    // required bool has_auxiliary_data = 10;


    pub fn get_has_auxiliary_data(&self) -> bool {
        self.has_auxiliary_data.unwrap_or(false)
    }
    pub fn clear_has_auxiliary_data(&mut self) {
        self.has_auxiliary_data = ::std::option::Option::None;
    }

    pub fn has_has_auxiliary_data(&self) -> bool {
        self.has_auxiliary_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_has_auxiliary_data(&mut self, v: bool) {
        self.has_auxiliary_data = ::std::option::Option::Some(v);
    }

    // optional uint64 validity_interval_start = 11;


    pub fn get_validity_interval_start(&self) -> u64 {
        self.validity_interval_start.unwrap_or(0)
    }
    pub fn clear_validity_interval_start(&mut self) {
        self.validity_interval_start = ::std::option::Option::None;
    }

    pub fn has_validity_interval_start(&self) -> bool {
        self.validity_interval_start.is_some()
    }

    // Param is passed by value, moved
    pub fn set_validity_interval_start(&mut self, v: u64) {
        self.validity_interval_start = ::std::option::Option::Some(v);
    }

    // required uint32 witness_requests_count = 12;


    pub fn get_witness_requests_count(&self) -> u32 {
        self.witness_requests_count.unwrap_or(0)
    }
    pub fn clear_witness_requests_count(&mut self) {
        self.witness_requests_count = ::std::option::Option::None;
    }

    pub fn has_witness_requests_count(&self) -> bool {
        self.witness_requests_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_witness_requests_count(&mut self, v: u32) {
        self.witness_requests_count = ::std::option::Option::Some(v);
    }

    // required uint32 minting_asset_groups_count = 13;


    pub fn get_minting_asset_groups_count(&self) -> u32 {
        self.minting_asset_groups_count.unwrap_or(0)
    }
    pub fn clear_minting_asset_groups_count(&mut self) {
        self.minting_asset_groups_count = ::std::option::Option::None;
    }

    pub fn has_minting_asset_groups_count(&self) -> bool {
        self.minting_asset_groups_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_minting_asset_groups_count(&mut self, v: u32) {
        self.minting_asset_groups_count = ::std::option::Option::Some(v);
    }

    // required .hw.trezor.messages.cardano.CardanoDerivationType derivation_type = 14;


    pub fn get_derivation_type(&self) -> CardanoDerivationType {
        self.derivation_type.unwrap_or(CardanoDerivationType::LEDGER)
    }
    pub fn clear_derivation_type(&mut self) {
        self.derivation_type = ::std::option::Option::None;
    }

    pub fn has_derivation_type(&self) -> bool {
        self.derivation_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_derivation_type(&mut self, v: CardanoDerivationType) {
        self.derivation_type = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CardanoSignTxInit {
    fn is_initialized(&self) -> bool {
        if self.signing_mode.is_none() {
            return false;
        }
        if self.protocol_magic.is_none() {
            return false;
        }
        if self.network_id.is_none() {
            return false;
        }
        if self.inputs_count.is_none() {
            return false;
        }
        if self.outputs_count.is_none() {
            return false;
        }
        if self.fee.is_none() {
            return false;
        }
        if self.certificates_count.is_none() {
            return false;
        }
        if self.withdrawals_count.is_none() {
            return false;
        }
        if self.has_auxiliary_data.is_none() {
            return false;
        }
        if self.witness_requests_count.is_none() {
            return false;
        }
        if self.minting_asset_groups_count.is_none() {
            return false;
        }
        if self.derivation_type.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.signing_mode, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.protocol_magic = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.network_id = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.inputs_count = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.outputs_count = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.fee = ::std::option::Option::Some(tmp);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.ttl = ::std::option::Option::Some(tmp);
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.certificates_count = ::std::option::Option::Some(tmp);
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.withdrawals_count = ::std::option::Option::Some(tmp);
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.has_auxiliary_data = ::std::option::Option::Some(tmp);
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.validity_interval_start = ::std::option::Option::Some(tmp);
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.witness_requests_count = ::std::option::Option::Some(tmp);
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.minting_asset_groups_count = ::std::option::Option::Some(tmp);
                },
                14 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.derivation_type, 14, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.signing_mode {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(v) = self.protocol_magic {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.network_id {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.inputs_count {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.outputs_count {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.fee {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.ttl {
            my_size += ::protobuf::rt::value_size(7, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.certificates_count {
            my_size += ::protobuf::rt::value_size(8, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.withdrawals_count {
            my_size += ::protobuf::rt::value_size(9, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.has_auxiliary_data {
            my_size += 2;
        }
        if let Some(v) = self.validity_interval_start {
            my_size += ::protobuf::rt::value_size(11, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.witness_requests_count {
            my_size += ::protobuf::rt::value_size(12, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.minting_asset_groups_count {
            my_size += ::protobuf::rt::value_size(13, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.derivation_type {
            my_size += ::protobuf::rt::enum_size(14, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.signing_mode {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(v) = self.protocol_magic {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.network_id {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.inputs_count {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.outputs_count {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.fee {
            os.write_uint64(6, v)?;
        }
        if let Some(v) = self.ttl {
            os.write_uint64(7, v)?;
        }
        if let Some(v) = self.certificates_count {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.withdrawals_count {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.has_auxiliary_data {
            os.write_bool(10, v)?;
        }
        if let Some(v) = self.validity_interval_start {
            os.write_uint64(11, v)?;
        }
        if let Some(v) = self.witness_requests_count {
            os.write_uint32(12, v)?;
        }
        if let Some(v) = self.minting_asset_groups_count {
            os.write_uint32(13, v)?;
        }
        if let Some(v) = self.derivation_type {
            os.write_enum(14, ::protobuf::ProtobufEnum::value(&v))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoSignTxInit {
        CardanoSignTxInit::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CardanoTxSigningMode>>(
                "signing_mode",
                |m: &CardanoSignTxInit| { &m.signing_mode },
                |m: &mut CardanoSignTxInit| { &mut m.signing_mode },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "protocol_magic",
                |m: &CardanoSignTxInit| { &m.protocol_magic },
                |m: &mut CardanoSignTxInit| { &mut m.protocol_magic },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "network_id",
                |m: &CardanoSignTxInit| { &m.network_id },
                |m: &mut CardanoSignTxInit| { &mut m.network_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "inputs_count",
                |m: &CardanoSignTxInit| { &m.inputs_count },
                |m: &mut CardanoSignTxInit| { &mut m.inputs_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "outputs_count",
                |m: &CardanoSignTxInit| { &m.outputs_count },
                |m: &mut CardanoSignTxInit| { &mut m.outputs_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "fee",
                |m: &CardanoSignTxInit| { &m.fee },
                |m: &mut CardanoSignTxInit| { &mut m.fee },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "ttl",
                |m: &CardanoSignTxInit| { &m.ttl },
                |m: &mut CardanoSignTxInit| { &mut m.ttl },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "certificates_count",
                |m: &CardanoSignTxInit| { &m.certificates_count },
                |m: &mut CardanoSignTxInit| { &mut m.certificates_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "withdrawals_count",
                |m: &CardanoSignTxInit| { &m.withdrawals_count },
                |m: &mut CardanoSignTxInit| { &mut m.withdrawals_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "has_auxiliary_data",
                |m: &CardanoSignTxInit| { &m.has_auxiliary_data },
                |m: &mut CardanoSignTxInit| { &mut m.has_auxiliary_data },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "validity_interval_start",
                |m: &CardanoSignTxInit| { &m.validity_interval_start },
                |m: &mut CardanoSignTxInit| { &mut m.validity_interval_start },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "witness_requests_count",
                |m: &CardanoSignTxInit| { &m.witness_requests_count },
                |m: &mut CardanoSignTxInit| { &mut m.witness_requests_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "minting_asset_groups_count",
                |m: &CardanoSignTxInit| { &m.minting_asset_groups_count },
                |m: &mut CardanoSignTxInit| { &mut m.minting_asset_groups_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CardanoDerivationType>>(
                "derivation_type",
                |m: &CardanoSignTxInit| { &m.derivation_type },
                |m: &mut CardanoSignTxInit| { &mut m.derivation_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoSignTxInit>(
                "CardanoSignTxInit",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoSignTxInit {
        static instance: ::protobuf::rt::LazyV2<CardanoSignTxInit> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoSignTxInit::new)
    }
}

impl ::protobuf::Clear for CardanoSignTxInit {
    fn clear(&mut self) {
        self.signing_mode = ::std::option::Option::None;
        self.protocol_magic = ::std::option::Option::None;
        self.network_id = ::std::option::Option::None;
        self.inputs_count = ::std::option::Option::None;
        self.outputs_count = ::std::option::Option::None;
        self.fee = ::std::option::Option::None;
        self.ttl = ::std::option::Option::None;
        self.certificates_count = ::std::option::Option::None;
        self.withdrawals_count = ::std::option::Option::None;
        self.has_auxiliary_data = ::std::option::Option::None;
        self.validity_interval_start = ::std::option::Option::None;
        self.witness_requests_count = ::std::option::Option::None;
        self.minting_asset_groups_count = ::std::option::Option::None;
        self.derivation_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoSignTxInit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoSignTxInit {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoTxInput {
    // message fields
    prev_hash: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    prev_index: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoTxInput {
    fn default() -> &'a CardanoTxInput {
        <CardanoTxInput as ::protobuf::Message>::default_instance()
    }
}

impl CardanoTxInput {
    pub fn new() -> CardanoTxInput {
        ::std::default::Default::default()
    }

    // required bytes prev_hash = 1;


    pub fn get_prev_hash(&self) -> &[u8] {
        match self.prev_hash.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_prev_hash(&mut self) {
        self.prev_hash.clear();
    }

    pub fn has_prev_hash(&self) -> bool {
        self.prev_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_prev_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.prev_hash = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prev_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.prev_hash.is_none() {
            self.prev_hash.set_default();
        }
        self.prev_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_prev_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.prev_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required uint32 prev_index = 2;


    pub fn get_prev_index(&self) -> u32 {
        self.prev_index.unwrap_or(0)
    }
    pub fn clear_prev_index(&mut self) {
        self.prev_index = ::std::option::Option::None;
    }

    pub fn has_prev_index(&self) -> bool {
        self.prev_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_prev_index(&mut self, v: u32) {
        self.prev_index = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CardanoTxInput {
    fn is_initialized(&self) -> bool {
        if self.prev_hash.is_none() {
            return false;
        }
        if self.prev_index.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.prev_hash)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.prev_index = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.prev_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.prev_index {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.prev_hash.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(v) = self.prev_index {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoTxInput {
        CardanoTxInput::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "prev_hash",
                |m: &CardanoTxInput| { &m.prev_hash },
                |m: &mut CardanoTxInput| { &mut m.prev_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "prev_index",
                |m: &CardanoTxInput| { &m.prev_index },
                |m: &mut CardanoTxInput| { &mut m.prev_index },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoTxInput>(
                "CardanoTxInput",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoTxInput {
        static instance: ::protobuf::rt::LazyV2<CardanoTxInput> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoTxInput::new)
    }
}

impl ::protobuf::Clear for CardanoTxInput {
    fn clear(&mut self) {
        self.prev_hash.clear();
        self.prev_index = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoTxInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoTxInput {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoTxOutput {
    // message fields
    address: ::protobuf::SingularField<::std::string::String>,
    pub address_parameters: ::protobuf::SingularPtrField<CardanoAddressParametersType>,
    amount: ::std::option::Option<u64>,
    asset_groups_count: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoTxOutput {
    fn default() -> &'a CardanoTxOutput {
        <CardanoTxOutput as ::protobuf::Message>::default_instance()
    }
}

impl CardanoTxOutput {
    pub fn new() -> CardanoTxOutput {
        ::std::default::Default::default()
    }

    // optional string address = 1;


    pub fn get_address(&self) -> &str {
        match self.address.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        if self.address.is_none() {
            self.address.set_default();
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        self.address.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .hw.trezor.messages.cardano.CardanoAddressParametersType address_parameters = 2;


    pub fn get_address_parameters(&self) -> &CardanoAddressParametersType {
        self.address_parameters.as_ref().unwrap_or_else(|| <CardanoAddressParametersType as ::protobuf::Message>::default_instance())
    }
    pub fn clear_address_parameters(&mut self) {
        self.address_parameters.clear();
    }

    pub fn has_address_parameters(&self) -> bool {
        self.address_parameters.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address_parameters(&mut self, v: CardanoAddressParametersType) {
        self.address_parameters = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address_parameters(&mut self) -> &mut CardanoAddressParametersType {
        if self.address_parameters.is_none() {
            self.address_parameters.set_default();
        }
        self.address_parameters.as_mut().unwrap()
    }

    // Take field
    pub fn take_address_parameters(&mut self) -> CardanoAddressParametersType {
        self.address_parameters.take().unwrap_or_else(|| CardanoAddressParametersType::new())
    }

    // required uint64 amount = 3;


    pub fn get_amount(&self) -> u64 {
        self.amount.unwrap_or(0)
    }
    pub fn clear_amount(&mut self) {
        self.amount = ::std::option::Option::None;
    }

    pub fn has_amount(&self) -> bool {
        self.amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: u64) {
        self.amount = ::std::option::Option::Some(v);
    }

    // required uint32 asset_groups_count = 4;


    pub fn get_asset_groups_count(&self) -> u32 {
        self.asset_groups_count.unwrap_or(0)
    }
    pub fn clear_asset_groups_count(&mut self) {
        self.asset_groups_count = ::std::option::Option::None;
    }

    pub fn has_asset_groups_count(&self) -> bool {
        self.asset_groups_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_asset_groups_count(&mut self, v: u32) {
        self.asset_groups_count = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CardanoTxOutput {
    fn is_initialized(&self) -> bool {
        if self.amount.is_none() {
            return false;
        }
        if self.asset_groups_count.is_none() {
            return false;
        }
        for v in &self.address_parameters {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.address_parameters)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.amount = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.asset_groups_count = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.address.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.address_parameters.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.amount {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.asset_groups_count {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.address.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.address_parameters.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.amount {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.asset_groups_count {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoTxOutput {
        CardanoTxOutput::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &CardanoTxOutput| { &m.address },
                |m: &mut CardanoTxOutput| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CardanoAddressParametersType>>(
                "address_parameters",
                |m: &CardanoTxOutput| { &m.address_parameters },
                |m: &mut CardanoTxOutput| { &mut m.address_parameters },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "amount",
                |m: &CardanoTxOutput| { &m.amount },
                |m: &mut CardanoTxOutput| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "asset_groups_count",
                |m: &CardanoTxOutput| { &m.asset_groups_count },
                |m: &mut CardanoTxOutput| { &mut m.asset_groups_count },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoTxOutput>(
                "CardanoTxOutput",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoTxOutput {
        static instance: ::protobuf::rt::LazyV2<CardanoTxOutput> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoTxOutput::new)
    }
}

impl ::protobuf::Clear for CardanoTxOutput {
    fn clear(&mut self) {
        self.address.clear();
        self.address_parameters.clear();
        self.amount = ::std::option::Option::None;
        self.asset_groups_count = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoTxOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoTxOutput {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoAssetGroup {
    // message fields
    policy_id: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    tokens_count: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoAssetGroup {
    fn default() -> &'a CardanoAssetGroup {
        <CardanoAssetGroup as ::protobuf::Message>::default_instance()
    }
}

impl CardanoAssetGroup {
    pub fn new() -> CardanoAssetGroup {
        ::std::default::Default::default()
    }

    // required bytes policy_id = 1;


    pub fn get_policy_id(&self) -> &[u8] {
        match self.policy_id.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_policy_id(&mut self) {
        self.policy_id.clear();
    }

    pub fn has_policy_id(&self) -> bool {
        self.policy_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_policy_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.policy_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_policy_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.policy_id.is_none() {
            self.policy_id.set_default();
        }
        self.policy_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_policy_id(&mut self) -> ::std::vec::Vec<u8> {
        self.policy_id.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required uint32 tokens_count = 2;


    pub fn get_tokens_count(&self) -> u32 {
        self.tokens_count.unwrap_or(0)
    }
    pub fn clear_tokens_count(&mut self) {
        self.tokens_count = ::std::option::Option::None;
    }

    pub fn has_tokens_count(&self) -> bool {
        self.tokens_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tokens_count(&mut self, v: u32) {
        self.tokens_count = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CardanoAssetGroup {
    fn is_initialized(&self) -> bool {
        if self.policy_id.is_none() {
            return false;
        }
        if self.tokens_count.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.policy_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.tokens_count = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.policy_id.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.tokens_count {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.policy_id.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(v) = self.tokens_count {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoAssetGroup {
        CardanoAssetGroup::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "policy_id",
                |m: &CardanoAssetGroup| { &m.policy_id },
                |m: &mut CardanoAssetGroup| { &mut m.policy_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "tokens_count",
                |m: &CardanoAssetGroup| { &m.tokens_count },
                |m: &mut CardanoAssetGroup| { &mut m.tokens_count },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoAssetGroup>(
                "CardanoAssetGroup",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoAssetGroup {
        static instance: ::protobuf::rt::LazyV2<CardanoAssetGroup> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoAssetGroup::new)
    }
}

impl ::protobuf::Clear for CardanoAssetGroup {
    fn clear(&mut self) {
        self.policy_id.clear();
        self.tokens_count = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoAssetGroup {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoAssetGroup {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoToken {
    // message fields
    asset_name_bytes: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    amount: ::std::option::Option<u64>,
    mint_amount: ::std::option::Option<i64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoToken {
    fn default() -> &'a CardanoToken {
        <CardanoToken as ::protobuf::Message>::default_instance()
    }
}

impl CardanoToken {
    pub fn new() -> CardanoToken {
        ::std::default::Default::default()
    }

    // required bytes asset_name_bytes = 1;


    pub fn get_asset_name_bytes(&self) -> &[u8] {
        match self.asset_name_bytes.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_asset_name_bytes(&mut self) {
        self.asset_name_bytes.clear();
    }

    pub fn has_asset_name_bytes(&self) -> bool {
        self.asset_name_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_asset_name_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.asset_name_bytes = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset_name_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.asset_name_bytes.is_none() {
            self.asset_name_bytes.set_default();
        }
        self.asset_name_bytes.as_mut().unwrap()
    }

    // Take field
    pub fn take_asset_name_bytes(&mut self) -> ::std::vec::Vec<u8> {
        self.asset_name_bytes.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint64 amount = 2;


    pub fn get_amount(&self) -> u64 {
        self.amount.unwrap_or(0)
    }
    pub fn clear_amount(&mut self) {
        self.amount = ::std::option::Option::None;
    }

    pub fn has_amount(&self) -> bool {
        self.amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: u64) {
        self.amount = ::std::option::Option::Some(v);
    }

    // optional sint64 mint_amount = 3;


    pub fn get_mint_amount(&self) -> i64 {
        self.mint_amount.unwrap_or(0)
    }
    pub fn clear_mint_amount(&mut self) {
        self.mint_amount = ::std::option::Option::None;
    }

    pub fn has_mint_amount(&self) -> bool {
        self.mint_amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mint_amount(&mut self, v: i64) {
        self.mint_amount = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CardanoToken {
    fn is_initialized(&self) -> bool {
        if self.asset_name_bytes.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.asset_name_bytes)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.amount = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.mint_amount = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.asset_name_bytes.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.amount {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.mint_amount {
            my_size += ::protobuf::rt::value_varint_zigzag_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.asset_name_bytes.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(v) = self.amount {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.mint_amount {
            os.write_sint64(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoToken {
        CardanoToken::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "asset_name_bytes",
                |m: &CardanoToken| { &m.asset_name_bytes },
                |m: &mut CardanoToken| { &mut m.asset_name_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "amount",
                |m: &CardanoToken| { &m.amount },
                |m: &mut CardanoToken| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                "mint_amount",
                |m: &CardanoToken| { &m.mint_amount },
                |m: &mut CardanoToken| { &mut m.mint_amount },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoToken>(
                "CardanoToken",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoToken {
        static instance: ::protobuf::rt::LazyV2<CardanoToken> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoToken::new)
    }
}

impl ::protobuf::Clear for CardanoToken {
    fn clear(&mut self) {
        self.asset_name_bytes.clear();
        self.amount = ::std::option::Option::None;
        self.mint_amount = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoToken {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoToken {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoPoolOwner {
    // message fields
    pub staking_key_path: ::std::vec::Vec<u32>,
    staking_key_hash: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoPoolOwner {
    fn default() -> &'a CardanoPoolOwner {
        <CardanoPoolOwner as ::protobuf::Message>::default_instance()
    }
}

impl CardanoPoolOwner {
    pub fn new() -> CardanoPoolOwner {
        ::std::default::Default::default()
    }

    // repeated uint32 staking_key_path = 1;


    pub fn get_staking_key_path(&self) -> &[u32] {
        &self.staking_key_path
    }
    pub fn clear_staking_key_path(&mut self) {
        self.staking_key_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_staking_key_path(&mut self, v: ::std::vec::Vec<u32>) {
        self.staking_key_path = v;
    }

    // Mutable pointer to the field.
    pub fn mut_staking_key_path(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.staking_key_path
    }

    // Take field
    pub fn take_staking_key_path(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.staking_key_path, ::std::vec::Vec::new())
    }

    // optional bytes staking_key_hash = 2;


    pub fn get_staking_key_hash(&self) -> &[u8] {
        match self.staking_key_hash.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_staking_key_hash(&mut self) {
        self.staking_key_hash.clear();
    }

    pub fn has_staking_key_hash(&self) -> bool {
        self.staking_key_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_staking_key_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.staking_key_hash = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_staking_key_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.staking_key_hash.is_none() {
            self.staking_key_hash.set_default();
        }
        self.staking_key_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_staking_key_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.staking_key_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CardanoPoolOwner {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.staking_key_path)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.staking_key_hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.staking_key_path {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(ref v) = self.staking_key_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.staking_key_path {
            os.write_uint32(1, *v)?;
        };
        if let Some(ref v) = self.staking_key_hash.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoPoolOwner {
        CardanoPoolOwner::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "staking_key_path",
                |m: &CardanoPoolOwner| { &m.staking_key_path },
                |m: &mut CardanoPoolOwner| { &mut m.staking_key_path },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "staking_key_hash",
                |m: &CardanoPoolOwner| { &m.staking_key_hash },
                |m: &mut CardanoPoolOwner| { &mut m.staking_key_hash },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoPoolOwner>(
                "CardanoPoolOwner",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoPoolOwner {
        static instance: ::protobuf::rt::LazyV2<CardanoPoolOwner> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoPoolOwner::new)
    }
}

impl ::protobuf::Clear for CardanoPoolOwner {
    fn clear(&mut self) {
        self.staking_key_path.clear();
        self.staking_key_hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoPoolOwner {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoPoolOwner {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoPoolRelayParameters {
    // message fields
    field_type: ::std::option::Option<CardanoPoolRelayType>,
    ipv4_address: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    ipv6_address: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    host_name: ::protobuf::SingularField<::std::string::String>,
    port: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoPoolRelayParameters {
    fn default() -> &'a CardanoPoolRelayParameters {
        <CardanoPoolRelayParameters as ::protobuf::Message>::default_instance()
    }
}

impl CardanoPoolRelayParameters {
    pub fn new() -> CardanoPoolRelayParameters {
        ::std::default::Default::default()
    }

    // required .hw.trezor.messages.cardano.CardanoPoolRelayType type = 1;


    pub fn get_field_type(&self) -> CardanoPoolRelayType {
        self.field_type.unwrap_or(CardanoPoolRelayType::SINGLE_HOST_IP)
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: CardanoPoolRelayType) {
        self.field_type = ::std::option::Option::Some(v);
    }

    // optional bytes ipv4_address = 2;


    pub fn get_ipv4_address(&self) -> &[u8] {
        match self.ipv4_address.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_ipv4_address(&mut self) {
        self.ipv4_address.clear();
    }

    pub fn has_ipv4_address(&self) -> bool {
        self.ipv4_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ipv4_address(&mut self, v: ::std::vec::Vec<u8>) {
        self.ipv4_address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ipv4_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.ipv4_address.is_none() {
            self.ipv4_address.set_default();
        }
        self.ipv4_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_ipv4_address(&mut self) -> ::std::vec::Vec<u8> {
        self.ipv4_address.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes ipv6_address = 3;


    pub fn get_ipv6_address(&self) -> &[u8] {
        match self.ipv6_address.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_ipv6_address(&mut self) {
        self.ipv6_address.clear();
    }

    pub fn has_ipv6_address(&self) -> bool {
        self.ipv6_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ipv6_address(&mut self, v: ::std::vec::Vec<u8>) {
        self.ipv6_address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ipv6_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.ipv6_address.is_none() {
            self.ipv6_address.set_default();
        }
        self.ipv6_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_ipv6_address(&mut self) -> ::std::vec::Vec<u8> {
        self.ipv6_address.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional string host_name = 4;


    pub fn get_host_name(&self) -> &str {
        match self.host_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_host_name(&mut self) {
        self.host_name.clear();
    }

    pub fn has_host_name(&self) -> bool {
        self.host_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_host_name(&mut self, v: ::std::string::String) {
        self.host_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_host_name(&mut self) -> &mut ::std::string::String {
        if self.host_name.is_none() {
            self.host_name.set_default();
        }
        self.host_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_host_name(&mut self) -> ::std::string::String {
        self.host_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 port = 5;


    pub fn get_port(&self) -> u32 {
        self.port.unwrap_or(0)
    }
    pub fn clear_port(&mut self) {
        self.port = ::std::option::Option::None;
    }

    pub fn has_port(&self) -> bool {
        self.port.is_some()
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: u32) {
        self.port = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CardanoPoolRelayParameters {
    fn is_initialized(&self) -> bool {
        if self.field_type.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.ipv4_address)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.ipv6_address)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.host_name)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.port = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_type {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(ref v) = self.ipv4_address.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(ref v) = self.ipv6_address.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        if let Some(ref v) = self.host_name.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.port {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_type {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.ipv4_address.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(ref v) = self.ipv6_address.as_ref() {
            os.write_bytes(3, &v)?;
        }
        if let Some(ref v) = self.host_name.as_ref() {
            os.write_string(4, &v)?;
        }
        if let Some(v) = self.port {
            os.write_uint32(5, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoPoolRelayParameters {
        CardanoPoolRelayParameters::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CardanoPoolRelayType>>(
                "type",
                |m: &CardanoPoolRelayParameters| { &m.field_type },
                |m: &mut CardanoPoolRelayParameters| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "ipv4_address",
                |m: &CardanoPoolRelayParameters| { &m.ipv4_address },
                |m: &mut CardanoPoolRelayParameters| { &mut m.ipv4_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "ipv6_address",
                |m: &CardanoPoolRelayParameters| { &m.ipv6_address },
                |m: &mut CardanoPoolRelayParameters| { &mut m.ipv6_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "host_name",
                |m: &CardanoPoolRelayParameters| { &m.host_name },
                |m: &mut CardanoPoolRelayParameters| { &mut m.host_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "port",
                |m: &CardanoPoolRelayParameters| { &m.port },
                |m: &mut CardanoPoolRelayParameters| { &mut m.port },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoPoolRelayParameters>(
                "CardanoPoolRelayParameters",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoPoolRelayParameters {
        static instance: ::protobuf::rt::LazyV2<CardanoPoolRelayParameters> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoPoolRelayParameters::new)
    }
}

impl ::protobuf::Clear for CardanoPoolRelayParameters {
    fn clear(&mut self) {
        self.field_type = ::std::option::Option::None;
        self.ipv4_address.clear();
        self.ipv6_address.clear();
        self.host_name.clear();
        self.port = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoPoolRelayParameters {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoPoolRelayParameters {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoPoolMetadataType {
    // message fields
    url: ::protobuf::SingularField<::std::string::String>,
    hash: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoPoolMetadataType {
    fn default() -> &'a CardanoPoolMetadataType {
        <CardanoPoolMetadataType as ::protobuf::Message>::default_instance()
    }
}

impl CardanoPoolMetadataType {
    pub fn new() -> CardanoPoolMetadataType {
        ::std::default::Default::default()
    }

    // required string url = 1;


    pub fn get_url(&self) -> &str {
        match self.url.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_url(&mut self) {
        self.url.clear();
    }

    pub fn has_url(&self) -> bool {
        self.url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_url(&mut self, v: ::std::string::String) {
        self.url = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_url(&mut self) -> &mut ::std::string::String {
        if self.url.is_none() {
            self.url.set_default();
        }
        self.url.as_mut().unwrap()
    }

    // Take field
    pub fn take_url(&mut self) -> ::std::string::String {
        self.url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required bytes hash = 2;


    pub fn get_hash(&self) -> &[u8] {
        match self.hash.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    pub fn has_hash(&self) -> bool {
        self.hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.hash = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.hash.is_none() {
            self.hash.set_default();
        }
        self.hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CardanoPoolMetadataType {
    fn is_initialized(&self) -> bool {
        if self.url.is_none() {
            return false;
        }
        if self.hash.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.url)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.url.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.url.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.hash.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoPoolMetadataType {
        CardanoPoolMetadataType::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "url",
                |m: &CardanoPoolMetadataType| { &m.url },
                |m: &mut CardanoPoolMetadataType| { &mut m.url },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "hash",
                |m: &CardanoPoolMetadataType| { &m.hash },
                |m: &mut CardanoPoolMetadataType| { &mut m.hash },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoPoolMetadataType>(
                "CardanoPoolMetadataType",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoPoolMetadataType {
        static instance: ::protobuf::rt::LazyV2<CardanoPoolMetadataType> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoPoolMetadataType::new)
    }
}

impl ::protobuf::Clear for CardanoPoolMetadataType {
    fn clear(&mut self) {
        self.url.clear();
        self.hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoPoolMetadataType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoPoolMetadataType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoPoolParametersType {
    // message fields
    pool_id: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    vrf_key_hash: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    pledge: ::std::option::Option<u64>,
    cost: ::std::option::Option<u64>,
    margin_numerator: ::std::option::Option<u64>,
    margin_denominator: ::std::option::Option<u64>,
    reward_account: ::protobuf::SingularField<::std::string::String>,
    pub owners: ::protobuf::RepeatedField<CardanoPoolOwner>,
    pub relays: ::protobuf::RepeatedField<CardanoPoolRelayParameters>,
    pub metadata: ::protobuf::SingularPtrField<CardanoPoolMetadataType>,
    owners_count: ::std::option::Option<u32>,
    relays_count: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoPoolParametersType {
    fn default() -> &'a CardanoPoolParametersType {
        <CardanoPoolParametersType as ::protobuf::Message>::default_instance()
    }
}

impl CardanoPoolParametersType {
    pub fn new() -> CardanoPoolParametersType {
        ::std::default::Default::default()
    }

    // required bytes pool_id = 1;


    pub fn get_pool_id(&self) -> &[u8] {
        match self.pool_id.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_pool_id(&mut self) {
        self.pool_id.clear();
    }

    pub fn has_pool_id(&self) -> bool {
        self.pool_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pool_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.pool_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pool_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.pool_id.is_none() {
            self.pool_id.set_default();
        }
        self.pool_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_pool_id(&mut self) -> ::std::vec::Vec<u8> {
        self.pool_id.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required bytes vrf_key_hash = 2;


    pub fn get_vrf_key_hash(&self) -> &[u8] {
        match self.vrf_key_hash.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_vrf_key_hash(&mut self) {
        self.vrf_key_hash.clear();
    }

    pub fn has_vrf_key_hash(&self) -> bool {
        self.vrf_key_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_vrf_key_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.vrf_key_hash = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vrf_key_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.vrf_key_hash.is_none() {
            self.vrf_key_hash.set_default();
        }
        self.vrf_key_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_vrf_key_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.vrf_key_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required uint64 pledge = 3;


    pub fn get_pledge(&self) -> u64 {
        self.pledge.unwrap_or(0)
    }
    pub fn clear_pledge(&mut self) {
        self.pledge = ::std::option::Option::None;
    }

    pub fn has_pledge(&self) -> bool {
        self.pledge.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pledge(&mut self, v: u64) {
        self.pledge = ::std::option::Option::Some(v);
    }

    // required uint64 cost = 4;


    pub fn get_cost(&self) -> u64 {
        self.cost.unwrap_or(0)
    }
    pub fn clear_cost(&mut self) {
        self.cost = ::std::option::Option::None;
    }

    pub fn has_cost(&self) -> bool {
        self.cost.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cost(&mut self, v: u64) {
        self.cost = ::std::option::Option::Some(v);
    }

    // required uint64 margin_numerator = 5;


    pub fn get_margin_numerator(&self) -> u64 {
        self.margin_numerator.unwrap_or(0)
    }
    pub fn clear_margin_numerator(&mut self) {
        self.margin_numerator = ::std::option::Option::None;
    }

    pub fn has_margin_numerator(&self) -> bool {
        self.margin_numerator.is_some()
    }

    // Param is passed by value, moved
    pub fn set_margin_numerator(&mut self, v: u64) {
        self.margin_numerator = ::std::option::Option::Some(v);
    }

    // required uint64 margin_denominator = 6;


    pub fn get_margin_denominator(&self) -> u64 {
        self.margin_denominator.unwrap_or(0)
    }
    pub fn clear_margin_denominator(&mut self) {
        self.margin_denominator = ::std::option::Option::None;
    }

    pub fn has_margin_denominator(&self) -> bool {
        self.margin_denominator.is_some()
    }

    // Param is passed by value, moved
    pub fn set_margin_denominator(&mut self, v: u64) {
        self.margin_denominator = ::std::option::Option::Some(v);
    }

    // required string reward_account = 7;


    pub fn get_reward_account(&self) -> &str {
        match self.reward_account.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_reward_account(&mut self) {
        self.reward_account.clear();
    }

    pub fn has_reward_account(&self) -> bool {
        self.reward_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reward_account(&mut self, v: ::std::string::String) {
        self.reward_account = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reward_account(&mut self) -> &mut ::std::string::String {
        if self.reward_account.is_none() {
            self.reward_account.set_default();
        }
        self.reward_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_reward_account(&mut self) -> ::std::string::String {
        self.reward_account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated .hw.trezor.messages.cardano.CardanoPoolOwner owners = 8;


    pub fn get_owners(&self) -> &[CardanoPoolOwner] {
        &self.owners
    }
    pub fn clear_owners(&mut self) {
        self.owners.clear();
    }

    // Param is passed by value, moved
    pub fn set_owners(&mut self, v: ::protobuf::RepeatedField<CardanoPoolOwner>) {
        self.owners = v;
    }

    // Mutable pointer to the field.
    pub fn mut_owners(&mut self) -> &mut ::protobuf::RepeatedField<CardanoPoolOwner> {
        &mut self.owners
    }

    // Take field
    pub fn take_owners(&mut self) -> ::protobuf::RepeatedField<CardanoPoolOwner> {
        ::std::mem::replace(&mut self.owners, ::protobuf::RepeatedField::new())
    }

    // repeated .hw.trezor.messages.cardano.CardanoPoolRelayParameters relays = 9;


    pub fn get_relays(&self) -> &[CardanoPoolRelayParameters] {
        &self.relays
    }
    pub fn clear_relays(&mut self) {
        self.relays.clear();
    }

    // Param is passed by value, moved
    pub fn set_relays(&mut self, v: ::protobuf::RepeatedField<CardanoPoolRelayParameters>) {
        self.relays = v;
    }

    // Mutable pointer to the field.
    pub fn mut_relays(&mut self) -> &mut ::protobuf::RepeatedField<CardanoPoolRelayParameters> {
        &mut self.relays
    }

    // Take field
    pub fn take_relays(&mut self) -> ::protobuf::RepeatedField<CardanoPoolRelayParameters> {
        ::std::mem::replace(&mut self.relays, ::protobuf::RepeatedField::new())
    }

    // optional .hw.trezor.messages.cardano.CardanoPoolMetadataType metadata = 10;


    pub fn get_metadata(&self) -> &CardanoPoolMetadataType {
        self.metadata.as_ref().unwrap_or_else(|| <CardanoPoolMetadataType as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: CardanoPoolMetadataType) {
        self.metadata = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut CardanoPoolMetadataType {
        if self.metadata.is_none() {
            self.metadata.set_default();
        }
        self.metadata.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata(&mut self) -> CardanoPoolMetadataType {
        self.metadata.take().unwrap_or_else(|| CardanoPoolMetadataType::new())
    }

    // required uint32 owners_count = 11;


    pub fn get_owners_count(&self) -> u32 {
        self.owners_count.unwrap_or(0)
    }
    pub fn clear_owners_count(&mut self) {
        self.owners_count = ::std::option::Option::None;
    }

    pub fn has_owners_count(&self) -> bool {
        self.owners_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_owners_count(&mut self, v: u32) {
        self.owners_count = ::std::option::Option::Some(v);
    }

    // required uint32 relays_count = 12;


    pub fn get_relays_count(&self) -> u32 {
        self.relays_count.unwrap_or(0)
    }
    pub fn clear_relays_count(&mut self) {
        self.relays_count = ::std::option::Option::None;
    }

    pub fn has_relays_count(&self) -> bool {
        self.relays_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_relays_count(&mut self, v: u32) {
        self.relays_count = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CardanoPoolParametersType {
    fn is_initialized(&self) -> bool {
        if self.pool_id.is_none() {
            return false;
        }
        if self.vrf_key_hash.is_none() {
            return false;
        }
        if self.pledge.is_none() {
            return false;
        }
        if self.cost.is_none() {
            return false;
        }
        if self.margin_numerator.is_none() {
            return false;
        }
        if self.margin_denominator.is_none() {
            return false;
        }
        if self.reward_account.is_none() {
            return false;
        }
        if self.owners_count.is_none() {
            return false;
        }
        if self.relays_count.is_none() {
            return false;
        }
        for v in &self.owners {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.relays {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.metadata {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.pool_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.vrf_key_hash)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.pledge = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.cost = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.margin_numerator = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.margin_denominator = ::std::option::Option::Some(tmp);
                },
                7 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.reward_account)?;
                },
                8 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.owners)?;
                },
                9 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.relays)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metadata)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.owners_count = ::std::option::Option::Some(tmp);
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.relays_count = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.pool_id.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.vrf_key_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.pledge {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.cost {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.margin_numerator {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.margin_denominator {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.reward_account.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        for value in &self.owners {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.relays {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.owners_count {
            my_size += ::protobuf::rt::value_size(11, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.relays_count {
            my_size += ::protobuf::rt::value_size(12, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.pool_id.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.vrf_key_hash.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(v) = self.pledge {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.cost {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.margin_numerator {
            os.write_uint64(5, v)?;
        }
        if let Some(v) = self.margin_denominator {
            os.write_uint64(6, v)?;
        }
        if let Some(ref v) = self.reward_account.as_ref() {
            os.write_string(7, &v)?;
        }
        for v in &self.owners {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.relays {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.metadata.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.owners_count {
            os.write_uint32(11, v)?;
        }
        if let Some(v) = self.relays_count {
            os.write_uint32(12, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoPoolParametersType {
        CardanoPoolParametersType::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "pool_id",
                |m: &CardanoPoolParametersType| { &m.pool_id },
                |m: &mut CardanoPoolParametersType| { &mut m.pool_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "vrf_key_hash",
                |m: &CardanoPoolParametersType| { &m.vrf_key_hash },
                |m: &mut CardanoPoolParametersType| { &mut m.vrf_key_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "pledge",
                |m: &CardanoPoolParametersType| { &m.pledge },
                |m: &mut CardanoPoolParametersType| { &mut m.pledge },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "cost",
                |m: &CardanoPoolParametersType| { &m.cost },
                |m: &mut CardanoPoolParametersType| { &mut m.cost },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "margin_numerator",
                |m: &CardanoPoolParametersType| { &m.margin_numerator },
                |m: &mut CardanoPoolParametersType| { &mut m.margin_numerator },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "margin_denominator",
                |m: &CardanoPoolParametersType| { &m.margin_denominator },
                |m: &mut CardanoPoolParametersType| { &mut m.margin_denominator },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "reward_account",
                |m: &CardanoPoolParametersType| { &m.reward_account },
                |m: &mut CardanoPoolParametersType| { &mut m.reward_account },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CardanoPoolOwner>>(
                "owners",
                |m: &CardanoPoolParametersType| { &m.owners },
                |m: &mut CardanoPoolParametersType| { &mut m.owners },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CardanoPoolRelayParameters>>(
                "relays",
                |m: &CardanoPoolParametersType| { &m.relays },
                |m: &mut CardanoPoolParametersType| { &mut m.relays },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CardanoPoolMetadataType>>(
                "metadata",
                |m: &CardanoPoolParametersType| { &m.metadata },
                |m: &mut CardanoPoolParametersType| { &mut m.metadata },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "owners_count",
                |m: &CardanoPoolParametersType| { &m.owners_count },
                |m: &mut CardanoPoolParametersType| { &mut m.owners_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "relays_count",
                |m: &CardanoPoolParametersType| { &m.relays_count },
                |m: &mut CardanoPoolParametersType| { &mut m.relays_count },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoPoolParametersType>(
                "CardanoPoolParametersType",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoPoolParametersType {
        static instance: ::protobuf::rt::LazyV2<CardanoPoolParametersType> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoPoolParametersType::new)
    }
}

impl ::protobuf::Clear for CardanoPoolParametersType {
    fn clear(&mut self) {
        self.pool_id.clear();
        self.vrf_key_hash.clear();
        self.pledge = ::std::option::Option::None;
        self.cost = ::std::option::Option::None;
        self.margin_numerator = ::std::option::Option::None;
        self.margin_denominator = ::std::option::Option::None;
        self.reward_account.clear();
        self.owners.clear();
        self.relays.clear();
        self.metadata.clear();
        self.owners_count = ::std::option::Option::None;
        self.relays_count = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoPoolParametersType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoPoolParametersType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoTxCertificate {
    // message fields
    field_type: ::std::option::Option<CardanoCertificateType>,
    pub path: ::std::vec::Vec<u32>,
    pool: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    pub pool_parameters: ::protobuf::SingularPtrField<CardanoPoolParametersType>,
    script_hash: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoTxCertificate {
    fn default() -> &'a CardanoTxCertificate {
        <CardanoTxCertificate as ::protobuf::Message>::default_instance()
    }
}

impl CardanoTxCertificate {
    pub fn new() -> CardanoTxCertificate {
        ::std::default::Default::default()
    }

    // required .hw.trezor.messages.cardano.CardanoCertificateType type = 1;


    pub fn get_field_type(&self) -> CardanoCertificateType {
        self.field_type.unwrap_or(CardanoCertificateType::STAKE_REGISTRATION)
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: CardanoCertificateType) {
        self.field_type = ::std::option::Option::Some(v);
    }

    // repeated uint32 path = 2;


    pub fn get_path(&self) -> &[u32] {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::vec::Vec<u32>) {
        self.path = v;
    }

    // Mutable pointer to the field.
    pub fn mut_path(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.path, ::std::vec::Vec::new())
    }

    // optional bytes pool = 3;


    pub fn get_pool(&self) -> &[u8] {
        match self.pool.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_pool(&mut self) {
        self.pool.clear();
    }

    pub fn has_pool(&self) -> bool {
        self.pool.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pool(&mut self, v: ::std::vec::Vec<u8>) {
        self.pool = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pool(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.pool.is_none() {
            self.pool.set_default();
        }
        self.pool.as_mut().unwrap()
    }

    // Take field
    pub fn take_pool(&mut self) -> ::std::vec::Vec<u8> {
        self.pool.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional .hw.trezor.messages.cardano.CardanoPoolParametersType pool_parameters = 4;


    pub fn get_pool_parameters(&self) -> &CardanoPoolParametersType {
        self.pool_parameters.as_ref().unwrap_or_else(|| <CardanoPoolParametersType as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pool_parameters(&mut self) {
        self.pool_parameters.clear();
    }

    pub fn has_pool_parameters(&self) -> bool {
        self.pool_parameters.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pool_parameters(&mut self, v: CardanoPoolParametersType) {
        self.pool_parameters = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pool_parameters(&mut self) -> &mut CardanoPoolParametersType {
        if self.pool_parameters.is_none() {
            self.pool_parameters.set_default();
        }
        self.pool_parameters.as_mut().unwrap()
    }

    // Take field
    pub fn take_pool_parameters(&mut self) -> CardanoPoolParametersType {
        self.pool_parameters.take().unwrap_or_else(|| CardanoPoolParametersType::new())
    }

    // optional bytes script_hash = 5;


    pub fn get_script_hash(&self) -> &[u8] {
        match self.script_hash.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_script_hash(&mut self) {
        self.script_hash.clear();
    }

    pub fn has_script_hash(&self) -> bool {
        self.script_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_script_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.script_hash = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_script_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.script_hash.is_none() {
            self.script_hash.set_default();
        }
        self.script_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_script_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.script_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CardanoTxCertificate {
    fn is_initialized(&self) -> bool {
        if self.field_type.is_none() {
            return false;
        }
        for v in &self.pool_parameters {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.path)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.pool)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pool_parameters)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.script_hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_type {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        for value in &self.path {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(ref v) = self.pool.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        if let Some(ref v) = self.pool_parameters.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.script_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_type {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        for v in &self.path {
            os.write_uint32(2, *v)?;
        };
        if let Some(ref v) = self.pool.as_ref() {
            os.write_bytes(3, &v)?;
        }
        if let Some(ref v) = self.pool_parameters.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.script_hash.as_ref() {
            os.write_bytes(5, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoTxCertificate {
        CardanoTxCertificate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CardanoCertificateType>>(
                "type",
                |m: &CardanoTxCertificate| { &m.field_type },
                |m: &mut CardanoTxCertificate| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "path",
                |m: &CardanoTxCertificate| { &m.path },
                |m: &mut CardanoTxCertificate| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "pool",
                |m: &CardanoTxCertificate| { &m.pool },
                |m: &mut CardanoTxCertificate| { &mut m.pool },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CardanoPoolParametersType>>(
                "pool_parameters",
                |m: &CardanoTxCertificate| { &m.pool_parameters },
                |m: &mut CardanoTxCertificate| { &mut m.pool_parameters },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "script_hash",
                |m: &CardanoTxCertificate| { &m.script_hash },
                |m: &mut CardanoTxCertificate| { &mut m.script_hash },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoTxCertificate>(
                "CardanoTxCertificate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoTxCertificate {
        static instance: ::protobuf::rt::LazyV2<CardanoTxCertificate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoTxCertificate::new)
    }
}

impl ::protobuf::Clear for CardanoTxCertificate {
    fn clear(&mut self) {
        self.field_type = ::std::option::Option::None;
        self.path.clear();
        self.pool.clear();
        self.pool_parameters.clear();
        self.script_hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoTxCertificate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoTxCertificate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoTxWithdrawal {
    // message fields
    pub path: ::std::vec::Vec<u32>,
    amount: ::std::option::Option<u64>,
    script_hash: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoTxWithdrawal {
    fn default() -> &'a CardanoTxWithdrawal {
        <CardanoTxWithdrawal as ::protobuf::Message>::default_instance()
    }
}

impl CardanoTxWithdrawal {
    pub fn new() -> CardanoTxWithdrawal {
        ::std::default::Default::default()
    }

    // repeated uint32 path = 1;


    pub fn get_path(&self) -> &[u32] {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::vec::Vec<u32>) {
        self.path = v;
    }

    // Mutable pointer to the field.
    pub fn mut_path(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.path, ::std::vec::Vec::new())
    }

    // required uint64 amount = 2;


    pub fn get_amount(&self) -> u64 {
        self.amount.unwrap_or(0)
    }
    pub fn clear_amount(&mut self) {
        self.amount = ::std::option::Option::None;
    }

    pub fn has_amount(&self) -> bool {
        self.amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: u64) {
        self.amount = ::std::option::Option::Some(v);
    }

    // optional bytes script_hash = 3;


    pub fn get_script_hash(&self) -> &[u8] {
        match self.script_hash.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_script_hash(&mut self) {
        self.script_hash.clear();
    }

    pub fn has_script_hash(&self) -> bool {
        self.script_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_script_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.script_hash = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_script_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.script_hash.is_none() {
            self.script_hash.set_default();
        }
        self.script_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_script_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.script_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CardanoTxWithdrawal {
    fn is_initialized(&self) -> bool {
        if self.amount.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.amount = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.script_hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.path {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.amount {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.script_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.path {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.amount {
            os.write_uint64(2, v)?;
        }
        if let Some(ref v) = self.script_hash.as_ref() {
            os.write_bytes(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoTxWithdrawal {
        CardanoTxWithdrawal::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "path",
                |m: &CardanoTxWithdrawal| { &m.path },
                |m: &mut CardanoTxWithdrawal| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "amount",
                |m: &CardanoTxWithdrawal| { &m.amount },
                |m: &mut CardanoTxWithdrawal| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "script_hash",
                |m: &CardanoTxWithdrawal| { &m.script_hash },
                |m: &mut CardanoTxWithdrawal| { &mut m.script_hash },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoTxWithdrawal>(
                "CardanoTxWithdrawal",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoTxWithdrawal {
        static instance: ::protobuf::rt::LazyV2<CardanoTxWithdrawal> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoTxWithdrawal::new)
    }
}

impl ::protobuf::Clear for CardanoTxWithdrawal {
    fn clear(&mut self) {
        self.path.clear();
        self.amount = ::std::option::Option::None;
        self.script_hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoTxWithdrawal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoTxWithdrawal {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoCatalystRegistrationParametersType {
    // message fields
    voting_public_key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    pub staking_path: ::std::vec::Vec<u32>,
    pub reward_address_parameters: ::protobuf::SingularPtrField<CardanoAddressParametersType>,
    nonce: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoCatalystRegistrationParametersType {
    fn default() -> &'a CardanoCatalystRegistrationParametersType {
        <CardanoCatalystRegistrationParametersType as ::protobuf::Message>::default_instance()
    }
}

impl CardanoCatalystRegistrationParametersType {
    pub fn new() -> CardanoCatalystRegistrationParametersType {
        ::std::default::Default::default()
    }

    // required bytes voting_public_key = 1;


    pub fn get_voting_public_key(&self) -> &[u8] {
        match self.voting_public_key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_voting_public_key(&mut self) {
        self.voting_public_key.clear();
    }

    pub fn has_voting_public_key(&self) -> bool {
        self.voting_public_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_voting_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.voting_public_key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_voting_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.voting_public_key.is_none() {
            self.voting_public_key.set_default();
        }
        self.voting_public_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_voting_public_key(&mut self) -> ::std::vec::Vec<u8> {
        self.voting_public_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // repeated uint32 staking_path = 2;


    pub fn get_staking_path(&self) -> &[u32] {
        &self.staking_path
    }
    pub fn clear_staking_path(&mut self) {
        self.staking_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_staking_path(&mut self, v: ::std::vec::Vec<u32>) {
        self.staking_path = v;
    }

    // Mutable pointer to the field.
    pub fn mut_staking_path(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.staking_path
    }

    // Take field
    pub fn take_staking_path(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.staking_path, ::std::vec::Vec::new())
    }

    // required .hw.trezor.messages.cardano.CardanoAddressParametersType reward_address_parameters = 3;


    pub fn get_reward_address_parameters(&self) -> &CardanoAddressParametersType {
        self.reward_address_parameters.as_ref().unwrap_or_else(|| <CardanoAddressParametersType as ::protobuf::Message>::default_instance())
    }
    pub fn clear_reward_address_parameters(&mut self) {
        self.reward_address_parameters.clear();
    }

    pub fn has_reward_address_parameters(&self) -> bool {
        self.reward_address_parameters.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reward_address_parameters(&mut self, v: CardanoAddressParametersType) {
        self.reward_address_parameters = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reward_address_parameters(&mut self) -> &mut CardanoAddressParametersType {
        if self.reward_address_parameters.is_none() {
            self.reward_address_parameters.set_default();
        }
        self.reward_address_parameters.as_mut().unwrap()
    }

    // Take field
    pub fn take_reward_address_parameters(&mut self) -> CardanoAddressParametersType {
        self.reward_address_parameters.take().unwrap_or_else(|| CardanoAddressParametersType::new())
    }

    // required uint64 nonce = 4;


    pub fn get_nonce(&self) -> u64 {
        self.nonce.unwrap_or(0)
    }
    pub fn clear_nonce(&mut self) {
        self.nonce = ::std::option::Option::None;
    }

    pub fn has_nonce(&self) -> bool {
        self.nonce.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: u64) {
        self.nonce = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CardanoCatalystRegistrationParametersType {
    fn is_initialized(&self) -> bool {
        if self.voting_public_key.is_none() {
            return false;
        }
        if self.reward_address_parameters.is_none() {
            return false;
        }
        if self.nonce.is_none() {
            return false;
        }
        for v in &self.reward_address_parameters {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.voting_public_key)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.staking_path)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.reward_address_parameters)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.nonce = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.voting_public_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        for value in &self.staking_path {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(ref v) = self.reward_address_parameters.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.nonce {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.voting_public_key.as_ref() {
            os.write_bytes(1, &v)?;
        }
        for v in &self.staking_path {
            os.write_uint32(2, *v)?;
        };
        if let Some(ref v) = self.reward_address_parameters.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.nonce {
            os.write_uint64(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoCatalystRegistrationParametersType {
        CardanoCatalystRegistrationParametersType::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "voting_public_key",
                |m: &CardanoCatalystRegistrationParametersType| { &m.voting_public_key },
                |m: &mut CardanoCatalystRegistrationParametersType| { &mut m.voting_public_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "staking_path",
                |m: &CardanoCatalystRegistrationParametersType| { &m.staking_path },
                |m: &mut CardanoCatalystRegistrationParametersType| { &mut m.staking_path },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CardanoAddressParametersType>>(
                "reward_address_parameters",
                |m: &CardanoCatalystRegistrationParametersType| { &m.reward_address_parameters },
                |m: &mut CardanoCatalystRegistrationParametersType| { &mut m.reward_address_parameters },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "nonce",
                |m: &CardanoCatalystRegistrationParametersType| { &m.nonce },
                |m: &mut CardanoCatalystRegistrationParametersType| { &mut m.nonce },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoCatalystRegistrationParametersType>(
                "CardanoCatalystRegistrationParametersType",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoCatalystRegistrationParametersType {
        static instance: ::protobuf::rt::LazyV2<CardanoCatalystRegistrationParametersType> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoCatalystRegistrationParametersType::new)
    }
}

impl ::protobuf::Clear for CardanoCatalystRegistrationParametersType {
    fn clear(&mut self) {
        self.voting_public_key.clear();
        self.staking_path.clear();
        self.reward_address_parameters.clear();
        self.nonce = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoCatalystRegistrationParametersType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoCatalystRegistrationParametersType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoTxAuxiliaryData {
    // message fields
    pub catalyst_registration_parameters: ::protobuf::SingularPtrField<CardanoCatalystRegistrationParametersType>,
    hash: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoTxAuxiliaryData {
    fn default() -> &'a CardanoTxAuxiliaryData {
        <CardanoTxAuxiliaryData as ::protobuf::Message>::default_instance()
    }
}

impl CardanoTxAuxiliaryData {
    pub fn new() -> CardanoTxAuxiliaryData {
        ::std::default::Default::default()
    }

    // optional .hw.trezor.messages.cardano.CardanoCatalystRegistrationParametersType catalyst_registration_parameters = 1;


    pub fn get_catalyst_registration_parameters(&self) -> &CardanoCatalystRegistrationParametersType {
        self.catalyst_registration_parameters.as_ref().unwrap_or_else(|| <CardanoCatalystRegistrationParametersType as ::protobuf::Message>::default_instance())
    }
    pub fn clear_catalyst_registration_parameters(&mut self) {
        self.catalyst_registration_parameters.clear();
    }

    pub fn has_catalyst_registration_parameters(&self) -> bool {
        self.catalyst_registration_parameters.is_some()
    }

    // Param is passed by value, moved
    pub fn set_catalyst_registration_parameters(&mut self, v: CardanoCatalystRegistrationParametersType) {
        self.catalyst_registration_parameters = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_catalyst_registration_parameters(&mut self) -> &mut CardanoCatalystRegistrationParametersType {
        if self.catalyst_registration_parameters.is_none() {
            self.catalyst_registration_parameters.set_default();
        }
        self.catalyst_registration_parameters.as_mut().unwrap()
    }

    // Take field
    pub fn take_catalyst_registration_parameters(&mut self) -> CardanoCatalystRegistrationParametersType {
        self.catalyst_registration_parameters.take().unwrap_or_else(|| CardanoCatalystRegistrationParametersType::new())
    }

    // optional bytes hash = 2;


    pub fn get_hash(&self) -> &[u8] {
        match self.hash.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    pub fn has_hash(&self) -> bool {
        self.hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.hash = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.hash.is_none() {
            self.hash.set_default();
        }
        self.hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CardanoTxAuxiliaryData {
    fn is_initialized(&self) -> bool {
        for v in &self.catalyst_registration_parameters {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.catalyst_registration_parameters)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.catalyst_registration_parameters.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.catalyst_registration_parameters.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.hash.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoTxAuxiliaryData {
        CardanoTxAuxiliaryData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CardanoCatalystRegistrationParametersType>>(
                "catalyst_registration_parameters",
                |m: &CardanoTxAuxiliaryData| { &m.catalyst_registration_parameters },
                |m: &mut CardanoTxAuxiliaryData| { &mut m.catalyst_registration_parameters },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "hash",
                |m: &CardanoTxAuxiliaryData| { &m.hash },
                |m: &mut CardanoTxAuxiliaryData| { &mut m.hash },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoTxAuxiliaryData>(
                "CardanoTxAuxiliaryData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoTxAuxiliaryData {
        static instance: ::protobuf::rt::LazyV2<CardanoTxAuxiliaryData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoTxAuxiliaryData::new)
    }
}

impl ::protobuf::Clear for CardanoTxAuxiliaryData {
    fn clear(&mut self) {
        self.catalyst_registration_parameters.clear();
        self.hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoTxAuxiliaryData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoTxAuxiliaryData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoTxMint {
    // message fields
    asset_groups_count: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoTxMint {
    fn default() -> &'a CardanoTxMint {
        <CardanoTxMint as ::protobuf::Message>::default_instance()
    }
}

impl CardanoTxMint {
    pub fn new() -> CardanoTxMint {
        ::std::default::Default::default()
    }

    // required uint32 asset_groups_count = 1;


    pub fn get_asset_groups_count(&self) -> u32 {
        self.asset_groups_count.unwrap_or(0)
    }
    pub fn clear_asset_groups_count(&mut self) {
        self.asset_groups_count = ::std::option::Option::None;
    }

    pub fn has_asset_groups_count(&self) -> bool {
        self.asset_groups_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_asset_groups_count(&mut self, v: u32) {
        self.asset_groups_count = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CardanoTxMint {
    fn is_initialized(&self) -> bool {
        if self.asset_groups_count.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.asset_groups_count = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.asset_groups_count {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.asset_groups_count {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoTxMint {
        CardanoTxMint::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "asset_groups_count",
                |m: &CardanoTxMint| { &m.asset_groups_count },
                |m: &mut CardanoTxMint| { &mut m.asset_groups_count },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoTxMint>(
                "CardanoTxMint",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoTxMint {
        static instance: ::protobuf::rt::LazyV2<CardanoTxMint> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoTxMint::new)
    }
}

impl ::protobuf::Clear for CardanoTxMint {
    fn clear(&mut self) {
        self.asset_groups_count = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoTxMint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoTxMint {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoTxItemAck {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoTxItemAck {
    fn default() -> &'a CardanoTxItemAck {
        <CardanoTxItemAck as ::protobuf::Message>::default_instance()
    }
}

impl CardanoTxItemAck {
    pub fn new() -> CardanoTxItemAck {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CardanoTxItemAck {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoTxItemAck {
        CardanoTxItemAck::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoTxItemAck>(
                "CardanoTxItemAck",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoTxItemAck {
        static instance: ::protobuf::rt::LazyV2<CardanoTxItemAck> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoTxItemAck::new)
    }
}

impl ::protobuf::Clear for CardanoTxItemAck {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoTxItemAck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoTxItemAck {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoTxAuxiliaryDataSupplement {
    // message fields
    field_type: ::std::option::Option<CardanoTxAuxiliaryDataSupplementType>,
    auxiliary_data_hash: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    catalyst_signature: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoTxAuxiliaryDataSupplement {
    fn default() -> &'a CardanoTxAuxiliaryDataSupplement {
        <CardanoTxAuxiliaryDataSupplement as ::protobuf::Message>::default_instance()
    }
}

impl CardanoTxAuxiliaryDataSupplement {
    pub fn new() -> CardanoTxAuxiliaryDataSupplement {
        ::std::default::Default::default()
    }

    // required .hw.trezor.messages.cardano.CardanoTxAuxiliaryDataSupplementType type = 1;


    pub fn get_field_type(&self) -> CardanoTxAuxiliaryDataSupplementType {
        self.field_type.unwrap_or(CardanoTxAuxiliaryDataSupplementType::NONE)
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: CardanoTxAuxiliaryDataSupplementType) {
        self.field_type = ::std::option::Option::Some(v);
    }

    // optional bytes auxiliary_data_hash = 2;


    pub fn get_auxiliary_data_hash(&self) -> &[u8] {
        match self.auxiliary_data_hash.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_auxiliary_data_hash(&mut self) {
        self.auxiliary_data_hash.clear();
    }

    pub fn has_auxiliary_data_hash(&self) -> bool {
        self.auxiliary_data_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_auxiliary_data_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.auxiliary_data_hash = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_auxiliary_data_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.auxiliary_data_hash.is_none() {
            self.auxiliary_data_hash.set_default();
        }
        self.auxiliary_data_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_auxiliary_data_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.auxiliary_data_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes catalyst_signature = 3;


    pub fn get_catalyst_signature(&self) -> &[u8] {
        match self.catalyst_signature.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_catalyst_signature(&mut self) {
        self.catalyst_signature.clear();
    }

    pub fn has_catalyst_signature(&self) -> bool {
        self.catalyst_signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_catalyst_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.catalyst_signature = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_catalyst_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.catalyst_signature.is_none() {
            self.catalyst_signature.set_default();
        }
        self.catalyst_signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_catalyst_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.catalyst_signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CardanoTxAuxiliaryDataSupplement {
    fn is_initialized(&self) -> bool {
        if self.field_type.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.auxiliary_data_hash)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.catalyst_signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_type {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(ref v) = self.auxiliary_data_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(ref v) = self.catalyst_signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_type {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.auxiliary_data_hash.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(ref v) = self.catalyst_signature.as_ref() {
            os.write_bytes(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoTxAuxiliaryDataSupplement {
        CardanoTxAuxiliaryDataSupplement::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CardanoTxAuxiliaryDataSupplementType>>(
                "type",
                |m: &CardanoTxAuxiliaryDataSupplement| { &m.field_type },
                |m: &mut CardanoTxAuxiliaryDataSupplement| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "auxiliary_data_hash",
                |m: &CardanoTxAuxiliaryDataSupplement| { &m.auxiliary_data_hash },
                |m: &mut CardanoTxAuxiliaryDataSupplement| { &mut m.auxiliary_data_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "catalyst_signature",
                |m: &CardanoTxAuxiliaryDataSupplement| { &m.catalyst_signature },
                |m: &mut CardanoTxAuxiliaryDataSupplement| { &mut m.catalyst_signature },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoTxAuxiliaryDataSupplement>(
                "CardanoTxAuxiliaryDataSupplement",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoTxAuxiliaryDataSupplement {
        static instance: ::protobuf::rt::LazyV2<CardanoTxAuxiliaryDataSupplement> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoTxAuxiliaryDataSupplement::new)
    }
}

impl ::protobuf::Clear for CardanoTxAuxiliaryDataSupplement {
    fn clear(&mut self) {
        self.field_type = ::std::option::Option::None;
        self.auxiliary_data_hash.clear();
        self.catalyst_signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoTxAuxiliaryDataSupplement {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoTxAuxiliaryDataSupplement {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoTxWitnessRequest {
    // message fields
    pub path: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoTxWitnessRequest {
    fn default() -> &'a CardanoTxWitnessRequest {
        <CardanoTxWitnessRequest as ::protobuf::Message>::default_instance()
    }
}

impl CardanoTxWitnessRequest {
    pub fn new() -> CardanoTxWitnessRequest {
        ::std::default::Default::default()
    }

    // repeated uint32 path = 1;


    pub fn get_path(&self) -> &[u32] {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::vec::Vec<u32>) {
        self.path = v;
    }

    // Mutable pointer to the field.
    pub fn mut_path(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.path, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CardanoTxWitnessRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.path {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.path {
            os.write_uint32(1, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoTxWitnessRequest {
        CardanoTxWitnessRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "path",
                |m: &CardanoTxWitnessRequest| { &m.path },
                |m: &mut CardanoTxWitnessRequest| { &mut m.path },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoTxWitnessRequest>(
                "CardanoTxWitnessRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoTxWitnessRequest {
        static instance: ::protobuf::rt::LazyV2<CardanoTxWitnessRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoTxWitnessRequest::new)
    }
}

impl ::protobuf::Clear for CardanoTxWitnessRequest {
    fn clear(&mut self) {
        self.path.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoTxWitnessRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoTxWitnessRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoTxWitnessResponse {
    // message fields
    field_type: ::std::option::Option<CardanoTxWitnessType>,
    pub_key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    signature: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    chain_code: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoTxWitnessResponse {
    fn default() -> &'a CardanoTxWitnessResponse {
        <CardanoTxWitnessResponse as ::protobuf::Message>::default_instance()
    }
}

impl CardanoTxWitnessResponse {
    pub fn new() -> CardanoTxWitnessResponse {
        ::std::default::Default::default()
    }

    // required .hw.trezor.messages.cardano.CardanoTxWitnessType type = 1;


    pub fn get_field_type(&self) -> CardanoTxWitnessType {
        self.field_type.unwrap_or(CardanoTxWitnessType::BYRON_WITNESS)
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: CardanoTxWitnessType) {
        self.field_type = ::std::option::Option::Some(v);
    }

    // required bytes pub_key = 2;


    pub fn get_pub_key(&self) -> &[u8] {
        match self.pub_key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_pub_key(&mut self) {
        self.pub_key.clear();
    }

    pub fn has_pub_key(&self) -> bool {
        self.pub_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pub_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.pub_key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pub_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.pub_key.is_none() {
            self.pub_key.set_default();
        }
        self.pub_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_pub_key(&mut self) -> ::std::vec::Vec<u8> {
        self.pub_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required bytes signature = 3;


    pub fn get_signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes chain_code = 4;


    pub fn get_chain_code(&self) -> &[u8] {
        match self.chain_code.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_chain_code(&mut self) {
        self.chain_code.clear();
    }

    pub fn has_chain_code(&self) -> bool {
        self.chain_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chain_code(&mut self, v: ::std::vec::Vec<u8>) {
        self.chain_code = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chain_code(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.chain_code.is_none() {
            self.chain_code.set_default();
        }
        self.chain_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_chain_code(&mut self) -> ::std::vec::Vec<u8> {
        self.chain_code.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CardanoTxWitnessResponse {
    fn is_initialized(&self) -> bool {
        if self.field_type.is_none() {
            return false;
        }
        if self.pub_key.is_none() {
            return false;
        }
        if self.signature.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.pub_key)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.signature)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.chain_code)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_type {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(ref v) = self.pub_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(ref v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        if let Some(ref v) = self.chain_code.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_type {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.pub_key.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(ref v) = self.signature.as_ref() {
            os.write_bytes(3, &v)?;
        }
        if let Some(ref v) = self.chain_code.as_ref() {
            os.write_bytes(4, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoTxWitnessResponse {
        CardanoTxWitnessResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CardanoTxWitnessType>>(
                "type",
                |m: &CardanoTxWitnessResponse| { &m.field_type },
                |m: &mut CardanoTxWitnessResponse| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "pub_key",
                |m: &CardanoTxWitnessResponse| { &m.pub_key },
                |m: &mut CardanoTxWitnessResponse| { &mut m.pub_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signature",
                |m: &CardanoTxWitnessResponse| { &m.signature },
                |m: &mut CardanoTxWitnessResponse| { &mut m.signature },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "chain_code",
                |m: &CardanoTxWitnessResponse| { &m.chain_code },
                |m: &mut CardanoTxWitnessResponse| { &mut m.chain_code },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoTxWitnessResponse>(
                "CardanoTxWitnessResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoTxWitnessResponse {
        static instance: ::protobuf::rt::LazyV2<CardanoTxWitnessResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoTxWitnessResponse::new)
    }
}

impl ::protobuf::Clear for CardanoTxWitnessResponse {
    fn clear(&mut self) {
        self.field_type = ::std::option::Option::None;
        self.pub_key.clear();
        self.signature.clear();
        self.chain_code.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoTxWitnessResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoTxWitnessResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoTxHostAck {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoTxHostAck {
    fn default() -> &'a CardanoTxHostAck {
        <CardanoTxHostAck as ::protobuf::Message>::default_instance()
    }
}

impl CardanoTxHostAck {
    pub fn new() -> CardanoTxHostAck {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CardanoTxHostAck {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoTxHostAck {
        CardanoTxHostAck::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoTxHostAck>(
                "CardanoTxHostAck",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoTxHostAck {
        static instance: ::protobuf::rt::LazyV2<CardanoTxHostAck> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoTxHostAck::new)
    }
}

impl ::protobuf::Clear for CardanoTxHostAck {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoTxHostAck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoTxHostAck {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoTxBodyHash {
    // message fields
    tx_hash: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoTxBodyHash {
    fn default() -> &'a CardanoTxBodyHash {
        <CardanoTxBodyHash as ::protobuf::Message>::default_instance()
    }
}

impl CardanoTxBodyHash {
    pub fn new() -> CardanoTxBodyHash {
        ::std::default::Default::default()
    }

    // required bytes tx_hash = 1;


    pub fn get_tx_hash(&self) -> &[u8] {
        match self.tx_hash.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_tx_hash(&mut self) {
        self.tx_hash.clear();
    }

    pub fn has_tx_hash(&self) -> bool {
        self.tx_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.tx_hash = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.tx_hash.is_none() {
            self.tx_hash.set_default();
        }
        self.tx_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_tx_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.tx_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CardanoTxBodyHash {
    fn is_initialized(&self) -> bool {
        if self.tx_hash.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.tx_hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.tx_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.tx_hash.as_ref() {
            os.write_bytes(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoTxBodyHash {
        CardanoTxBodyHash::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "tx_hash",
                |m: &CardanoTxBodyHash| { &m.tx_hash },
                |m: &mut CardanoTxBodyHash| { &mut m.tx_hash },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoTxBodyHash>(
                "CardanoTxBodyHash",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoTxBodyHash {
        static instance: ::protobuf::rt::LazyV2<CardanoTxBodyHash> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoTxBodyHash::new)
    }
}

impl ::protobuf::Clear for CardanoTxBodyHash {
    fn clear(&mut self) {
        self.tx_hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoTxBodyHash {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoTxBodyHash {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoSignTxFinished {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoSignTxFinished {
    fn default() -> &'a CardanoSignTxFinished {
        <CardanoSignTxFinished as ::protobuf::Message>::default_instance()
    }
}

impl CardanoSignTxFinished {
    pub fn new() -> CardanoSignTxFinished {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CardanoSignTxFinished {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoSignTxFinished {
        CardanoSignTxFinished::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoSignTxFinished>(
                "CardanoSignTxFinished",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoSignTxFinished {
        static instance: ::protobuf::rt::LazyV2<CardanoSignTxFinished> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoSignTxFinished::new)
    }
}

impl ::protobuf::Clear for CardanoSignTxFinished {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoSignTxFinished {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoSignTxFinished {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoSignTx {
    // message fields
    pub inputs: ::protobuf::RepeatedField<CardanoSignTx_CardanoTxInputType>,
    pub outputs: ::protobuf::RepeatedField<CardanoSignTx_CardanoTxOutputType>,
    protocol_magic: ::std::option::Option<u32>,
    fee: ::std::option::Option<u64>,
    ttl: ::std::option::Option<u64>,
    network_id: ::std::option::Option<u32>,
    pub certificates: ::protobuf::RepeatedField<CardanoSignTx_CardanoTxCertificateType>,
    pub withdrawals: ::protobuf::RepeatedField<CardanoSignTx_CardanoTxWithdrawalType>,
    validity_interval_start: ::std::option::Option<u64>,
    pub auxiliary_data: ::protobuf::SingularPtrField<CardanoSignTx_CardanoTxAuxiliaryDataType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoSignTx {
    fn default() -> &'a CardanoSignTx {
        <CardanoSignTx as ::protobuf::Message>::default_instance()
    }
}

impl CardanoSignTx {
    pub fn new() -> CardanoSignTx {
        ::std::default::Default::default()
    }

    // repeated .hw.trezor.messages.cardano.CardanoSignTx.CardanoTxInputType inputs = 1;


    pub fn get_inputs(&self) -> &[CardanoSignTx_CardanoTxInputType] {
        &self.inputs
    }
    pub fn clear_inputs(&mut self) {
        self.inputs.clear();
    }

    // Param is passed by value, moved
    pub fn set_inputs(&mut self, v: ::protobuf::RepeatedField<CardanoSignTx_CardanoTxInputType>) {
        self.inputs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_inputs(&mut self) -> &mut ::protobuf::RepeatedField<CardanoSignTx_CardanoTxInputType> {
        &mut self.inputs
    }

    // Take field
    pub fn take_inputs(&mut self) -> ::protobuf::RepeatedField<CardanoSignTx_CardanoTxInputType> {
        ::std::mem::replace(&mut self.inputs, ::protobuf::RepeatedField::new())
    }

    // repeated .hw.trezor.messages.cardano.CardanoSignTx.CardanoTxOutputType outputs = 2;


    pub fn get_outputs(&self) -> &[CardanoSignTx_CardanoTxOutputType] {
        &self.outputs
    }
    pub fn clear_outputs(&mut self) {
        self.outputs.clear();
    }

    // Param is passed by value, moved
    pub fn set_outputs(&mut self, v: ::protobuf::RepeatedField<CardanoSignTx_CardanoTxOutputType>) {
        self.outputs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_outputs(&mut self) -> &mut ::protobuf::RepeatedField<CardanoSignTx_CardanoTxOutputType> {
        &mut self.outputs
    }

    // Take field
    pub fn take_outputs(&mut self) -> ::protobuf::RepeatedField<CardanoSignTx_CardanoTxOutputType> {
        ::std::mem::replace(&mut self.outputs, ::protobuf::RepeatedField::new())
    }

    // required uint32 protocol_magic = 5;


    pub fn get_protocol_magic(&self) -> u32 {
        self.protocol_magic.unwrap_or(0)
    }
    pub fn clear_protocol_magic(&mut self) {
        self.protocol_magic = ::std::option::Option::None;
    }

    pub fn has_protocol_magic(&self) -> bool {
        self.protocol_magic.is_some()
    }

    // Param is passed by value, moved
    pub fn set_protocol_magic(&mut self, v: u32) {
        self.protocol_magic = ::std::option::Option::Some(v);
    }

    // required uint64 fee = 6;


    pub fn get_fee(&self) -> u64 {
        self.fee.unwrap_or(0)
    }
    pub fn clear_fee(&mut self) {
        self.fee = ::std::option::Option::None;
    }

    pub fn has_fee(&self) -> bool {
        self.fee.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fee(&mut self, v: u64) {
        self.fee = ::std::option::Option::Some(v);
    }

    // optional uint64 ttl = 7;


    pub fn get_ttl(&self) -> u64 {
        self.ttl.unwrap_or(0)
    }
    pub fn clear_ttl(&mut self) {
        self.ttl = ::std::option::Option::None;
    }

    pub fn has_ttl(&self) -> bool {
        self.ttl.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ttl(&mut self, v: u64) {
        self.ttl = ::std::option::Option::Some(v);
    }

    // required uint32 network_id = 8;


    pub fn get_network_id(&self) -> u32 {
        self.network_id.unwrap_or(0)
    }
    pub fn clear_network_id(&mut self) {
        self.network_id = ::std::option::Option::None;
    }

    pub fn has_network_id(&self) -> bool {
        self.network_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_network_id(&mut self, v: u32) {
        self.network_id = ::std::option::Option::Some(v);
    }

    // repeated .hw.trezor.messages.cardano.CardanoSignTx.CardanoTxCertificateType certificates = 9;


    pub fn get_certificates(&self) -> &[CardanoSignTx_CardanoTxCertificateType] {
        &self.certificates
    }
    pub fn clear_certificates(&mut self) {
        self.certificates.clear();
    }

    // Param is passed by value, moved
    pub fn set_certificates(&mut self, v: ::protobuf::RepeatedField<CardanoSignTx_CardanoTxCertificateType>) {
        self.certificates = v;
    }

    // Mutable pointer to the field.
    pub fn mut_certificates(&mut self) -> &mut ::protobuf::RepeatedField<CardanoSignTx_CardanoTxCertificateType> {
        &mut self.certificates
    }

    // Take field
    pub fn take_certificates(&mut self) -> ::protobuf::RepeatedField<CardanoSignTx_CardanoTxCertificateType> {
        ::std::mem::replace(&mut self.certificates, ::protobuf::RepeatedField::new())
    }

    // repeated .hw.trezor.messages.cardano.CardanoSignTx.CardanoTxWithdrawalType withdrawals = 10;


    pub fn get_withdrawals(&self) -> &[CardanoSignTx_CardanoTxWithdrawalType] {
        &self.withdrawals
    }
    pub fn clear_withdrawals(&mut self) {
        self.withdrawals.clear();
    }

    // Param is passed by value, moved
    pub fn set_withdrawals(&mut self, v: ::protobuf::RepeatedField<CardanoSignTx_CardanoTxWithdrawalType>) {
        self.withdrawals = v;
    }

    // Mutable pointer to the field.
    pub fn mut_withdrawals(&mut self) -> &mut ::protobuf::RepeatedField<CardanoSignTx_CardanoTxWithdrawalType> {
        &mut self.withdrawals
    }

    // Take field
    pub fn take_withdrawals(&mut self) -> ::protobuf::RepeatedField<CardanoSignTx_CardanoTxWithdrawalType> {
        ::std::mem::replace(&mut self.withdrawals, ::protobuf::RepeatedField::new())
    }

    // optional uint64 validity_interval_start = 12;


    pub fn get_validity_interval_start(&self) -> u64 {
        self.validity_interval_start.unwrap_or(0)
    }
    pub fn clear_validity_interval_start(&mut self) {
        self.validity_interval_start = ::std::option::Option::None;
    }

    pub fn has_validity_interval_start(&self) -> bool {
        self.validity_interval_start.is_some()
    }

    // Param is passed by value, moved
    pub fn set_validity_interval_start(&mut self, v: u64) {
        self.validity_interval_start = ::std::option::Option::Some(v);
    }

    // optional .hw.trezor.messages.cardano.CardanoSignTx.CardanoTxAuxiliaryDataType auxiliary_data = 13;


    pub fn get_auxiliary_data(&self) -> &CardanoSignTx_CardanoTxAuxiliaryDataType {
        self.auxiliary_data.as_ref().unwrap_or_else(|| <CardanoSignTx_CardanoTxAuxiliaryDataType as ::protobuf::Message>::default_instance())
    }
    pub fn clear_auxiliary_data(&mut self) {
        self.auxiliary_data.clear();
    }

    pub fn has_auxiliary_data(&self) -> bool {
        self.auxiliary_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_auxiliary_data(&mut self, v: CardanoSignTx_CardanoTxAuxiliaryDataType) {
        self.auxiliary_data = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_auxiliary_data(&mut self) -> &mut CardanoSignTx_CardanoTxAuxiliaryDataType {
        if self.auxiliary_data.is_none() {
            self.auxiliary_data.set_default();
        }
        self.auxiliary_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_auxiliary_data(&mut self) -> CardanoSignTx_CardanoTxAuxiliaryDataType {
        self.auxiliary_data.take().unwrap_or_else(|| CardanoSignTx_CardanoTxAuxiliaryDataType::new())
    }
}

impl ::protobuf::Message for CardanoSignTx {
    fn is_initialized(&self) -> bool {
        if self.protocol_magic.is_none() {
            return false;
        }
        if self.fee.is_none() {
            return false;
        }
        if self.network_id.is_none() {
            return false;
        }
        for v in &self.inputs {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.outputs {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.certificates {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.withdrawals {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.auxiliary_data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.inputs)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.outputs)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.protocol_magic = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.fee = ::std::option::Option::Some(tmp);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.ttl = ::std::option::Option::Some(tmp);
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.network_id = ::std::option::Option::Some(tmp);
                },
                9 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.certificates)?;
                },
                10 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.withdrawals)?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.validity_interval_start = ::std::option::Option::Some(tmp);
                },
                13 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.auxiliary_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.inputs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.outputs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.protocol_magic {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.fee {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.ttl {
            my_size += ::protobuf::rt::value_size(7, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.network_id {
            my_size += ::protobuf::rt::value_size(8, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.certificates {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.withdrawals {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.validity_interval_start {
            my_size += ::protobuf::rt::value_size(12, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.auxiliary_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.inputs {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.outputs {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.protocol_magic {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.fee {
            os.write_uint64(6, v)?;
        }
        if let Some(v) = self.ttl {
            os.write_uint64(7, v)?;
        }
        if let Some(v) = self.network_id {
            os.write_uint32(8, v)?;
        }
        for v in &self.certificates {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.withdrawals {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.validity_interval_start {
            os.write_uint64(12, v)?;
        }
        if let Some(ref v) = self.auxiliary_data.as_ref() {
            os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoSignTx {
        CardanoSignTx::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CardanoSignTx_CardanoTxInputType>>(
                "inputs",
                |m: &CardanoSignTx| { &m.inputs },
                |m: &mut CardanoSignTx| { &mut m.inputs },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CardanoSignTx_CardanoTxOutputType>>(
                "outputs",
                |m: &CardanoSignTx| { &m.outputs },
                |m: &mut CardanoSignTx| { &mut m.outputs },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "protocol_magic",
                |m: &CardanoSignTx| { &m.protocol_magic },
                |m: &mut CardanoSignTx| { &mut m.protocol_magic },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "fee",
                |m: &CardanoSignTx| { &m.fee },
                |m: &mut CardanoSignTx| { &mut m.fee },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "ttl",
                |m: &CardanoSignTx| { &m.ttl },
                |m: &mut CardanoSignTx| { &mut m.ttl },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "network_id",
                |m: &CardanoSignTx| { &m.network_id },
                |m: &mut CardanoSignTx| { &mut m.network_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CardanoSignTx_CardanoTxCertificateType>>(
                "certificates",
                |m: &CardanoSignTx| { &m.certificates },
                |m: &mut CardanoSignTx| { &mut m.certificates },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CardanoSignTx_CardanoTxWithdrawalType>>(
                "withdrawals",
                |m: &CardanoSignTx| { &m.withdrawals },
                |m: &mut CardanoSignTx| { &mut m.withdrawals },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "validity_interval_start",
                |m: &CardanoSignTx| { &m.validity_interval_start },
                |m: &mut CardanoSignTx| { &mut m.validity_interval_start },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CardanoSignTx_CardanoTxAuxiliaryDataType>>(
                "auxiliary_data",
                |m: &CardanoSignTx| { &m.auxiliary_data },
                |m: &mut CardanoSignTx| { &mut m.auxiliary_data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoSignTx>(
                "CardanoSignTx",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoSignTx {
        static instance: ::protobuf::rt::LazyV2<CardanoSignTx> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoSignTx::new)
    }
}

impl ::protobuf::Clear for CardanoSignTx {
    fn clear(&mut self) {
        self.inputs.clear();
        self.outputs.clear();
        self.protocol_magic = ::std::option::Option::None;
        self.fee = ::std::option::Option::None;
        self.ttl = ::std::option::Option::None;
        self.network_id = ::std::option::Option::None;
        self.certificates.clear();
        self.withdrawals.clear();
        self.validity_interval_start = ::std::option::Option::None;
        self.auxiliary_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoSignTx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoSignTx {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoSignTx_CardanoTxInputType {
    // message fields
    pub address_n: ::std::vec::Vec<u32>,
    prev_hash: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    prev_index: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoSignTx_CardanoTxInputType {
    fn default() -> &'a CardanoSignTx_CardanoTxInputType {
        <CardanoSignTx_CardanoTxInputType as ::protobuf::Message>::default_instance()
    }
}

impl CardanoSignTx_CardanoTxInputType {
    pub fn new() -> CardanoSignTx_CardanoTxInputType {
        ::std::default::Default::default()
    }

    // repeated uint32 address_n = 1;


    pub fn get_address_n(&self) -> &[u32] {
        &self.address_n
    }
    pub fn clear_address_n(&mut self) {
        self.address_n.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_n(&mut self, v: ::std::vec::Vec<u32>) {
        self.address_n = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_n(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.address_n
    }

    // Take field
    pub fn take_address_n(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.address_n, ::std::vec::Vec::new())
    }

    // required bytes prev_hash = 2;


    pub fn get_prev_hash(&self) -> &[u8] {
        match self.prev_hash.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_prev_hash(&mut self) {
        self.prev_hash.clear();
    }

    pub fn has_prev_hash(&self) -> bool {
        self.prev_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_prev_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.prev_hash = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prev_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.prev_hash.is_none() {
            self.prev_hash.set_default();
        }
        self.prev_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_prev_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.prev_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required uint32 prev_index = 3;


    pub fn get_prev_index(&self) -> u32 {
        self.prev_index.unwrap_or(0)
    }
    pub fn clear_prev_index(&mut self) {
        self.prev_index = ::std::option::Option::None;
    }

    pub fn has_prev_index(&self) -> bool {
        self.prev_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_prev_index(&mut self, v: u32) {
        self.prev_index = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CardanoSignTx_CardanoTxInputType {
    fn is_initialized(&self) -> bool {
        if self.prev_hash.is_none() {
            return false;
        }
        if self.prev_index.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.address_n)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.prev_hash)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.prev_index = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.address_n {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(ref v) = self.prev_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.prev_index {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.address_n {
            os.write_uint32(1, *v)?;
        };
        if let Some(ref v) = self.prev_hash.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(v) = self.prev_index {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoSignTx_CardanoTxInputType {
        CardanoSignTx_CardanoTxInputType::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "address_n",
                |m: &CardanoSignTx_CardanoTxInputType| { &m.address_n },
                |m: &mut CardanoSignTx_CardanoTxInputType| { &mut m.address_n },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "prev_hash",
                |m: &CardanoSignTx_CardanoTxInputType| { &m.prev_hash },
                |m: &mut CardanoSignTx_CardanoTxInputType| { &mut m.prev_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "prev_index",
                |m: &CardanoSignTx_CardanoTxInputType| { &m.prev_index },
                |m: &mut CardanoSignTx_CardanoTxInputType| { &mut m.prev_index },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoSignTx_CardanoTxInputType>(
                "CardanoSignTx.CardanoTxInputType",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoSignTx_CardanoTxInputType {
        static instance: ::protobuf::rt::LazyV2<CardanoSignTx_CardanoTxInputType> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoSignTx_CardanoTxInputType::new)
    }
}

impl ::protobuf::Clear for CardanoSignTx_CardanoTxInputType {
    fn clear(&mut self) {
        self.address_n.clear();
        self.prev_hash.clear();
        self.prev_index = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoSignTx_CardanoTxInputType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoSignTx_CardanoTxInputType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoSignTx_CardanoTxOutputType {
    // message fields
    address: ::protobuf::SingularField<::std::string::String>,
    amount: ::std::option::Option<u64>,
    pub address_parameters: ::protobuf::SingularPtrField<CardanoAddressParametersType>,
    pub token_bundle: ::protobuf::RepeatedField<CardanoSignTx_CardanoAssetGroupType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoSignTx_CardanoTxOutputType {
    fn default() -> &'a CardanoSignTx_CardanoTxOutputType {
        <CardanoSignTx_CardanoTxOutputType as ::protobuf::Message>::default_instance()
    }
}

impl CardanoSignTx_CardanoTxOutputType {
    pub fn new() -> CardanoSignTx_CardanoTxOutputType {
        ::std::default::Default::default()
    }

    // optional string address = 1;


    pub fn get_address(&self) -> &str {
        match self.address.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        if self.address.is_none() {
            self.address.set_default();
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        self.address.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required uint64 amount = 3;


    pub fn get_amount(&self) -> u64 {
        self.amount.unwrap_or(0)
    }
    pub fn clear_amount(&mut self) {
        self.amount = ::std::option::Option::None;
    }

    pub fn has_amount(&self) -> bool {
        self.amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: u64) {
        self.amount = ::std::option::Option::Some(v);
    }

    // optional .hw.trezor.messages.cardano.CardanoAddressParametersType address_parameters = 4;


    pub fn get_address_parameters(&self) -> &CardanoAddressParametersType {
        self.address_parameters.as_ref().unwrap_or_else(|| <CardanoAddressParametersType as ::protobuf::Message>::default_instance())
    }
    pub fn clear_address_parameters(&mut self) {
        self.address_parameters.clear();
    }

    pub fn has_address_parameters(&self) -> bool {
        self.address_parameters.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address_parameters(&mut self, v: CardanoAddressParametersType) {
        self.address_parameters = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address_parameters(&mut self) -> &mut CardanoAddressParametersType {
        if self.address_parameters.is_none() {
            self.address_parameters.set_default();
        }
        self.address_parameters.as_mut().unwrap()
    }

    // Take field
    pub fn take_address_parameters(&mut self) -> CardanoAddressParametersType {
        self.address_parameters.take().unwrap_or_else(|| CardanoAddressParametersType::new())
    }

    // repeated .hw.trezor.messages.cardano.CardanoSignTx.CardanoAssetGroupType token_bundle = 5;


    pub fn get_token_bundle(&self) -> &[CardanoSignTx_CardanoAssetGroupType] {
        &self.token_bundle
    }
    pub fn clear_token_bundle(&mut self) {
        self.token_bundle.clear();
    }

    // Param is passed by value, moved
    pub fn set_token_bundle(&mut self, v: ::protobuf::RepeatedField<CardanoSignTx_CardanoAssetGroupType>) {
        self.token_bundle = v;
    }

    // Mutable pointer to the field.
    pub fn mut_token_bundle(&mut self) -> &mut ::protobuf::RepeatedField<CardanoSignTx_CardanoAssetGroupType> {
        &mut self.token_bundle
    }

    // Take field
    pub fn take_token_bundle(&mut self) -> ::protobuf::RepeatedField<CardanoSignTx_CardanoAssetGroupType> {
        ::std::mem::replace(&mut self.token_bundle, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CardanoSignTx_CardanoTxOutputType {
    fn is_initialized(&self) -> bool {
        if self.amount.is_none() {
            return false;
        }
        for v in &self.address_parameters {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.token_bundle {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.address)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.amount = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.address_parameters)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.token_bundle)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.address.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.amount {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.address_parameters.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.token_bundle {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.address.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.amount {
            os.write_uint64(3, v)?;
        }
        if let Some(ref v) = self.address_parameters.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.token_bundle {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoSignTx_CardanoTxOutputType {
        CardanoSignTx_CardanoTxOutputType::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &CardanoSignTx_CardanoTxOutputType| { &m.address },
                |m: &mut CardanoSignTx_CardanoTxOutputType| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "amount",
                |m: &CardanoSignTx_CardanoTxOutputType| { &m.amount },
                |m: &mut CardanoSignTx_CardanoTxOutputType| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CardanoAddressParametersType>>(
                "address_parameters",
                |m: &CardanoSignTx_CardanoTxOutputType| { &m.address_parameters },
                |m: &mut CardanoSignTx_CardanoTxOutputType| { &mut m.address_parameters },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CardanoSignTx_CardanoAssetGroupType>>(
                "token_bundle",
                |m: &CardanoSignTx_CardanoTxOutputType| { &m.token_bundle },
                |m: &mut CardanoSignTx_CardanoTxOutputType| { &mut m.token_bundle },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoSignTx_CardanoTxOutputType>(
                "CardanoSignTx.CardanoTxOutputType",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoSignTx_CardanoTxOutputType {
        static instance: ::protobuf::rt::LazyV2<CardanoSignTx_CardanoTxOutputType> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoSignTx_CardanoTxOutputType::new)
    }
}

impl ::protobuf::Clear for CardanoSignTx_CardanoTxOutputType {
    fn clear(&mut self) {
        self.address.clear();
        self.amount = ::std::option::Option::None;
        self.address_parameters.clear();
        self.token_bundle.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoSignTx_CardanoTxOutputType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoSignTx_CardanoTxOutputType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoSignTx_CardanoAssetGroupType {
    // message fields
    policy_id: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    pub tokens: ::protobuf::RepeatedField<CardanoSignTx_CardanoTokenType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoSignTx_CardanoAssetGroupType {
    fn default() -> &'a CardanoSignTx_CardanoAssetGroupType {
        <CardanoSignTx_CardanoAssetGroupType as ::protobuf::Message>::default_instance()
    }
}

impl CardanoSignTx_CardanoAssetGroupType {
    pub fn new() -> CardanoSignTx_CardanoAssetGroupType {
        ::std::default::Default::default()
    }

    // required bytes policy_id = 1;


    pub fn get_policy_id(&self) -> &[u8] {
        match self.policy_id.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_policy_id(&mut self) {
        self.policy_id.clear();
    }

    pub fn has_policy_id(&self) -> bool {
        self.policy_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_policy_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.policy_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_policy_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.policy_id.is_none() {
            self.policy_id.set_default();
        }
        self.policy_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_policy_id(&mut self) -> ::std::vec::Vec<u8> {
        self.policy_id.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // repeated .hw.trezor.messages.cardano.CardanoSignTx.CardanoTokenType tokens = 2;


    pub fn get_tokens(&self) -> &[CardanoSignTx_CardanoTokenType] {
        &self.tokens
    }
    pub fn clear_tokens(&mut self) {
        self.tokens.clear();
    }

    // Param is passed by value, moved
    pub fn set_tokens(&mut self, v: ::protobuf::RepeatedField<CardanoSignTx_CardanoTokenType>) {
        self.tokens = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tokens(&mut self) -> &mut ::protobuf::RepeatedField<CardanoSignTx_CardanoTokenType> {
        &mut self.tokens
    }

    // Take field
    pub fn take_tokens(&mut self) -> ::protobuf::RepeatedField<CardanoSignTx_CardanoTokenType> {
        ::std::mem::replace(&mut self.tokens, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CardanoSignTx_CardanoAssetGroupType {
    fn is_initialized(&self) -> bool {
        if self.policy_id.is_none() {
            return false;
        }
        for v in &self.tokens {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.policy_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tokens)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.policy_id.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        for value in &self.tokens {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.policy_id.as_ref() {
            os.write_bytes(1, &v)?;
        }
        for v in &self.tokens {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoSignTx_CardanoAssetGroupType {
        CardanoSignTx_CardanoAssetGroupType::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "policy_id",
                |m: &CardanoSignTx_CardanoAssetGroupType| { &m.policy_id },
                |m: &mut CardanoSignTx_CardanoAssetGroupType| { &mut m.policy_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CardanoSignTx_CardanoTokenType>>(
                "tokens",
                |m: &CardanoSignTx_CardanoAssetGroupType| { &m.tokens },
                |m: &mut CardanoSignTx_CardanoAssetGroupType| { &mut m.tokens },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoSignTx_CardanoAssetGroupType>(
                "CardanoSignTx.CardanoAssetGroupType",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoSignTx_CardanoAssetGroupType {
        static instance: ::protobuf::rt::LazyV2<CardanoSignTx_CardanoAssetGroupType> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoSignTx_CardanoAssetGroupType::new)
    }
}

impl ::protobuf::Clear for CardanoSignTx_CardanoAssetGroupType {
    fn clear(&mut self) {
        self.policy_id.clear();
        self.tokens.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoSignTx_CardanoAssetGroupType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoSignTx_CardanoAssetGroupType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoSignTx_CardanoTokenType {
    // message fields
    asset_name_bytes: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    amount: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoSignTx_CardanoTokenType {
    fn default() -> &'a CardanoSignTx_CardanoTokenType {
        <CardanoSignTx_CardanoTokenType as ::protobuf::Message>::default_instance()
    }
}

impl CardanoSignTx_CardanoTokenType {
    pub fn new() -> CardanoSignTx_CardanoTokenType {
        ::std::default::Default::default()
    }

    // required bytes asset_name_bytes = 1;


    pub fn get_asset_name_bytes(&self) -> &[u8] {
        match self.asset_name_bytes.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_asset_name_bytes(&mut self) {
        self.asset_name_bytes.clear();
    }

    pub fn has_asset_name_bytes(&self) -> bool {
        self.asset_name_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_asset_name_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.asset_name_bytes = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset_name_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.asset_name_bytes.is_none() {
            self.asset_name_bytes.set_default();
        }
        self.asset_name_bytes.as_mut().unwrap()
    }

    // Take field
    pub fn take_asset_name_bytes(&mut self) -> ::std::vec::Vec<u8> {
        self.asset_name_bytes.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required uint64 amount = 2;


    pub fn get_amount(&self) -> u64 {
        self.amount.unwrap_or(0)
    }
    pub fn clear_amount(&mut self) {
        self.amount = ::std::option::Option::None;
    }

    pub fn has_amount(&self) -> bool {
        self.amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: u64) {
        self.amount = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CardanoSignTx_CardanoTokenType {
    fn is_initialized(&self) -> bool {
        if self.asset_name_bytes.is_none() {
            return false;
        }
        if self.amount.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.asset_name_bytes)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.amount = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.asset_name_bytes.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.amount {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.asset_name_bytes.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(v) = self.amount {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoSignTx_CardanoTokenType {
        CardanoSignTx_CardanoTokenType::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "asset_name_bytes",
                |m: &CardanoSignTx_CardanoTokenType| { &m.asset_name_bytes },
                |m: &mut CardanoSignTx_CardanoTokenType| { &mut m.asset_name_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "amount",
                |m: &CardanoSignTx_CardanoTokenType| { &m.amount },
                |m: &mut CardanoSignTx_CardanoTokenType| { &mut m.amount },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoSignTx_CardanoTokenType>(
                "CardanoSignTx.CardanoTokenType",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoSignTx_CardanoTokenType {
        static instance: ::protobuf::rt::LazyV2<CardanoSignTx_CardanoTokenType> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoSignTx_CardanoTokenType::new)
    }
}

impl ::protobuf::Clear for CardanoSignTx_CardanoTokenType {
    fn clear(&mut self) {
        self.asset_name_bytes.clear();
        self.amount = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoSignTx_CardanoTokenType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoSignTx_CardanoTokenType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoSignTx_CardanoPoolOwnerType {
    // message fields
    pub staking_key_path: ::std::vec::Vec<u32>,
    staking_key_hash: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoSignTx_CardanoPoolOwnerType {
    fn default() -> &'a CardanoSignTx_CardanoPoolOwnerType {
        <CardanoSignTx_CardanoPoolOwnerType as ::protobuf::Message>::default_instance()
    }
}

impl CardanoSignTx_CardanoPoolOwnerType {
    pub fn new() -> CardanoSignTx_CardanoPoolOwnerType {
        ::std::default::Default::default()
    }

    // repeated uint32 staking_key_path = 1;


    pub fn get_staking_key_path(&self) -> &[u32] {
        &self.staking_key_path
    }
    pub fn clear_staking_key_path(&mut self) {
        self.staking_key_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_staking_key_path(&mut self, v: ::std::vec::Vec<u32>) {
        self.staking_key_path = v;
    }

    // Mutable pointer to the field.
    pub fn mut_staking_key_path(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.staking_key_path
    }

    // Take field
    pub fn take_staking_key_path(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.staking_key_path, ::std::vec::Vec::new())
    }

    // optional bytes staking_key_hash = 2;


    pub fn get_staking_key_hash(&self) -> &[u8] {
        match self.staking_key_hash.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_staking_key_hash(&mut self) {
        self.staking_key_hash.clear();
    }

    pub fn has_staking_key_hash(&self) -> bool {
        self.staking_key_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_staking_key_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.staking_key_hash = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_staking_key_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.staking_key_hash.is_none() {
            self.staking_key_hash.set_default();
        }
        self.staking_key_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_staking_key_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.staking_key_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CardanoSignTx_CardanoPoolOwnerType {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.staking_key_path)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.staking_key_hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.staking_key_path {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(ref v) = self.staking_key_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.staking_key_path {
            os.write_uint32(1, *v)?;
        };
        if let Some(ref v) = self.staking_key_hash.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoSignTx_CardanoPoolOwnerType {
        CardanoSignTx_CardanoPoolOwnerType::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "staking_key_path",
                |m: &CardanoSignTx_CardanoPoolOwnerType| { &m.staking_key_path },
                |m: &mut CardanoSignTx_CardanoPoolOwnerType| { &mut m.staking_key_path },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "staking_key_hash",
                |m: &CardanoSignTx_CardanoPoolOwnerType| { &m.staking_key_hash },
                |m: &mut CardanoSignTx_CardanoPoolOwnerType| { &mut m.staking_key_hash },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoSignTx_CardanoPoolOwnerType>(
                "CardanoSignTx.CardanoPoolOwnerType",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoSignTx_CardanoPoolOwnerType {
        static instance: ::protobuf::rt::LazyV2<CardanoSignTx_CardanoPoolOwnerType> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoSignTx_CardanoPoolOwnerType::new)
    }
}

impl ::protobuf::Clear for CardanoSignTx_CardanoPoolOwnerType {
    fn clear(&mut self) {
        self.staking_key_path.clear();
        self.staking_key_hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoSignTx_CardanoPoolOwnerType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoSignTx_CardanoPoolOwnerType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoSignTx_CardanoPoolRelayParametersType {
    // message fields
    field_type: ::std::option::Option<CardanoPoolRelayType>,
    ipv4_address: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    ipv6_address: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    host_name: ::protobuf::SingularField<::std::string::String>,
    port: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoSignTx_CardanoPoolRelayParametersType {
    fn default() -> &'a CardanoSignTx_CardanoPoolRelayParametersType {
        <CardanoSignTx_CardanoPoolRelayParametersType as ::protobuf::Message>::default_instance()
    }
}

impl CardanoSignTx_CardanoPoolRelayParametersType {
    pub fn new() -> CardanoSignTx_CardanoPoolRelayParametersType {
        ::std::default::Default::default()
    }

    // required .hw.trezor.messages.cardano.CardanoPoolRelayType type = 1;


    pub fn get_field_type(&self) -> CardanoPoolRelayType {
        self.field_type.unwrap_or(CardanoPoolRelayType::SINGLE_HOST_IP)
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: CardanoPoolRelayType) {
        self.field_type = ::std::option::Option::Some(v);
    }

    // optional bytes ipv4_address = 2;


    pub fn get_ipv4_address(&self) -> &[u8] {
        match self.ipv4_address.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_ipv4_address(&mut self) {
        self.ipv4_address.clear();
    }

    pub fn has_ipv4_address(&self) -> bool {
        self.ipv4_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ipv4_address(&mut self, v: ::std::vec::Vec<u8>) {
        self.ipv4_address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ipv4_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.ipv4_address.is_none() {
            self.ipv4_address.set_default();
        }
        self.ipv4_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_ipv4_address(&mut self) -> ::std::vec::Vec<u8> {
        self.ipv4_address.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes ipv6_address = 3;


    pub fn get_ipv6_address(&self) -> &[u8] {
        match self.ipv6_address.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_ipv6_address(&mut self) {
        self.ipv6_address.clear();
    }

    pub fn has_ipv6_address(&self) -> bool {
        self.ipv6_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ipv6_address(&mut self, v: ::std::vec::Vec<u8>) {
        self.ipv6_address = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ipv6_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.ipv6_address.is_none() {
            self.ipv6_address.set_default();
        }
        self.ipv6_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_ipv6_address(&mut self) -> ::std::vec::Vec<u8> {
        self.ipv6_address.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional string host_name = 4;


    pub fn get_host_name(&self) -> &str {
        match self.host_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_host_name(&mut self) {
        self.host_name.clear();
    }

    pub fn has_host_name(&self) -> bool {
        self.host_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_host_name(&mut self, v: ::std::string::String) {
        self.host_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_host_name(&mut self) -> &mut ::std::string::String {
        if self.host_name.is_none() {
            self.host_name.set_default();
        }
        self.host_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_host_name(&mut self) -> ::std::string::String {
        self.host_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 port = 5;


    pub fn get_port(&self) -> u32 {
        self.port.unwrap_or(0)
    }
    pub fn clear_port(&mut self) {
        self.port = ::std::option::Option::None;
    }

    pub fn has_port(&self) -> bool {
        self.port.is_some()
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: u32) {
        self.port = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CardanoSignTx_CardanoPoolRelayParametersType {
    fn is_initialized(&self) -> bool {
        if self.field_type.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.ipv4_address)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.ipv6_address)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.host_name)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.port = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_type {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(ref v) = self.ipv4_address.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(ref v) = self.ipv6_address.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        if let Some(ref v) = self.host_name.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.port {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_type {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.ipv4_address.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(ref v) = self.ipv6_address.as_ref() {
            os.write_bytes(3, &v)?;
        }
        if let Some(ref v) = self.host_name.as_ref() {
            os.write_string(4, &v)?;
        }
        if let Some(v) = self.port {
            os.write_uint32(5, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoSignTx_CardanoPoolRelayParametersType {
        CardanoSignTx_CardanoPoolRelayParametersType::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CardanoPoolRelayType>>(
                "type",
                |m: &CardanoSignTx_CardanoPoolRelayParametersType| { &m.field_type },
                |m: &mut CardanoSignTx_CardanoPoolRelayParametersType| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "ipv4_address",
                |m: &CardanoSignTx_CardanoPoolRelayParametersType| { &m.ipv4_address },
                |m: &mut CardanoSignTx_CardanoPoolRelayParametersType| { &mut m.ipv4_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "ipv6_address",
                |m: &CardanoSignTx_CardanoPoolRelayParametersType| { &m.ipv6_address },
                |m: &mut CardanoSignTx_CardanoPoolRelayParametersType| { &mut m.ipv6_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "host_name",
                |m: &CardanoSignTx_CardanoPoolRelayParametersType| { &m.host_name },
                |m: &mut CardanoSignTx_CardanoPoolRelayParametersType| { &mut m.host_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "port",
                |m: &CardanoSignTx_CardanoPoolRelayParametersType| { &m.port },
                |m: &mut CardanoSignTx_CardanoPoolRelayParametersType| { &mut m.port },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoSignTx_CardanoPoolRelayParametersType>(
                "CardanoSignTx.CardanoPoolRelayParametersType",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoSignTx_CardanoPoolRelayParametersType {
        static instance: ::protobuf::rt::LazyV2<CardanoSignTx_CardanoPoolRelayParametersType> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoSignTx_CardanoPoolRelayParametersType::new)
    }
}

impl ::protobuf::Clear for CardanoSignTx_CardanoPoolRelayParametersType {
    fn clear(&mut self) {
        self.field_type = ::std::option::Option::None;
        self.ipv4_address.clear();
        self.ipv6_address.clear();
        self.host_name.clear();
        self.port = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoSignTx_CardanoPoolRelayParametersType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoSignTx_CardanoPoolRelayParametersType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoSignTx_CardanoTxCertificateType {
    // message fields
    field_type: ::std::option::Option<CardanoCertificateType>,
    pub path: ::std::vec::Vec<u32>,
    pool: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    pub pool_parameters: ::protobuf::SingularPtrField<CardanoPoolParametersType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoSignTx_CardanoTxCertificateType {
    fn default() -> &'a CardanoSignTx_CardanoTxCertificateType {
        <CardanoSignTx_CardanoTxCertificateType as ::protobuf::Message>::default_instance()
    }
}

impl CardanoSignTx_CardanoTxCertificateType {
    pub fn new() -> CardanoSignTx_CardanoTxCertificateType {
        ::std::default::Default::default()
    }

    // required .hw.trezor.messages.cardano.CardanoCertificateType type = 1;


    pub fn get_field_type(&self) -> CardanoCertificateType {
        self.field_type.unwrap_or(CardanoCertificateType::STAKE_REGISTRATION)
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: CardanoCertificateType) {
        self.field_type = ::std::option::Option::Some(v);
    }

    // repeated uint32 path = 2;


    pub fn get_path(&self) -> &[u32] {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::vec::Vec<u32>) {
        self.path = v;
    }

    // Mutable pointer to the field.
    pub fn mut_path(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.path, ::std::vec::Vec::new())
    }

    // optional bytes pool = 3;


    pub fn get_pool(&self) -> &[u8] {
        match self.pool.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_pool(&mut self) {
        self.pool.clear();
    }

    pub fn has_pool(&self) -> bool {
        self.pool.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pool(&mut self, v: ::std::vec::Vec<u8>) {
        self.pool = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pool(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.pool.is_none() {
            self.pool.set_default();
        }
        self.pool.as_mut().unwrap()
    }

    // Take field
    pub fn take_pool(&mut self) -> ::std::vec::Vec<u8> {
        self.pool.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional .hw.trezor.messages.cardano.CardanoPoolParametersType pool_parameters = 4;


    pub fn get_pool_parameters(&self) -> &CardanoPoolParametersType {
        self.pool_parameters.as_ref().unwrap_or_else(|| <CardanoPoolParametersType as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pool_parameters(&mut self) {
        self.pool_parameters.clear();
    }

    pub fn has_pool_parameters(&self) -> bool {
        self.pool_parameters.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pool_parameters(&mut self, v: CardanoPoolParametersType) {
        self.pool_parameters = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pool_parameters(&mut self) -> &mut CardanoPoolParametersType {
        if self.pool_parameters.is_none() {
            self.pool_parameters.set_default();
        }
        self.pool_parameters.as_mut().unwrap()
    }

    // Take field
    pub fn take_pool_parameters(&mut self) -> CardanoPoolParametersType {
        self.pool_parameters.take().unwrap_or_else(|| CardanoPoolParametersType::new())
    }
}

impl ::protobuf::Message for CardanoSignTx_CardanoTxCertificateType {
    fn is_initialized(&self) -> bool {
        if self.field_type.is_none() {
            return false;
        }
        for v in &self.pool_parameters {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.path)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.pool)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pool_parameters)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_type {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        for value in &self.path {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(ref v) = self.pool.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        if let Some(ref v) = self.pool_parameters.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_type {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        for v in &self.path {
            os.write_uint32(2, *v)?;
        };
        if let Some(ref v) = self.pool.as_ref() {
            os.write_bytes(3, &v)?;
        }
        if let Some(ref v) = self.pool_parameters.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoSignTx_CardanoTxCertificateType {
        CardanoSignTx_CardanoTxCertificateType::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CardanoCertificateType>>(
                "type",
                |m: &CardanoSignTx_CardanoTxCertificateType| { &m.field_type },
                |m: &mut CardanoSignTx_CardanoTxCertificateType| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "path",
                |m: &CardanoSignTx_CardanoTxCertificateType| { &m.path },
                |m: &mut CardanoSignTx_CardanoTxCertificateType| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "pool",
                |m: &CardanoSignTx_CardanoTxCertificateType| { &m.pool },
                |m: &mut CardanoSignTx_CardanoTxCertificateType| { &mut m.pool },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CardanoPoolParametersType>>(
                "pool_parameters",
                |m: &CardanoSignTx_CardanoTxCertificateType| { &m.pool_parameters },
                |m: &mut CardanoSignTx_CardanoTxCertificateType| { &mut m.pool_parameters },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoSignTx_CardanoTxCertificateType>(
                "CardanoSignTx.CardanoTxCertificateType",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoSignTx_CardanoTxCertificateType {
        static instance: ::protobuf::rt::LazyV2<CardanoSignTx_CardanoTxCertificateType> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoSignTx_CardanoTxCertificateType::new)
    }
}

impl ::protobuf::Clear for CardanoSignTx_CardanoTxCertificateType {
    fn clear(&mut self) {
        self.field_type = ::std::option::Option::None;
        self.path.clear();
        self.pool.clear();
        self.pool_parameters.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoSignTx_CardanoTxCertificateType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoSignTx_CardanoTxCertificateType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoSignTx_CardanoTxWithdrawalType {
    // message fields
    pub path: ::std::vec::Vec<u32>,
    amount: ::std::option::Option<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoSignTx_CardanoTxWithdrawalType {
    fn default() -> &'a CardanoSignTx_CardanoTxWithdrawalType {
        <CardanoSignTx_CardanoTxWithdrawalType as ::protobuf::Message>::default_instance()
    }
}

impl CardanoSignTx_CardanoTxWithdrawalType {
    pub fn new() -> CardanoSignTx_CardanoTxWithdrawalType {
        ::std::default::Default::default()
    }

    // repeated uint32 path = 1;


    pub fn get_path(&self) -> &[u32] {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::vec::Vec<u32>) {
        self.path = v;
    }

    // Mutable pointer to the field.
    pub fn mut_path(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.path, ::std::vec::Vec::new())
    }

    // required uint64 amount = 2;


    pub fn get_amount(&self) -> u64 {
        self.amount.unwrap_or(0)
    }
    pub fn clear_amount(&mut self) {
        self.amount = ::std::option::Option::None;
    }

    pub fn has_amount(&self) -> bool {
        self.amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: u64) {
        self.amount = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CardanoSignTx_CardanoTxWithdrawalType {
    fn is_initialized(&self) -> bool {
        if self.amount.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.amount = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.path {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.amount {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.path {
            os.write_uint32(1, *v)?;
        };
        if let Some(v) = self.amount {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoSignTx_CardanoTxWithdrawalType {
        CardanoSignTx_CardanoTxWithdrawalType::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "path",
                |m: &CardanoSignTx_CardanoTxWithdrawalType| { &m.path },
                |m: &mut CardanoSignTx_CardanoTxWithdrawalType| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "amount",
                |m: &CardanoSignTx_CardanoTxWithdrawalType| { &m.amount },
                |m: &mut CardanoSignTx_CardanoTxWithdrawalType| { &mut m.amount },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoSignTx_CardanoTxWithdrawalType>(
                "CardanoSignTx.CardanoTxWithdrawalType",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoSignTx_CardanoTxWithdrawalType {
        static instance: ::protobuf::rt::LazyV2<CardanoSignTx_CardanoTxWithdrawalType> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoSignTx_CardanoTxWithdrawalType::new)
    }
}

impl ::protobuf::Clear for CardanoSignTx_CardanoTxWithdrawalType {
    fn clear(&mut self) {
        self.path.clear();
        self.amount = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoSignTx_CardanoTxWithdrawalType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoSignTx_CardanoTxWithdrawalType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoSignTx_CardanoTxAuxiliaryDataType {
    // message fields
    blob: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    pub catalyst_registration_parameters: ::protobuf::SingularPtrField<CardanoCatalystRegistrationParametersType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoSignTx_CardanoTxAuxiliaryDataType {
    fn default() -> &'a CardanoSignTx_CardanoTxAuxiliaryDataType {
        <CardanoSignTx_CardanoTxAuxiliaryDataType as ::protobuf::Message>::default_instance()
    }
}

impl CardanoSignTx_CardanoTxAuxiliaryDataType {
    pub fn new() -> CardanoSignTx_CardanoTxAuxiliaryDataType {
        ::std::default::Default::default()
    }

    // optional bytes blob = 1;


    pub fn get_blob(&self) -> &[u8] {
        match self.blob.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_blob(&mut self) {
        self.blob.clear();
    }

    pub fn has_blob(&self) -> bool {
        self.blob.is_some()
    }

    // Param is passed by value, moved
    pub fn set_blob(&mut self, v: ::std::vec::Vec<u8>) {
        self.blob = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_blob(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.blob.is_none() {
            self.blob.set_default();
        }
        self.blob.as_mut().unwrap()
    }

    // Take field
    pub fn take_blob(&mut self) -> ::std::vec::Vec<u8> {
        self.blob.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional .hw.trezor.messages.cardano.CardanoCatalystRegistrationParametersType catalyst_registration_parameters = 2;


    pub fn get_catalyst_registration_parameters(&self) -> &CardanoCatalystRegistrationParametersType {
        self.catalyst_registration_parameters.as_ref().unwrap_or_else(|| <CardanoCatalystRegistrationParametersType as ::protobuf::Message>::default_instance())
    }
    pub fn clear_catalyst_registration_parameters(&mut self) {
        self.catalyst_registration_parameters.clear();
    }

    pub fn has_catalyst_registration_parameters(&self) -> bool {
        self.catalyst_registration_parameters.is_some()
    }

    // Param is passed by value, moved
    pub fn set_catalyst_registration_parameters(&mut self, v: CardanoCatalystRegistrationParametersType) {
        self.catalyst_registration_parameters = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_catalyst_registration_parameters(&mut self) -> &mut CardanoCatalystRegistrationParametersType {
        if self.catalyst_registration_parameters.is_none() {
            self.catalyst_registration_parameters.set_default();
        }
        self.catalyst_registration_parameters.as_mut().unwrap()
    }

    // Take field
    pub fn take_catalyst_registration_parameters(&mut self) -> CardanoCatalystRegistrationParametersType {
        self.catalyst_registration_parameters.take().unwrap_or_else(|| CardanoCatalystRegistrationParametersType::new())
    }
}

impl ::protobuf::Message for CardanoSignTx_CardanoTxAuxiliaryDataType {
    fn is_initialized(&self) -> bool {
        for v in &self.catalyst_registration_parameters {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.blob)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.catalyst_registration_parameters)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.blob.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.catalyst_registration_parameters.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.blob.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.catalyst_registration_parameters.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoSignTx_CardanoTxAuxiliaryDataType {
        CardanoSignTx_CardanoTxAuxiliaryDataType::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "blob",
                |m: &CardanoSignTx_CardanoTxAuxiliaryDataType| { &m.blob },
                |m: &mut CardanoSignTx_CardanoTxAuxiliaryDataType| { &mut m.blob },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CardanoCatalystRegistrationParametersType>>(
                "catalyst_registration_parameters",
                |m: &CardanoSignTx_CardanoTxAuxiliaryDataType| { &m.catalyst_registration_parameters },
                |m: &mut CardanoSignTx_CardanoTxAuxiliaryDataType| { &mut m.catalyst_registration_parameters },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoSignTx_CardanoTxAuxiliaryDataType>(
                "CardanoSignTx.CardanoTxAuxiliaryDataType",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoSignTx_CardanoTxAuxiliaryDataType {
        static instance: ::protobuf::rt::LazyV2<CardanoSignTx_CardanoTxAuxiliaryDataType> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoSignTx_CardanoTxAuxiliaryDataType::new)
    }
}

impl ::protobuf::Clear for CardanoSignTx_CardanoTxAuxiliaryDataType {
    fn clear(&mut self) {
        self.blob.clear();
        self.catalyst_registration_parameters.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoSignTx_CardanoTxAuxiliaryDataType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoSignTx_CardanoTxAuxiliaryDataType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoSignedTxChunk {
    // message fields
    signed_tx_chunk: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoSignedTxChunk {
    fn default() -> &'a CardanoSignedTxChunk {
        <CardanoSignedTxChunk as ::protobuf::Message>::default_instance()
    }
}

impl CardanoSignedTxChunk {
    pub fn new() -> CardanoSignedTxChunk {
        ::std::default::Default::default()
    }

    // required bytes signed_tx_chunk = 1;


    pub fn get_signed_tx_chunk(&self) -> &[u8] {
        match self.signed_tx_chunk.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_signed_tx_chunk(&mut self) {
        self.signed_tx_chunk.clear();
    }

    pub fn has_signed_tx_chunk(&self) -> bool {
        self.signed_tx_chunk.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signed_tx_chunk(&mut self, v: ::std::vec::Vec<u8>) {
        self.signed_tx_chunk = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signed_tx_chunk(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signed_tx_chunk.is_none() {
            self.signed_tx_chunk.set_default();
        }
        self.signed_tx_chunk.as_mut().unwrap()
    }

    // Take field
    pub fn take_signed_tx_chunk(&mut self) -> ::std::vec::Vec<u8> {
        self.signed_tx_chunk.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CardanoSignedTxChunk {
    fn is_initialized(&self) -> bool {
        if self.signed_tx_chunk.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.signed_tx_chunk)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.signed_tx_chunk.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.signed_tx_chunk.as_ref() {
            os.write_bytes(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoSignedTxChunk {
        CardanoSignedTxChunk::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signed_tx_chunk",
                |m: &CardanoSignedTxChunk| { &m.signed_tx_chunk },
                |m: &mut CardanoSignedTxChunk| { &mut m.signed_tx_chunk },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoSignedTxChunk>(
                "CardanoSignedTxChunk",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoSignedTxChunk {
        static instance: ::protobuf::rt::LazyV2<CardanoSignedTxChunk> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoSignedTxChunk::new)
    }
}

impl ::protobuf::Clear for CardanoSignedTxChunk {
    fn clear(&mut self) {
        self.signed_tx_chunk.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoSignedTxChunk {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoSignedTxChunk {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoSignedTxChunkAck {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoSignedTxChunkAck {
    fn default() -> &'a CardanoSignedTxChunkAck {
        <CardanoSignedTxChunkAck as ::protobuf::Message>::default_instance()
    }
}

impl CardanoSignedTxChunkAck {
    pub fn new() -> CardanoSignedTxChunkAck {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CardanoSignedTxChunkAck {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoSignedTxChunkAck {
        CardanoSignedTxChunkAck::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoSignedTxChunkAck>(
                "CardanoSignedTxChunkAck",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoSignedTxChunkAck {
        static instance: ::protobuf::rt::LazyV2<CardanoSignedTxChunkAck> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoSignedTxChunkAck::new)
    }
}

impl ::protobuf::Clear for CardanoSignedTxChunkAck {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoSignedTxChunkAck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoSignedTxChunkAck {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CardanoSignedTx {
    // message fields
    tx_hash: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    serialized_tx: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CardanoSignedTx {
    fn default() -> &'a CardanoSignedTx {
        <CardanoSignedTx as ::protobuf::Message>::default_instance()
    }
}

impl CardanoSignedTx {
    pub fn new() -> CardanoSignedTx {
        ::std::default::Default::default()
    }

    // required bytes tx_hash = 1;


    pub fn get_tx_hash(&self) -> &[u8] {
        match self.tx_hash.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_tx_hash(&mut self) {
        self.tx_hash.clear();
    }

    pub fn has_tx_hash(&self) -> bool {
        self.tx_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.tx_hash = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.tx_hash.is_none() {
            self.tx_hash.set_default();
        }
        self.tx_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_tx_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.tx_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes serialized_tx = 2;


    pub fn get_serialized_tx(&self) -> &[u8] {
        match self.serialized_tx.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_serialized_tx(&mut self) {
        self.serialized_tx.clear();
    }

    pub fn has_serialized_tx(&self) -> bool {
        self.serialized_tx.is_some()
    }

    // Param is passed by value, moved
    pub fn set_serialized_tx(&mut self, v: ::std::vec::Vec<u8>) {
        self.serialized_tx = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serialized_tx(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.serialized_tx.is_none() {
            self.serialized_tx.set_default();
        }
        self.serialized_tx.as_mut().unwrap()
    }

    // Take field
    pub fn take_serialized_tx(&mut self) -> ::std::vec::Vec<u8> {
        self.serialized_tx.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CardanoSignedTx {
    fn is_initialized(&self) -> bool {
        if self.tx_hash.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.tx_hash)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.serialized_tx)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.tx_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.serialized_tx.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.tx_hash.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.serialized_tx.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CardanoSignedTx {
        CardanoSignedTx::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "tx_hash",
                |m: &CardanoSignedTx| { &m.tx_hash },
                |m: &mut CardanoSignedTx| { &mut m.tx_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "serialized_tx",
                |m: &CardanoSignedTx| { &m.serialized_tx },
                |m: &mut CardanoSignedTx| { &mut m.serialized_tx },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CardanoSignedTx>(
                "CardanoSignedTx",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CardanoSignedTx {
        static instance: ::protobuf::rt::LazyV2<CardanoSignedTx> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CardanoSignedTx::new)
    }
}

impl ::protobuf::Clear for CardanoSignedTx {
    fn clear(&mut self) {
        self.tx_hash.clear();
        self.serialized_tx.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CardanoSignedTx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoSignedTx {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CardanoDerivationType {
    LEDGER = 0,
    ICARUS = 1,
    ICARUS_TREZOR = 2,
}

impl ::protobuf::ProtobufEnum for CardanoDerivationType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CardanoDerivationType> {
        match value {
            0 => ::std::option::Option::Some(CardanoDerivationType::LEDGER),
            1 => ::std::option::Option::Some(CardanoDerivationType::ICARUS),
            2 => ::std::option::Option::Some(CardanoDerivationType::ICARUS_TREZOR),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CardanoDerivationType] = &[
            CardanoDerivationType::LEDGER,
            CardanoDerivationType::ICARUS,
            CardanoDerivationType::ICARUS_TREZOR,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<CardanoDerivationType>("CardanoDerivationType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for CardanoDerivationType {
}

impl ::std::default::Default for CardanoDerivationType {
    fn default() -> Self {
        CardanoDerivationType::LEDGER
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoDerivationType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CardanoAddressType {
    BASE = 0,
    BASE_SCRIPT_KEY = 1,
    BASE_KEY_SCRIPT = 2,
    BASE_SCRIPT_SCRIPT = 3,
    POINTER = 4,
    POINTER_SCRIPT = 5,
    ENTERPRISE = 6,
    ENTERPRISE_SCRIPT = 7,
    BYRON = 8,
    REWARD = 14,
    REWARD_SCRIPT = 15,
}

impl ::protobuf::ProtobufEnum for CardanoAddressType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CardanoAddressType> {
        match value {
            0 => ::std::option::Option::Some(CardanoAddressType::BASE),
            1 => ::std::option::Option::Some(CardanoAddressType::BASE_SCRIPT_KEY),
            2 => ::std::option::Option::Some(CardanoAddressType::BASE_KEY_SCRIPT),
            3 => ::std::option::Option::Some(CardanoAddressType::BASE_SCRIPT_SCRIPT),
            4 => ::std::option::Option::Some(CardanoAddressType::POINTER),
            5 => ::std::option::Option::Some(CardanoAddressType::POINTER_SCRIPT),
            6 => ::std::option::Option::Some(CardanoAddressType::ENTERPRISE),
            7 => ::std::option::Option::Some(CardanoAddressType::ENTERPRISE_SCRIPT),
            8 => ::std::option::Option::Some(CardanoAddressType::BYRON),
            14 => ::std::option::Option::Some(CardanoAddressType::REWARD),
            15 => ::std::option::Option::Some(CardanoAddressType::REWARD_SCRIPT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CardanoAddressType] = &[
            CardanoAddressType::BASE,
            CardanoAddressType::BASE_SCRIPT_KEY,
            CardanoAddressType::BASE_KEY_SCRIPT,
            CardanoAddressType::BASE_SCRIPT_SCRIPT,
            CardanoAddressType::POINTER,
            CardanoAddressType::POINTER_SCRIPT,
            CardanoAddressType::ENTERPRISE,
            CardanoAddressType::ENTERPRISE_SCRIPT,
            CardanoAddressType::BYRON,
            CardanoAddressType::REWARD,
            CardanoAddressType::REWARD_SCRIPT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<CardanoAddressType>("CardanoAddressType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for CardanoAddressType {
}

impl ::std::default::Default for CardanoAddressType {
    fn default() -> Self {
        CardanoAddressType::BASE
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoAddressType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CardanoNativeScriptType {
    PUB_KEY = 0,
    ALL = 1,
    ANY = 2,
    N_OF_K = 3,
    INVALID_BEFORE = 4,
    INVALID_HEREAFTER = 5,
}

impl ::protobuf::ProtobufEnum for CardanoNativeScriptType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CardanoNativeScriptType> {
        match value {
            0 => ::std::option::Option::Some(CardanoNativeScriptType::PUB_KEY),
            1 => ::std::option::Option::Some(CardanoNativeScriptType::ALL),
            2 => ::std::option::Option::Some(CardanoNativeScriptType::ANY),
            3 => ::std::option::Option::Some(CardanoNativeScriptType::N_OF_K),
            4 => ::std::option::Option::Some(CardanoNativeScriptType::INVALID_BEFORE),
            5 => ::std::option::Option::Some(CardanoNativeScriptType::INVALID_HEREAFTER),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CardanoNativeScriptType] = &[
            CardanoNativeScriptType::PUB_KEY,
            CardanoNativeScriptType::ALL,
            CardanoNativeScriptType::ANY,
            CardanoNativeScriptType::N_OF_K,
            CardanoNativeScriptType::INVALID_BEFORE,
            CardanoNativeScriptType::INVALID_HEREAFTER,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<CardanoNativeScriptType>("CardanoNativeScriptType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for CardanoNativeScriptType {
}

impl ::std::default::Default for CardanoNativeScriptType {
    fn default() -> Self {
        CardanoNativeScriptType::PUB_KEY
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoNativeScriptType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CardanoNativeScriptHashDisplayFormat {
    HIDE = 0,
    BECH32 = 1,
    POLICY_ID = 2,
}

impl ::protobuf::ProtobufEnum for CardanoNativeScriptHashDisplayFormat {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CardanoNativeScriptHashDisplayFormat> {
        match value {
            0 => ::std::option::Option::Some(CardanoNativeScriptHashDisplayFormat::HIDE),
            1 => ::std::option::Option::Some(CardanoNativeScriptHashDisplayFormat::BECH32),
            2 => ::std::option::Option::Some(CardanoNativeScriptHashDisplayFormat::POLICY_ID),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CardanoNativeScriptHashDisplayFormat] = &[
            CardanoNativeScriptHashDisplayFormat::HIDE,
            CardanoNativeScriptHashDisplayFormat::BECH32,
            CardanoNativeScriptHashDisplayFormat::POLICY_ID,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<CardanoNativeScriptHashDisplayFormat>("CardanoNativeScriptHashDisplayFormat", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for CardanoNativeScriptHashDisplayFormat {
}

impl ::std::default::Default for CardanoNativeScriptHashDisplayFormat {
    fn default() -> Self {
        CardanoNativeScriptHashDisplayFormat::HIDE
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoNativeScriptHashDisplayFormat {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CardanoCertificateType {
    STAKE_REGISTRATION = 0,
    STAKE_DEREGISTRATION = 1,
    STAKE_DELEGATION = 2,
    STAKE_POOL_REGISTRATION = 3,
}

impl ::protobuf::ProtobufEnum for CardanoCertificateType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CardanoCertificateType> {
        match value {
            0 => ::std::option::Option::Some(CardanoCertificateType::STAKE_REGISTRATION),
            1 => ::std::option::Option::Some(CardanoCertificateType::STAKE_DEREGISTRATION),
            2 => ::std::option::Option::Some(CardanoCertificateType::STAKE_DELEGATION),
            3 => ::std::option::Option::Some(CardanoCertificateType::STAKE_POOL_REGISTRATION),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CardanoCertificateType] = &[
            CardanoCertificateType::STAKE_REGISTRATION,
            CardanoCertificateType::STAKE_DEREGISTRATION,
            CardanoCertificateType::STAKE_DELEGATION,
            CardanoCertificateType::STAKE_POOL_REGISTRATION,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<CardanoCertificateType>("CardanoCertificateType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for CardanoCertificateType {
}

impl ::std::default::Default for CardanoCertificateType {
    fn default() -> Self {
        CardanoCertificateType::STAKE_REGISTRATION
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoCertificateType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CardanoPoolRelayType {
    SINGLE_HOST_IP = 0,
    SINGLE_HOST_NAME = 1,
    MULTIPLE_HOST_NAME = 2,
}

impl ::protobuf::ProtobufEnum for CardanoPoolRelayType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CardanoPoolRelayType> {
        match value {
            0 => ::std::option::Option::Some(CardanoPoolRelayType::SINGLE_HOST_IP),
            1 => ::std::option::Option::Some(CardanoPoolRelayType::SINGLE_HOST_NAME),
            2 => ::std::option::Option::Some(CardanoPoolRelayType::MULTIPLE_HOST_NAME),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CardanoPoolRelayType] = &[
            CardanoPoolRelayType::SINGLE_HOST_IP,
            CardanoPoolRelayType::SINGLE_HOST_NAME,
            CardanoPoolRelayType::MULTIPLE_HOST_NAME,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<CardanoPoolRelayType>("CardanoPoolRelayType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for CardanoPoolRelayType {
}

impl ::std::default::Default for CardanoPoolRelayType {
    fn default() -> Self {
        CardanoPoolRelayType::SINGLE_HOST_IP
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoPoolRelayType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CardanoTxAuxiliaryDataSupplementType {
    NONE = 0,
    CATALYST_REGISTRATION_SIGNATURE = 1,
}

impl ::protobuf::ProtobufEnum for CardanoTxAuxiliaryDataSupplementType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CardanoTxAuxiliaryDataSupplementType> {
        match value {
            0 => ::std::option::Option::Some(CardanoTxAuxiliaryDataSupplementType::NONE),
            1 => ::std::option::Option::Some(CardanoTxAuxiliaryDataSupplementType::CATALYST_REGISTRATION_SIGNATURE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CardanoTxAuxiliaryDataSupplementType] = &[
            CardanoTxAuxiliaryDataSupplementType::NONE,
            CardanoTxAuxiliaryDataSupplementType::CATALYST_REGISTRATION_SIGNATURE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<CardanoTxAuxiliaryDataSupplementType>("CardanoTxAuxiliaryDataSupplementType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for CardanoTxAuxiliaryDataSupplementType {
}

impl ::std::default::Default for CardanoTxAuxiliaryDataSupplementType {
    fn default() -> Self {
        CardanoTxAuxiliaryDataSupplementType::NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoTxAuxiliaryDataSupplementType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CardanoTxSigningMode {
    ORDINARY_TRANSACTION = 0,
    POOL_REGISTRATION_AS_OWNER = 1,
    MULTISIG_TRANSACTION = 2,
}

impl ::protobuf::ProtobufEnum for CardanoTxSigningMode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CardanoTxSigningMode> {
        match value {
            0 => ::std::option::Option::Some(CardanoTxSigningMode::ORDINARY_TRANSACTION),
            1 => ::std::option::Option::Some(CardanoTxSigningMode::POOL_REGISTRATION_AS_OWNER),
            2 => ::std::option::Option::Some(CardanoTxSigningMode::MULTISIG_TRANSACTION),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CardanoTxSigningMode] = &[
            CardanoTxSigningMode::ORDINARY_TRANSACTION,
            CardanoTxSigningMode::POOL_REGISTRATION_AS_OWNER,
            CardanoTxSigningMode::MULTISIG_TRANSACTION,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<CardanoTxSigningMode>("CardanoTxSigningMode", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for CardanoTxSigningMode {
}

impl ::std::default::Default for CardanoTxSigningMode {
    fn default() -> Self {
        CardanoTxSigningMode::ORDINARY_TRANSACTION
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoTxSigningMode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CardanoTxWitnessType {
    BYRON_WITNESS = 0,
    SHELLEY_WITNESS = 1,
}

impl ::protobuf::ProtobufEnum for CardanoTxWitnessType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CardanoTxWitnessType> {
        match value {
            0 => ::std::option::Option::Some(CardanoTxWitnessType::BYRON_WITNESS),
            1 => ::std::option::Option::Some(CardanoTxWitnessType::SHELLEY_WITNESS),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CardanoTxWitnessType] = &[
            CardanoTxWitnessType::BYRON_WITNESS,
            CardanoTxWitnessType::SHELLEY_WITNESS,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<CardanoTxWitnessType>("CardanoTxWitnessType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for CardanoTxWitnessType {
}

impl ::std::default::Default for CardanoTxWitnessType {
    fn default() -> Self {
        CardanoTxWitnessType::BYRON_WITNESS
    }
}

impl ::protobuf::reflect::ProtobufValue for CardanoTxWitnessType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16messages-cardano.proto\x12\x1ahw.trezor.messages.cardano\x1a\x15me\
    ssages-common.proto\"\x87\x01\n\x1cCardanoBlockchainPointerType\x12\x1f\
    \n\x0bblock_index\x18\x01\x20\x02(\rR\nblockIndex\x12\x19\n\x08tx_index\
    \x18\x02\x20\x02(\rR\x07txIndex\x12+\n\x11certificate_index\x18\x03\x20\
    \x02(\rR\x10certificateIndex\"\xef\x02\n\x13CardanoNativeScript\x12G\n\
    \x04type\x18\x01\x20\x02(\x0e23.hw.trezor.messages.cardano.CardanoNative\
    ScriptTypeR\x04type\x12I\n\x07scripts\x18\x02\x20\x03(\x0b2/.hw.trezor.m\
    essages.cardano.CardanoNativeScriptR\x07scripts\x12\x19\n\x08key_hash\
    \x18\x03\x20\x01(\x0cR\x07keyHash\x12\x19\n\x08key_path\x18\x04\x20\x03(\
    \rR\x07keyPath\x12:\n\x19required_signatures_count\x18\x05\x20\x01(\rR\
    \x17requiredSignaturesCount\x12%\n\x0einvalid_before\x18\x06\x20\x01(\
    \x04R\rinvalidBefore\x12+\n\x11invalid_hereafter\x18\x07\x20\x01(\x04R\
    \x10invalidHereafter\"\xaa\x02\n\x1aCardanoGetNativeScriptHash\x12G\n\
    \x06script\x18\x01\x20\x02(\x0b2/.hw.trezor.messages.cardano.CardanoNati\
    veScriptR\x06script\x12g\n\x0edisplay_format\x18\x02\x20\x02(\x0e2@.hw.t\
    rezor.messages.cardano.CardanoNativeScriptHashDisplayFormatR\rdisplayFor\
    mat\x12Z\n\x0fderivation_type\x18\x03\x20\x02(\x0e21.hw.trezor.messages.\
    cardano.CardanoDerivationTypeR\x0ederivationType\":\n\x17CardanoNativeSc\
    riptHash\x12\x1f\n\x0bscript_hash\x18\x01\x20\x02(\x0cR\nscriptHash\"\
    \xaf\x03\n\x1cCardanoAddressParametersType\x12Q\n\x0caddress_type\x18\
    \x01\x20\x02(\x0e2..hw.trezor.messages.cardano.CardanoAddressTypeR\x0bad\
    dressType\x12\x1b\n\taddress_n\x18\x02\x20\x03(\rR\x08addressN\x12*\n\
    \x11address_n_staking\x18\x03\x20\x03(\rR\x0faddressNStaking\x12(\n\x10s\
    taking_key_hash\x18\x04\x20\x01(\x0cR\x0estakingKeyHash\x12i\n\x13certif\
    icate_pointer\x18\x05\x20\x01(\x0b28.hw.trezor.messages.cardano.CardanoB\
    lockchainPointerTypeR\x12certificatePointer\x12.\n\x13script_payment_has\
    h\x18\x06\x20\x01(\x0cR\x11scriptPaymentHash\x12.\n\x13script_staking_ha\
    sh\x18\x07\x20\x01(\x0cR\x11scriptStakingHash\"\xc8\x02\n\x11CardanoGetA\
    ddress\x12(\n\x0cshow_display\x18\x02\x20\x01(\x08:\x05falseR\x0bshowDis\
    play\x12%\n\x0eprotocol_magic\x18\x03\x20\x02(\rR\rprotocolMagic\x12\x1d\
    \n\nnetwork_id\x18\x04\x20\x02(\rR\tnetworkId\x12g\n\x12address_paramete\
    rs\x18\x05\x20\x02(\x0b28.hw.trezor.messages.cardano.CardanoAddressParam\
    etersTypeR\x11addressParameters\x12Z\n\x0fderivation_type\x18\x06\x20\
    \x02(\x0e21.hw.trezor.messages.cardano.CardanoDerivationTypeR\x0ederivat\
    ionType\"*\n\x0eCardanoAddress\x12\x18\n\x07address\x18\x01\x20\x02(\tR\
    \x07address\"\xb1\x01\n\x13CardanoGetPublicKey\x12\x1b\n\taddress_n\x18\
    \x01\x20\x03(\rR\x08addressN\x12!\n\x0cshow_display\x18\x02\x20\x01(\x08\
    R\x0bshowDisplay\x12Z\n\x0fderivation_type\x18\x03\x20\x02(\x0e21.hw.tre\
    zor.messages.cardano.CardanoDerivationTypeR\x0ederivationType\"a\n\x10Ca\
    rdanoPublicKey\x12\x12\n\x04xpub\x18\x01\x20\x02(\tR\x04xpub\x129\n\x04n\
    ode\x18\x02\x20\x02(\x0b2%.hw.trezor.messages.common.HDNodeTypeR\x04node\
    \"\xab\x05\n\x11CardanoSignTxInit\x12S\n\x0csigning_mode\x18\x01\x20\x02\
    (\x0e20.hw.trezor.messages.cardano.CardanoTxSigningModeR\x0bsigningMode\
    \x12%\n\x0eprotocol_magic\x18\x02\x20\x02(\rR\rprotocolMagic\x12\x1d\n\n\
    network_id\x18\x03\x20\x02(\rR\tnetworkId\x12!\n\x0cinputs_count\x18\x04\
    \x20\x02(\rR\x0binputsCount\x12#\n\routputs_count\x18\x05\x20\x02(\rR\
    \x0coutputsCount\x12\x10\n\x03fee\x18\x06\x20\x02(\x04R\x03fee\x12\x10\n\
    \x03ttl\x18\x07\x20\x01(\x04R\x03ttl\x12-\n\x12certificates_count\x18\
    \x08\x20\x02(\rR\x11certificatesCount\x12+\n\x11withdrawals_count\x18\t\
    \x20\x02(\rR\x10withdrawalsCount\x12,\n\x12has_auxiliary_data\x18\n\x20\
    \x02(\x08R\x10hasAuxiliaryData\x126\n\x17validity_interval_start\x18\x0b\
    \x20\x01(\x04R\x15validityIntervalStart\x124\n\x16witness_requests_count\
    \x18\x0c\x20\x02(\rR\x14witnessRequestsCount\x12;\n\x1aminting_asset_gro\
    ups_count\x18\r\x20\x02(\rR\x17mintingAssetGroupsCount\x12Z\n\x0fderivat\
    ion_type\x18\x0e\x20\x02(\x0e21.hw.trezor.messages.cardano.CardanoDeriva\
    tionTypeR\x0ederivationType\"L\n\x0eCardanoTxInput\x12\x1b\n\tprev_hash\
    \x18\x01\x20\x02(\x0cR\x08prevHash\x12\x1d\n\nprev_index\x18\x02\x20\x02\
    (\rR\tprevIndex\"\xda\x01\n\x0fCardanoTxOutput\x12\x18\n\x07address\x18\
    \x01\x20\x01(\tR\x07address\x12g\n\x12address_parameters\x18\x02\x20\x01\
    (\x0b28.hw.trezor.messages.cardano.CardanoAddressParametersTypeR\x11addr\
    essParameters\x12\x16\n\x06amount\x18\x03\x20\x02(\x04R\x06amount\x12,\n\
    \x12asset_groups_count\x18\x04\x20\x02(\rR\x10assetGroupsCount\"S\n\x11C\
    ardanoAssetGroup\x12\x1b\n\tpolicy_id\x18\x01\x20\x02(\x0cR\x08policyId\
    \x12!\n\x0ctokens_count\x18\x02\x20\x02(\rR\x0btokensCount\"q\n\x0cCarda\
    noToken\x12(\n\x10asset_name_bytes\x18\x01\x20\x02(\x0cR\x0eassetNameByt\
    es\x12\x16\n\x06amount\x18\x02\x20\x01(\x04R\x06amount\x12\x1f\n\x0bmint\
    _amount\x18\x03\x20\x01(\x12R\nmintAmount\"f\n\x10CardanoPoolOwner\x12(\
    \n\x10staking_key_path\x18\x01\x20\x03(\rR\x0estakingKeyPath\x12(\n\x10s\
    taking_key_hash\x18\x02\x20\x01(\x0cR\x0estakingKeyHash\"\xd9\x01\n\x1aC\
    ardanoPoolRelayParameters\x12D\n\x04type\x18\x01\x20\x02(\x0e20.hw.trezo\
    r.messages.cardano.CardanoPoolRelayTypeR\x04type\x12!\n\x0cipv4_address\
    \x18\x02\x20\x01(\x0cR\x0bipv4Address\x12!\n\x0cipv6_address\x18\x03\x20\
    \x01(\x0cR\x0bipv6Address\x12\x1b\n\thost_name\x18\x04\x20\x01(\tR\x08ho\
    stName\x12\x12\n\x04port\x18\x05\x20\x01(\rR\x04port\"?\n\x17CardanoPool\
    MetadataType\x12\x10\n\x03url\x18\x01\x20\x02(\tR\x03url\x12\x12\n\x04ha\
    sh\x18\x02\x20\x02(\x0cR\x04hash\"\xb8\x04\n\x19CardanoPoolParametersTyp\
    e\x12\x17\n\x07pool_id\x18\x01\x20\x02(\x0cR\x06poolId\x12\x20\n\x0cvrf_\
    key_hash\x18\x02\x20\x02(\x0cR\nvrfKeyHash\x12\x16\n\x06pledge\x18\x03\
    \x20\x02(\x04R\x06pledge\x12\x12\n\x04cost\x18\x04\x20\x02(\x04R\x04cost\
    \x12)\n\x10margin_numerator\x18\x05\x20\x02(\x04R\x0fmarginNumerator\x12\
    -\n\x12margin_denominator\x18\x06\x20\x02(\x04R\x11marginDenominator\x12\
    %\n\x0ereward_account\x18\x07\x20\x02(\tR\rrewardAccount\x12H\n\x06owner\
    s\x18\x08\x20\x03(\x0b2,.hw.trezor.messages.cardano.CardanoPoolOwnerR\
    \x06ownersB\x02\x18\x01\x12R\n\x06relays\x18\t\x20\x03(\x0b26.hw.trezor.\
    messages.cardano.CardanoPoolRelayParametersR\x06relaysB\x02\x18\x01\x12O\
    \n\x08metadata\x18\n\x20\x01(\x0b23.hw.trezor.messages.cardano.CardanoPo\
    olMetadataTypeR\x08metadata\x12!\n\x0cowners_count\x18\x0b\x20\x02(\rR\
    \x0bownersCount\x12!\n\x0crelays_count\x18\x0c\x20\x02(\rR\x0brelaysCoun\
    t\"\x87\x02\n\x14CardanoTxCertificate\x12F\n\x04type\x18\x01\x20\x02(\
    \x0e22.hw.trezor.messages.cardano.CardanoCertificateTypeR\x04type\x12\
    \x12\n\x04path\x18\x02\x20\x03(\rR\x04path\x12\x12\n\x04pool\x18\x03\x20\
    \x01(\x0cR\x04pool\x12^\n\x0fpool_parameters\x18\x04\x20\x01(\x0b25.hw.t\
    rezor.messages.cardano.CardanoPoolParametersTypeR\x0epoolParameters\x12\
    \x1f\n\x0bscript_hash\x18\x05\x20\x01(\x0cR\nscriptHash\"b\n\x13CardanoT\
    xWithdrawal\x12\x12\n\x04path\x18\x01\x20\x03(\rR\x04path\x12\x16\n\x06a\
    mount\x18\x02\x20\x02(\x04R\x06amount\x12\x1f\n\x0bscript_hash\x18\x03\
    \x20\x01(\x0cR\nscriptHash\"\x86\x02\n)CardanoCatalystRegistrationParame\
    tersType\x12*\n\x11voting_public_key\x18\x01\x20\x02(\x0cR\x0fvotingPubl\
    icKey\x12!\n\x0cstaking_path\x18\x02\x20\x03(\rR\x0bstakingPath\x12t\n\
    \x19reward_address_parameters\x18\x03\x20\x02(\x0b28.hw.trezor.messages.\
    cardano.CardanoAddressParametersTypeR\x17rewardAddressParameters\x12\x14\
    \n\x05nonce\x18\x04\x20\x02(\x04R\x05nonce\"\xbe\x01\n\x16CardanoTxAuxil\
    iaryData\x12\x8f\x01\n\x20catalyst_registration_parameters\x18\x01\x20\
    \x01(\x0b2E.hw.trezor.messages.cardano.CardanoCatalystRegistrationParame\
    tersTypeR\x1ecatalystRegistrationParameters\x12\x12\n\x04hash\x18\x02\
    \x20\x01(\x0cR\x04hash\"=\n\rCardanoTxMint\x12,\n\x12asset_groups_count\
    \x18\x01\x20\x02(\rR\x10assetGroupsCount\"\x12\n\x10CardanoTxItemAck\"\
    \xd7\x01\n\x20CardanoTxAuxiliaryDataSupplement\x12T\n\x04type\x18\x01\
    \x20\x02(\x0e2@.hw.trezor.messages.cardano.CardanoTxAuxiliaryDataSupplem\
    entTypeR\x04type\x12.\n\x13auxiliary_data_hash\x18\x02\x20\x01(\x0cR\x11\
    auxiliaryDataHash\x12-\n\x12catalyst_signature\x18\x03\x20\x01(\x0cR\x11\
    catalystSignature\"-\n\x17CardanoTxWitnessRequest\x12\x12\n\x04path\x18\
    \x01\x20\x03(\rR\x04path\"\xb6\x01\n\x18CardanoTxWitnessResponse\x12D\n\
    \x04type\x18\x01\x20\x02(\x0e20.hw.trezor.messages.cardano.CardanoTxWitn\
    essTypeR\x04type\x12\x17\n\x07pub_key\x18\x02\x20\x02(\x0cR\x06pubKey\
    \x12\x1c\n\tsignature\x18\x03\x20\x02(\x0cR\tsignature\x12\x1d\n\nchain_\
    code\x18\x04\x20\x01(\x0cR\tchainCode\"\x12\n\x10CardanoTxHostAck\",\n\
    \x11CardanoTxBodyHash\x12\x17\n\x07tx_hash\x18\x01\x20\x02(\x0cR\x06txHa\
    sh\"\x17\n\x15CardanoSignTxFinished\"\xca\x10\n\rCardanoSignTx\x12T\n\
    \x06inputs\x18\x01\x20\x03(\x0b2<.hw.trezor.messages.cardano.CardanoSign\
    Tx.CardanoTxInputTypeR\x06inputs\x12W\n\x07outputs\x18\x02\x20\x03(\x0b2\
    =.hw.trezor.messages.cardano.CardanoSignTx.CardanoTxOutputTypeR\x07outpu\
    ts\x12%\n\x0eprotocol_magic\x18\x05\x20\x02(\rR\rprotocolMagic\x12\x10\n\
    \x03fee\x18\x06\x20\x02(\x04R\x03fee\x12\x10\n\x03ttl\x18\x07\x20\x01(\
    \x04R\x03ttl\x12\x1d\n\nnetwork_id\x18\x08\x20\x02(\rR\tnetworkId\x12f\n\
    \x0ccertificates\x18\t\x20\x03(\x0b2B.hw.trezor.messages.cardano.Cardano\
    SignTx.CardanoTxCertificateTypeR\x0ccertificates\x12c\n\x0bwithdrawals\
    \x18\n\x20\x03(\x0b2A.hw.trezor.messages.cardano.CardanoSignTx.CardanoTx\
    WithdrawalTypeR\x0bwithdrawals\x126\n\x17validity_interval_start\x18\x0c\
    \x20\x01(\x04R\x15validityIntervalStart\x12k\n\x0eauxiliary_data\x18\r\
    \x20\x01(\x0b2D.hw.trezor.messages.cardano.CardanoSignTx.CardanoTxAuxili\
    aryDataTypeR\rauxiliaryData\x1am\n\x12CardanoTxInputType\x12\x1b\n\taddr\
    ess_n\x18\x01\x20\x03(\rR\x08addressN\x12\x1b\n\tprev_hash\x18\x02\x20\
    \x02(\x0cR\x08prevHash\x12\x1d\n\nprev_index\x18\x03\x20\x02(\rR\tprevIn\
    dex\x1a\x94\x02\n\x13CardanoTxOutputType\x12\x18\n\x07address\x18\x01\
    \x20\x01(\tR\x07address\x12\x16\n\x06amount\x18\x03\x20\x02(\x04R\x06amo\
    unt\x12g\n\x12address_parameters\x18\x04\x20\x01(\x0b28.hw.trezor.messag\
    es.cardano.CardanoAddressParametersTypeR\x11addressParameters\x12b\n\x0c\
    token_bundle\x18\x05\x20\x03(\x0b2?.hw.trezor.messages.cardano.CardanoSi\
    gnTx.CardanoAssetGroupTypeR\x0btokenBundle\x1a\x88\x01\n\x15CardanoAsset\
    GroupType\x12\x1b\n\tpolicy_id\x18\x01\x20\x02(\x0cR\x08policyId\x12R\n\
    \x06tokens\x18\x02\x20\x03(\x0b2:.hw.trezor.messages.cardano.CardanoSign\
    Tx.CardanoTokenTypeR\x06tokens\x1aT\n\x10CardanoTokenType\x12(\n\x10asse\
    t_name_bytes\x18\x01\x20\x02(\x0cR\x0eassetNameBytes\x12\x16\n\x06amount\
    \x18\x02\x20\x02(\x04R\x06amount\x1aj\n\x14CardanoPoolOwnerType\x12(\n\
    \x10staking_key_path\x18\x01\x20\x03(\rR\x0estakingKeyPath\x12(\n\x10sta\
    king_key_hash\x18\x02\x20\x01(\x0cR\x0estakingKeyHash\x1a\xdd\x01\n\x1eC\
    ardanoPoolRelayParametersType\x12D\n\x04type\x18\x01\x20\x02(\x0e20.hw.t\
    rezor.messages.cardano.CardanoPoolRelayTypeR\x04type\x12!\n\x0cipv4_addr\
    ess\x18\x02\x20\x01(\x0cR\x0bipv4Address\x12!\n\x0cipv6_address\x18\x03\
    \x20\x01(\x0cR\x0bipv6Address\x12\x1b\n\thost_name\x18\x04\x20\x01(\tR\
    \x08hostName\x12\x12\n\x04port\x18\x05\x20\x01(\rR\x04port\x1a\xea\x01\n\
    \x18CardanoTxCertificateType\x12F\n\x04type\x18\x01\x20\x02(\x0e22.hw.tr\
    ezor.messages.cardano.CardanoCertificateTypeR\x04type\x12\x12\n\x04path\
    \x18\x02\x20\x03(\rR\x04path\x12\x12\n\x04pool\x18\x03\x20\x01(\x0cR\x04\
    pool\x12^\n\x0fpool_parameters\x18\x04\x20\x01(\x0b25.hw.trezor.messages\
    .cardano.CardanoPoolParametersTypeR\x0epoolParameters\x1aE\n\x17CardanoT\
    xWithdrawalType\x12\x12\n\x04path\x18\x01\x20\x03(\rR\x04path\x12\x16\n\
    \x06amount\x18\x02\x20\x02(\x04R\x06amount\x1a\xc2\x01\n\x1aCardanoTxAux\
    iliaryDataType\x12\x12\n\x04blob\x18\x01\x20\x01(\x0cR\x04blob\x12\x8f\
    \x01\n\x20catalyst_registration_parameters\x18\x02\x20\x01(\x0b2E.hw.tre\
    zor.messages.cardano.CardanoCatalystRegistrationParametersTypeR\x1ecatal\
    ystRegistrationParameters:\x02\x18\x01\"B\n\x14CardanoSignedTxChunk\x12&\
    \n\x0fsigned_tx_chunk\x18\x01\x20\x02(\x0cR\rsignedTxChunk:\x02\x18\x01\
    \"\x1d\n\x17CardanoSignedTxChunkAck:\x02\x18\x01\"S\n\x0fCardanoSignedTx\
    \x12\x17\n\x07tx_hash\x18\x01\x20\x02(\x0cR\x06txHash\x12#\n\rserialized\
    _tx\x18\x02\x20\x01(\x0cR\x0cserializedTx:\x02\x18\x01*B\n\x15CardanoDer\
    ivationType\x12\n\n\x06LEDGER\x10\0\x12\n\n\x06ICARUS\x10\x01\x12\x11\n\
    \rICARUS_TREZOR\x10\x02*\xd2\x01\n\x12CardanoAddressType\x12\x08\n\x04BA\
    SE\x10\0\x12\x13\n\x0fBASE_SCRIPT_KEY\x10\x01\x12\x13\n\x0fBASE_KEY_SCRI\
    PT\x10\x02\x12\x16\n\x12BASE_SCRIPT_SCRIPT\x10\x03\x12\x0b\n\x07POINTER\
    \x10\x04\x12\x12\n\x0ePOINTER_SCRIPT\x10\x05\x12\x0e\n\nENTERPRISE\x10\
    \x06\x12\x15\n\x11ENTERPRISE_SCRIPT\x10\x07\x12\t\n\x05BYRON\x10\x08\x12\
    \n\n\x06REWARD\x10\x0e\x12\x11\n\rREWARD_SCRIPT\x10\x0f*o\n\x17CardanoNa\
    tiveScriptType\x12\x0b\n\x07PUB_KEY\x10\0\x12\x07\n\x03ALL\x10\x01\x12\
    \x07\n\x03ANY\x10\x02\x12\n\n\x06N_OF_K\x10\x03\x12\x12\n\x0eINVALID_BEF\
    ORE\x10\x04\x12\x15\n\x11INVALID_HEREAFTER\x10\x05*K\n$CardanoNativeScri\
    ptHashDisplayFormat\x12\x08\n\x04HIDE\x10\0\x12\n\n\x06BECH32\x10\x01\
    \x12\r\n\tPOLICY_ID\x10\x02*}\n\x16CardanoCertificateType\x12\x16\n\x12S\
    TAKE_REGISTRATION\x10\0\x12\x18\n\x14STAKE_DEREGISTRATION\x10\x01\x12\
    \x14\n\x10STAKE_DELEGATION\x10\x02\x12\x1b\n\x17STAKE_POOL_REGISTRATION\
    \x10\x03*X\n\x14CardanoPoolRelayType\x12\x12\n\x0eSINGLE_HOST_IP\x10\0\
    \x12\x14\n\x10SINGLE_HOST_NAME\x10\x01\x12\x16\n\x12MULTIPLE_HOST_NAME\
    \x10\x02*U\n$CardanoTxAuxiliaryDataSupplementType\x12\x08\n\x04NONE\x10\
    \0\x12#\n\x1fCATALYST_REGISTRATION_SIGNATURE\x10\x01*j\n\x14CardanoTxSig\
    ningMode\x12\x18\n\x14ORDINARY_TRANSACTION\x10\0\x12\x1e\n\x1aPOOL_REGIS\
    TRATION_AS_OWNER\x10\x01\x12\x18\n\x14MULTISIG_TRANSACTION\x10\x02*>\n\
    \x14CardanoTxWitnessType\x12\x11\n\rBYRON_WITNESS\x10\0\x12\x13\n\x0fSHE\
    LLEY_WITNESS\x10\x01B;\n#com.satoshilabs.trezor.lib.protobufB\x14TrezorM\
    essageCardanoJ\xd7\xa8\x01\n\x07\x12\x05\0\0\x9d\x04\x01\n\x08\n\x01\x0c\
    \x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\x08\"\n\x08\n\x01\x08\x12\
    \x03\x04\0<\n.\n\x02\x08\x01\x12\x03\x04\0<\x1a#\x20Sugar\x20for\x20easi\
    er\x20handling\x20in\x20Java\n\n\x08\n\x01\x08\x12\x03\x05\05\n\t\n\x02\
    \x08\x08\x12\x03\x05\05\n\t\n\x02\x03\0\x12\x03\x07\x07\x1e\n\n\n\x02\
    \x05\0\x12\x04\t\0\r\x01\n\n\n\x03\x05\0\x01\x12\x03\t\x05\x1a\n\x0b\n\
    \x04\x05\0\x02\0\x12\x03\n\x04\x0f\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\n\
    \x04\n\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\n\r\x0e\n\x0b\n\x04\x05\0\x02\
    \x01\x12\x03\x0b\x04\x0f\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x0b\x04\n\
    \n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x0b\r\x0e\n\x0b\n\x04\x05\0\x02\
    \x02\x12\x03\x0c\x04\x16\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x0c\x04\
    \x11\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x0c\x14\x15\n\x8a\x01\n\x02\
    \x05\x01\x12\x04\x13\0\x1f\x01\x1a~*\n\x20Values\x20correspond\x20to\x20\
    address\x20header\x20values\x20given\x20by\x20the\x20spec.\n\x20Script\
    \x20addresses\x20are\x20only\x20supported\x20in\x20transaction\x20output\
    s.\n\n\n\n\x03\x05\x01\x01\x12\x03\x13\x05\x17\n\x0b\n\x04\x05\x01\x02\0\
    \x12\x03\x14\x04\r\n\x0c\n\x05\x05\x01\x02\0\x01\x12\x03\x14\x04\x08\n\
    \x0c\n\x05\x05\x01\x02\0\x02\x12\x03\x14\x0b\x0c\n\x0b\n\x04\x05\x01\x02\
    \x01\x12\x03\x15\x04\x18\n\x0c\n\x05\x05\x01\x02\x01\x01\x12\x03\x15\x04\
    \x13\n\x0c\n\x05\x05\x01\x02\x01\x02\x12\x03\x15\x16\x17\n\x0b\n\x04\x05\
    \x01\x02\x02\x12\x03\x16\x04\x18\n\x0c\n\x05\x05\x01\x02\x02\x01\x12\x03\
    \x16\x04\x13\n\x0c\n\x05\x05\x01\x02\x02\x02\x12\x03\x16\x16\x17\n\x0b\n\
    \x04\x05\x01\x02\x03\x12\x03\x17\x04\x1b\n\x0c\n\x05\x05\x01\x02\x03\x01\
    \x12\x03\x17\x04\x16\n\x0c\n\x05\x05\x01\x02\x03\x02\x12\x03\x17\x19\x1a\
    \n\x0b\n\x04\x05\x01\x02\x04\x12\x03\x18\x04\x10\n\x0c\n\x05\x05\x01\x02\
    \x04\x01\x12\x03\x18\x04\x0b\n\x0c\n\x05\x05\x01\x02\x04\x02\x12\x03\x18\
    \x0e\x0f\n\x0b\n\x04\x05\x01\x02\x05\x12\x03\x19\x04\x17\n\x0c\n\x05\x05\
    \x01\x02\x05\x01\x12\x03\x19\x04\x12\n\x0c\n\x05\x05\x01\x02\x05\x02\x12\
    \x03\x19\x15\x16\n\x0b\n\x04\x05\x01\x02\x06\x12\x03\x1a\x04\x13\n\x0c\n\
    \x05\x05\x01\x02\x06\x01\x12\x03\x1a\x04\x0e\n\x0c\n\x05\x05\x01\x02\x06\
    \x02\x12\x03\x1a\x11\x12\n\x0b\n\x04\x05\x01\x02\x07\x12\x03\x1b\x04\x1a\
    \n\x0c\n\x05\x05\x01\x02\x07\x01\x12\x03\x1b\x04\x15\n\x0c\n\x05\x05\x01\
    \x02\x07\x02\x12\x03\x1b\x18\x19\n\x0b\n\x04\x05\x01\x02\x08\x12\x03\x1c\
    \x04\x0e\n\x0c\n\x05\x05\x01\x02\x08\x01\x12\x03\x1c\x04\t\n\x0c\n\x05\
    \x05\x01\x02\x08\x02\x12\x03\x1c\x0c\r\n\x0b\n\x04\x05\x01\x02\t\x12\x03\
    \x1d\x04\x10\n\x0c\n\x05\x05\x01\x02\t\x01\x12\x03\x1d\x04\n\n\x0c\n\x05\
    \x05\x01\x02\t\x02\x12\x03\x1d\r\x0f\n\x0b\n\x04\x05\x01\x02\n\x12\x03\
    \x1e\x04\x17\n\x0c\n\x05\x05\x01\x02\n\x01\x12\x03\x1e\x04\x11\n\x0c\n\
    \x05\x05\x01\x02\n\x02\x12\x03\x1e\x14\x16\n\n\n\x02\x05\x02\x12\x04!\0(\
    \x01\n\n\n\x03\x05\x02\x01\x12\x03!\x05\x1c\n\x0b\n\x04\x05\x02\x02\0\
    \x12\x03\"\x04\x10\n\x0c\n\x05\x05\x02\x02\0\x01\x12\x03\"\x04\x0b\n\x0c\
    \n\x05\x05\x02\x02\0\x02\x12\x03\"\x0e\x0f\n\x0b\n\x04\x05\x02\x02\x01\
    \x12\x03#\x04\x0c\n\x0c\n\x05\x05\x02\x02\x01\x01\x12\x03#\x04\x07\n\x0c\
    \n\x05\x05\x02\x02\x01\x02\x12\x03#\n\x0b\n\x0b\n\x04\x05\x02\x02\x02\
    \x12\x03$\x04\x0c\n\x0c\n\x05\x05\x02\x02\x02\x01\x12\x03$\x04\x07\n\x0c\
    \n\x05\x05\x02\x02\x02\x02\x12\x03$\n\x0b\n\x0b\n\x04\x05\x02\x02\x03\
    \x12\x03%\x04\x0f\n\x0c\n\x05\x05\x02\x02\x03\x01\x12\x03%\x04\n\n\x0c\n\
    \x05\x05\x02\x02\x03\x02\x12\x03%\r\x0e\n\x0b\n\x04\x05\x02\x02\x04\x12\
    \x03&\x04\x17\n\x0c\n\x05\x05\x02\x02\x04\x01\x12\x03&\x04\x12\n\x0c\n\
    \x05\x05\x02\x02\x04\x02\x12\x03&\x15\x16\n\x0b\n\x04\x05\x02\x02\x05\
    \x12\x03'\x04\x1a\n\x0c\n\x05\x05\x02\x02\x05\x01\x12\x03'\x04\x15\n\x0c\
    \n\x05\x05\x02\x02\x05\x02\x12\x03'\x18\x19\n\n\n\x02\x05\x03\x12\x04*\0\
    .\x01\n\n\n\x03\x05\x03\x01\x12\x03*\x05)\n\x0b\n\x04\x05\x03\x02\0\x12\
    \x03+\x04\r\n\x0c\n\x05\x05\x03\x02\0\x01\x12\x03+\x04\x08\n\x0c\n\x05\
    \x05\x03\x02\0\x02\x12\x03+\x0b\x0c\n\x0b\n\x04\x05\x03\x02\x01\x12\x03,\
    \x04\x0f\n\x0c\n\x05\x05\x03\x02\x01\x01\x12\x03,\x04\n\n\x0c\n\x05\x05\
    \x03\x02\x01\x02\x12\x03,\r\x0e\n\x0b\n\x04\x05\x03\x02\x02\x12\x03-\x04\
    \x12\n\x0c\n\x05\x05\x03\x02\x02\x01\x12\x03-\x04\r\n\x0c\n\x05\x05\x03\
    \x02\x02\x02\x12\x03-\x10\x11\n\n\n\x02\x05\x04\x12\x040\05\x01\n\n\n\
    \x03\x05\x04\x01\x12\x030\x05\x1b\n\x0b\n\x04\x05\x04\x02\0\x12\x031\x04\
    \x1b\n\x0c\n\x05\x05\x04\x02\0\x01\x12\x031\x04\x16\n\x0c\n\x05\x05\x04\
    \x02\0\x02\x12\x031\x19\x1a\n\x0b\n\x04\x05\x04\x02\x01\x12\x032\x04\x1d\
    \n\x0c\n\x05\x05\x04\x02\x01\x01\x12\x032\x04\x18\n\x0c\n\x05\x05\x04\
    \x02\x01\x02\x12\x032\x1b\x1c\n\x0b\n\x04\x05\x04\x02\x02\x12\x033\x04\
    \x19\n\x0c\n\x05\x05\x04\x02\x02\x01\x12\x033\x04\x14\n\x0c\n\x05\x05\
    \x04\x02\x02\x02\x12\x033\x17\x18\n\x0b\n\x04\x05\x04\x02\x03\x12\x034\
    \x04\x20\n\x0c\n\x05\x05\x04\x02\x03\x01\x12\x034\x04\x1b\n\x0c\n\x05\
    \x05\x04\x02\x03\x02\x12\x034\x1e\x1f\n\n\n\x02\x05\x05\x12\x047\0;\x01\
    \n\n\n\x03\x05\x05\x01\x12\x037\x05\x19\n\x0b\n\x04\x05\x05\x02\0\x12\
    \x038\x04\x17\n\x0c\n\x05\x05\x05\x02\0\x01\x12\x038\x04\x12\n\x0c\n\x05\
    \x05\x05\x02\0\x02\x12\x038\x15\x16\n\x0b\n\x04\x05\x05\x02\x01\x12\x039\
    \x04\x19\n\x0c\n\x05\x05\x05\x02\x01\x01\x12\x039\x04\x14\n\x0c\n\x05\
    \x05\x05\x02\x01\x02\x12\x039\x17\x18\n\x0b\n\x04\x05\x05\x02\x02\x12\
    \x03:\x04\x1b\n\x0c\n\x05\x05\x05\x02\x02\x01\x12\x03:\x04\x16\n\x0c\n\
    \x05\x05\x05\x02\x02\x02\x12\x03:\x19\x1a\n\n\n\x02\x05\x06\x12\x04=\0@\
    \x01\n\n\n\x03\x05\x06\x01\x12\x03=\x05)\n\x0b\n\x04\x05\x06\x02\0\x12\
    \x03>\x04\r\n\x0c\n\x05\x05\x06\x02\0\x01\x12\x03>\x04\x08\n\x0c\n\x05\
    \x05\x06\x02\0\x02\x12\x03>\x0b\x0c\n\x0b\n\x04\x05\x06\x02\x01\x12\x03?\
    \x04(\n\x0c\n\x05\x05\x06\x02\x01\x01\x12\x03?\x04#\n\x0c\n\x05\x05\x06\
    \x02\x01\x02\x12\x03?&'\n\n\n\x02\x05\x07\x12\x04B\0F\x01\n\n\n\x03\x05\
    \x07\x01\x12\x03B\x05\x19\n\x0b\n\x04\x05\x07\x02\0\x12\x03C\x04\x1d\n\
    \x0c\n\x05\x05\x07\x02\0\x01\x12\x03C\x04\x18\n\x0c\n\x05\x05\x07\x02\0\
    \x02\x12\x03C\x1b\x1c\n\x0b\n\x04\x05\x07\x02\x01\x12\x03D\x04#\n\x0c\n\
    \x05\x05\x07\x02\x01\x01\x12\x03D\x04\x1e\n\x0c\n\x05\x05\x07\x02\x01\
    \x02\x12\x03D!\"\n\x0b\n\x04\x05\x07\x02\x02\x12\x03E\x04\x1d\n\x0c\n\
    \x05\x05\x07\x02\x02\x01\x12\x03E\x04\x18\n\x0c\n\x05\x05\x07\x02\x02\
    \x02\x12\x03E\x1b\x1c\n\n\n\x02\x05\x08\x12\x04H\0K\x01\n\n\n\x03\x05\
    \x08\x01\x12\x03H\x05\x19\n\x0b\n\x04\x05\x08\x02\0\x12\x03I\x04\x16\n\
    \x0c\n\x05\x05\x08\x02\0\x01\x12\x03I\x04\x11\n\x0c\n\x05\x05\x08\x02\0\
    \x02\x12\x03I\x14\x15\n\x0b\n\x04\x05\x08\x02\x01\x12\x03J\x04\x18\n\x0c\
    \n\x05\x05\x08\x02\x01\x01\x12\x03J\x04\x13\n\x0c\n\x05\x05\x08\x02\x01\
    \x02\x12\x03J\x16\x17\n\x87\x01\n\x02\x04\0\x12\x04R\0V\x01\x1a{*\n\x20S\
    tructure\x20representing\x20cardano\x20PointerAddress\x20pointer,\n\x20w\
    hich\x20points\x20to\x20a\x20staking\x20key\x20registration\x20certifica\
    te.\n\x20@embed\n\n\n\n\x03\x04\0\x01\x12\x03R\x08$\n\x0b\n\x04\x04\0\
    \x02\0\x12\x03S\x04$\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03S\x04\x0c\n\x0c\
    \n\x05\x04\0\x02\0\x05\x12\x03S\r\x13\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03S\x14\x1f\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03S\"#\n\x0b\n\x04\x04\0\
    \x02\x01\x12\x03T\x04!\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03T\x04\x0c\n\
    \x0c\n\x05\x04\0\x02\x01\x05\x12\x03T\r\x13\n\x0c\n\x05\x04\0\x02\x01\
    \x01\x12\x03T\x14\x1c\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03T\x1f\x20\n\
    \x0b\n\x04\x04\0\x02\x02\x12\x03U\x04*\n\x0c\n\x05\x04\0\x02\x02\x04\x12\
    \x03U\x04\x0c\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03U\r\x13\n\x0c\n\x05\
    \x04\0\x02\x02\x01\x12\x03U\x14%\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03U(\
    )\n\x15\n\x02\x04\x01\x12\x04[\0d\x01\x1a\t\n\x20@embed\n\n\n\n\x03\x04\
    \x01\x01\x12\x03[\x08\x1b\n\x0b\n\x04\x04\x01\x02\0\x12\x03\\\x04.\n\x0c\
    \n\x05\x04\x01\x02\0\x04\x12\x03\\\x04\x0c\n\x0c\n\x05\x04\x01\x02\0\x06\
    \x12\x03\\\r$\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\\%)\n\x0c\n\x05\x04\
    \x01\x02\0\x03\x12\x03\\,-\n\x0b\n\x04\x04\x01\x02\x01\x12\x03]\x04-\n\
    \x0c\n\x05\x04\x01\x02\x01\x04\x12\x03]\x04\x0c\n\x0c\n\x05\x04\x01\x02\
    \x01\x06\x12\x03]\r\x20\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03]!(\n\x0c\
    \n\x05\x04\x01\x02\x01\x03\x12\x03]+,\n\x0b\n\x04\x04\x01\x02\x02\x12\
    \x03_\x04\x20\n\x0c\n\x05\x04\x01\x02\x02\x04\x12\x03_\x04\x0c\n\x0c\n\
    \x05\x04\x01\x02\x02\x05\x12\x03_\r\x12\n\x0c\n\x05\x04\x01\x02\x02\x01\
    \x12\x03_\x13\x1b\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03_\x1e\x1f\n\x0b\
    \n\x04\x04\x01\x02\x03\x12\x03`\x04!\n\x0c\n\x05\x04\x01\x02\x03\x04\x12\
    \x03`\x04\x0c\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03`\r\x13\n\x0c\n\x05\
    \x04\x01\x02\x03\x01\x12\x03`\x14\x1c\n\x0c\n\x05\x04\x01\x02\x03\x03\
    \x12\x03`\x1f\x20\n\x0b\n\x04\x04\x01\x02\x04\x12\x03a\x042\n\x0c\n\x05\
    \x04\x01\x02\x04\x04\x12\x03a\x04\x0c\n\x0c\n\x05\x04\x01\x02\x04\x05\
    \x12\x03a\r\x13\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03a\x14-\n\x0c\n\
    \x05\x04\x01\x02\x04\x03\x12\x03a01\n\x0b\n\x04\x04\x01\x02\x05\x12\x03b\
    \x04'\n\x0c\n\x05\x04\x01\x02\x05\x04\x12\x03b\x04\x0c\n\x0c\n\x05\x04\
    \x01\x02\x05\x05\x12\x03b\r\x13\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03b\
    \x14\"\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03b%&\n\x0b\n\x04\x04\x01\
    \x02\x06\x12\x03c\x04*\n\x0c\n\x05\x04\x01\x02\x06\x04\x12\x03c\x04\x0c\
    \n\x0c\n\x05\x04\x01\x02\x06\x05\x12\x03c\r\x13\n\x0c\n\x05\x04\x01\x02\
    \x06\x01\x12\x03c\x14%\n\x0c\n\x05\x04\x01\x02\x06\x03\x12\x03c()\nx\n\
    \x02\x04\x02\x12\x04l\0p\x01\x1al*\n\x20Request:\x20Ask\x20device\x20for\
    \x20Cardano\x20native\x20script\x20hash\n\x20@start\n\x20@next\x20Cardan\
    oNativeScriptHash\n\x20@next\x20Failure\n\n\n\n\x03\x04\x02\x01\x12\x03l\
    \x08\"\n\x0b\n\x04\x04\x02\x02\0\x12\x03m\x04,\n\x0c\n\x05\x04\x02\x02\0\
    \x04\x12\x03m\x04\x0c\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03m\r\x20\n\x0c\
    \n\x05\x04\x02\x02\0\x01\x12\x03m!'\n\x0c\n\x05\x04\x02\x02\0\x03\x12\
    \x03m*+\n2\n\x04\x04\x02\x02\x01\x12\x03n\x04E\"%\x20display\x20hash\x20\
    as\x20bech32\x20or\x20policy\x20id\n\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\
    \x03n\x04\x0c\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03n\r1\n\x0c\n\x05\
    \x04\x02\x02\x01\x01\x12\x03n2@\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03n\
    CD\n\x0b\n\x04\x04\x02\x02\x02\x12\x03o\x047\n\x0c\n\x05\x04\x02\x02\x02\
    \x04\x12\x03o\x04\x0c\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x03o\r\"\n\x0c\
    \n\x05\x04\x02\x02\x02\x01\x12\x03o#2\n\x0c\n\x05\x04\x02\x02\x02\x03\
    \x12\x03o56\nH\n\x02\x04\x03\x12\x04v\0x\x01\x1a<*\n\x20Request:\x20Ask\
    \x20device\x20for\x20Cardano\x20native\x20script\x20hash\n\x20@end\n\n\n\
    \n\x03\x04\x03\x01\x12\x03v\x08\x1f\n\x0b\n\x04\x04\x03\x02\0\x12\x03w\
    \x04#\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03w\x04\x0c\n\x0c\n\x05\x04\x03\
    \x02\0\x05\x12\x03w\r\x12\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03w\x13\x1e\
    \n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03w!\"\n\xaf\x02\n\x02\x04\x04\x12\
    \x06\x82\x01\0\x8c\x01\x01\x1a\xa0\x02*\n\x20Structure\x20to\x20represen\
    t\x20address\x20parameters\x20so\x20they\x20can\x20be\n\x20reused\x20in\
    \x20CardanoGetAddress\x20and\x20CardanoTxOutputType.\n\x20NetworkId\x20i\
    sn't\x20a\x20part\x20of\x20the\x20parameters,\x20because\x20in\x20a\x20t\
    ransaction\n\x20this\x20will\x20be\x20included\x20separately\x20in\x20th\
    e\x20transaction\x20itself,\x20so\x20it\n\x20shouldn't\x20be\x20duplicat\
    ed\x20here.\n\x20@embed\n\n\x0b\n\x03\x04\x04\x01\x12\x04\x82\x01\x08$\n\
    /\n\x04\x04\x04\x02\0\x12\x04\x83\x01\x041\"!\x20one\x20of\x20the\x20Car\
    danoAddressType-s\n\n\r\n\x05\x04\x04\x02\0\x04\x12\x04\x83\x01\x04\x0c\
    \n\r\n\x05\x04\x04\x02\0\x06\x12\x04\x83\x01\r\x1f\n\r\n\x05\x04\x04\x02\
    \0\x01\x12\x04\x83\x01\x20,\n\r\n\x05\x04\x04\x02\0\x03\x12\x04\x83\x01/\
    0\nM\n\x04\x04\x04\x02\x01\x12\x04\x84\x01\x04\"\"?\x20BIP-32-style\x20p\
    ath\x20to\x20derive\x20the\x20spending\x20key\x20from\x20master\x20node\
    \n\n\r\n\x05\x04\x04\x02\x01\x04\x12\x04\x84\x01\x04\x0c\n\r\n\x05\x04\
    \x04\x02\x01\x05\x12\x04\x84\x01\r\x13\n\r\n\x05\x04\x04\x02\x01\x01\x12\
    \x04\x84\x01\x14\x1d\n\r\n\x05\x04\x04\x02\x01\x03\x12\x04\x84\x01\x20!\
    \nH\n\x04\x04\x04\x02\x02\x12\x04\x85\x01\x04*\":\x20BIP-32-style\x20pat\
    h\x20to\x20derive\x20staking\x20key\x20from\x20master\x20node\n\n\r\n\
    \x05\x04\x04\x02\x02\x04\x12\x04\x85\x01\x04\x0c\n\r\n\x05\x04\x04\x02\
    \x02\x05\x12\x04\x85\x01\r\x13\n\r\n\x05\x04\x04\x02\x02\x01\x12\x04\x85\
    \x01\x14%\n\r\n\x05\x04\x04\x02\x02\x03\x12\x04\x85\x01()\nE\n\x04\x04\
    \x04\x02\x03\x12\x04\x86\x01\x04(\"7\x20staking\x20key\x20can\x20be\x20d\
    erived\x20from\x20address_n_staking,\x20or\n\n\r\n\x05\x04\x04\x02\x03\
    \x04\x12\x04\x86\x01\x04\x0c\n\r\n\x05\x04\x04\x02\x03\x05\x12\x04\x86\
    \x01\r\x12\n\r\n\x05\x04\x04\x02\x03\x01\x12\x04\x86\x01\x13#\n\r\n\x05\
    \x04\x04\x02\x03\x03\x12\x04\x86\x01&'\n\x99\x01\n\x04\x04\x04\x02\x04\
    \x12\x04\x89\x01\x04B\x1aR\x20can\x20be\x20sent\x20directly\x20e.g.\x20i\
    f\x20it\x20doesn't\x20belong\x20to\n\x20the\x20same\x20account\x20as\x20\
    address_n\n\"7\x20a\x20pointer\x20to\x20the\x20staking\x20key\x20registr\
    ation\x20certificate\n\n\r\n\x05\x04\x04\x02\x04\x04\x12\x04\x89\x01\x04\
    \x0c\n\r\n\x05\x04\x04\x02\x04\x06\x12\x04\x89\x01\r)\n\r\n\x05\x04\x04\
    \x02\x04\x01\x12\x04\x89\x01*=\n\r\n\x05\x04\x04\x02\x04\x03\x12\x04\x89\
    \x01@A\n\x0c\n\x04\x04\x04\x02\x05\x12\x04\x8a\x01\x04+\n\r\n\x05\x04\
    \x04\x02\x05\x04\x12\x04\x8a\x01\x04\x0c\n\r\n\x05\x04\x04\x02\x05\x05\
    \x12\x04\x8a\x01\r\x12\n\r\n\x05\x04\x04\x02\x05\x01\x12\x04\x8a\x01\x13\
    &\n\r\n\x05\x04\x04\x02\x05\x03\x12\x04\x8a\x01)*\n\x0c\n\x04\x04\x04\
    \x02\x06\x12\x04\x8b\x01\x04+\n\r\n\x05\x04\x04\x02\x06\x04\x12\x04\x8b\
    \x01\x04\x0c\n\r\n\x05\x04\x04\x02\x06\x05\x12\x04\x8b\x01\r\x12\n\r\n\
    \x05\x04\x04\x02\x06\x01\x12\x04\x8b\x01\x13&\n\r\n\x05\x04\x04\x02\x06\
    \x03\x12\x04\x8b\x01)*\nf\n\x02\x04\x05\x12\x06\x94\x01\0\x9b\x01\x01\
    \x1aX*\n\x20Request:\x20Ask\x20device\x20for\x20Cardano\x20address\n\x20\
    @start\n\x20@next\x20CardanoAddress\n\x20@next\x20Failure\n\n\x0b\n\x03\
    \x04\x05\x01\x12\x04\x94\x01\x08\x19\n\xa3\x01\n\x04\x04\x05\x02\0\x12\
    \x04\x96\x01\x043\x1a]\x20repeated\x20uint32\x20address_n\x20=\x201;\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20moved\x20to\x20add\
    ress_parameters\n\"6\x20optionally\x20prompt\x20for\x20confirmation\x20o\
    n\x20trezor\x20display\n\n\r\n\x05\x04\x05\x02\0\x04\x12\x04\x96\x01\x04\
    \x0c\n\r\n\x05\x04\x05\x02\0\x05\x12\x04\x96\x01\r\x11\n\r\n\x05\x04\x05\
    \x02\0\x01\x12\x04\x96\x01\x12\x1e\n\r\n\x05\x04\x05\x02\0\x03\x12\x04\
    \x96\x01!\"\n\r\n\x05\x04\x05\x02\0\x08\x12\x04\x96\x01#2\n\r\n\x05\x04\
    \x05\x02\0\x07\x12\x04\x96\x01,1\nQ\n\x04\x04\x05\x02\x01\x12\x04\x97\
    \x01\x04'\"C\x20network's\x20protocol\x20magic\x20-\x20needed\x20for\x20\
    Byron\x20addresses\x20on\x20testnets\n\n\r\n\x05\x04\x05\x02\x01\x04\x12\
    \x04\x97\x01\x04\x0c\n\r\n\x05\x04\x05\x02\x01\x05\x12\x04\x97\x01\r\x13\
    \n\r\n\x05\x04\x05\x02\x01\x01\x12\x04\x97\x01\x14\"\n\r\n\x05\x04\x05\
    \x02\x01\x03\x12\x04\x97\x01%&\n/\n\x04\x04\x05\x02\x02\x12\x04\x98\x01\
    \x04#\"!\x20network\x20id\x20-\x20mainnet\x20or\x20testnet\n\n\r\n\x05\
    \x04\x05\x02\x02\x04\x12\x04\x98\x01\x04\x0c\n\r\n\x05\x04\x05\x02\x02\
    \x05\x12\x04\x98\x01\r\x13\n\r\n\x05\x04\x05\x02\x02\x01\x12\x04\x98\x01\
    \x14\x1e\n\r\n\x05\x04\x05\x02\x02\x03\x12\x04\x98\x01!\"\n5\n\x04\x04\
    \x05\x02\x03\x12\x04\x99\x01\x04A\"'\x20parameters\x20used\x20to\x20deri\
    ve\x20the\x20address\n\n\r\n\x05\x04\x05\x02\x03\x04\x12\x04\x99\x01\x04\
    \x0c\n\r\n\x05\x04\x05\x02\x03\x06\x12\x04\x99\x01\r)\n\r\n\x05\x04\x05\
    \x02\x03\x01\x12\x04\x99\x01*<\n\r\n\x05\x04\x05\x02\x03\x03\x12\x04\x99\
    \x01?@\n\x0c\n\x04\x04\x05\x02\x04\x12\x04\x9a\x01\x047\n\r\n\x05\x04\
    \x05\x02\x04\x04\x12\x04\x9a\x01\x04\x0c\n\r\n\x05\x04\x05\x02\x04\x06\
    \x12\x04\x9a\x01\r\"\n\r\n\x05\x04\x05\x02\x04\x01\x12\x04\x9a\x01#2\n\r\
    \n\x05\x04\x05\x02\x04\x03\x12\x04\x9a\x0156\n?\n\x02\x04\x06\x12\x06\
    \xa1\x01\0\xa3\x01\x01\x1a1*\n\x20Request:\x20Ask\x20device\x20for\x20Ca\
    rdano\x20address\n\x20@end\n\n\x0b\n\x03\x04\x06\x01\x12\x04\xa1\x01\x08\
    \x16\n&\n\x04\x04\x06\x02\0\x12\x04\xa2\x01\x04\x20\"\x18\x20Base58\x20c\
    ardano\x20address\n\n\r\n\x05\x04\x06\x02\0\x04\x12\x04\xa2\x01\x04\x0c\
    \n\r\n\x05\x04\x06\x02\0\x05\x12\x04\xa2\x01\r\x13\n\r\n\x05\x04\x06\x02\
    \0\x01\x12\x04\xa2\x01\x14\x1b\n\r\n\x05\x04\x06\x02\0\x03\x12\x04\xa2\
    \x01\x1e\x1f\n\x83\x01\n\x02\x04\x07\x12\x06\xab\x01\0\xaf\x01\x01\x1au*\
    \n\x20Request:\x20Ask\x20device\x20for\x20public\x20key\x20corresponding\
    \x20to\x20address_n\x20path\n\x20@start\n\x20@next\x20CardanoPublicKey\n\
    \x20@next\x20Failure\n\n\x0b\n\x03\x04\x07\x01\x12\x04\xab\x01\x08\x1b\n\
    >\n\x04\x04\x07\x02\0\x12\x04\xac\x01\x04\"\"0\x20BIP-32\x20path\x20to\
    \x20derive\x20the\x20key\x20from\x20master\x20node\n\n\r\n\x05\x04\x07\
    \x02\0\x04\x12\x04\xac\x01\x04\x0c\n\r\n\x05\x04\x07\x02\0\x05\x12\x04\
    \xac\x01\r\x13\n\r\n\x05\x04\x07\x02\0\x01\x12\x04\xac\x01\x14\x1d\n\r\n\
    \x05\x04\x07\x02\0\x03\x12\x04\xac\x01\x20!\nD\n\x04\x04\x07\x02\x01\x12\
    \x04\xad\x01\x04#\"6\x20optionally\x20show\x20on\x20display\x20before\
    \x20sending\x20the\x20result\n\n\r\n\x05\x04\x07\x02\x01\x04\x12\x04\xad\
    \x01\x04\x0c\n\r\n\x05\x04\x07\x02\x01\x05\x12\x04\xad\x01\r\x11\n\r\n\
    \x05\x04\x07\x02\x01\x01\x12\x04\xad\x01\x12\x1e\n\r\n\x05\x04\x07\x02\
    \x01\x03\x12\x04\xad\x01!\"\n\x0c\n\x04\x04\x07\x02\x02\x12\x04\xae\x01\
    \x047\n\r\n\x05\x04\x07\x02\x02\x04\x12\x04\xae\x01\x04\x0c\n\r\n\x05\
    \x04\x07\x02\x02\x06\x12\x04\xae\x01\r\"\n\r\n\x05\x04\x07\x02\x02\x01\
    \x12\x04\xae\x01#2\n\r\n\x05\x04\x07\x02\x02\x03\x12\x04\xae\x0156\nV\n\
    \x02\x04\x08\x12\x06\xb5\x01\0\xb8\x01\x01\x1aH*\n\x20Response:\x20Conta\
    ins\x20public\x20key\x20derived\x20from\x20device\x20private\x20seed\n\
    \x20@end\n\n\x0b\n\x03\x04\x08\x01\x12\x04\xb5\x01\x08\x18\n\x18\n\x04\
    \x04\x08\x02\0\x12\x04\xb6\x01\x04\x1d\"\n\x20Xpub\x20key\n\n\r\n\x05\
    \x04\x08\x02\0\x04\x12\x04\xb6\x01\x04\x0c\n\r\n\x05\x04\x08\x02\0\x05\
    \x12\x04\xb6\x01\r\x13\n\r\n\x05\x04\x08\x02\0\x01\x12\x04\xb6\x01\x14\
    \x18\n\r\n\x05\x04\x08\x02\0\x03\x12\x04\xb6\x01\x1b\x1c\n\"\n\x04\x04\
    \x08\x02\x01\x12\x04\xb7\x01\x04;\"\x14\x20BIP-32\x20public\x20node\n\n\
    \r\n\x05\x04\x08\x02\x01\x04\x12\x04\xb7\x01\x04\x0c\n\r\n\x05\x04\x08\
    \x02\x01\x06\x12\x04\xb7\x01\r1\n\r\n\x05\x04\x08\x02\x01\x01\x12\x04\
    \xb7\x0126\n\r\n\x05\x04\x08\x02\x01\x03\x12\x04\xb7\x019:\n\x88\x01\n\
    \x02\x04\t\x12\x06\xc0\x01\0\xcf\x01\x01\x1az*\n\x20Request:\x20Initiate\
    \x20the\x20Cardano\x20transaction\x20signing\x20process\x20on\x20the\x20\
    device\n\x20@start\n\x20@next\x20CardanoTxItemAck\n\x20@next\x20Failure\
    \n\n\x0b\n\x03\x04\t\x01\x12\x04\xc0\x01\x08\x19\n\x0c\n\x04\x04\t\x02\0\
    \x12\x04\xc1\x01\x043\n\r\n\x05\x04\t\x02\0\x04\x12\x04\xc1\x01\x04\x0c\
    \n\r\n\x05\x04\t\x02\0\x06\x12\x04\xc1\x01\r!\n\r\n\x05\x04\t\x02\0\x01\
    \x12\x04\xc1\x01\".\n\r\n\x05\x04\t\x02\0\x03\x12\x04\xc1\x0112\n(\n\x04\
    \x04\t\x02\x01\x12\x04\xc2\x01\x04'\"\x1a\x20network's\x20protocol\x20ma\
    gic\n\n\r\n\x05\x04\t\x02\x01\x04\x12\x04\xc2\x01\x04\x0c\n\r\n\x05\x04\
    \t\x02\x01\x05\x12\x04\xc2\x01\r\x13\n\r\n\x05\x04\t\x02\x01\x01\x12\x04\
    \xc2\x01\x14\"\n\r\n\x05\x04\t\x02\x01\x03\x12\x04\xc2\x01%&\n/\n\x04\
    \x04\t\x02\x02\x12\x04\xc3\x01\x04#\"!\x20network\x20id\x20-\x20mainnet\
    \x20or\x20testnet\n\n\r\n\x05\x04\t\x02\x02\x04\x12\x04\xc3\x01\x04\x0c\
    \n\r\n\x05\x04\t\x02\x02\x05\x12\x04\xc3\x01\r\x13\n\r\n\x05\x04\t\x02\
    \x02\x01\x12\x04\xc3\x01\x14\x1e\n\r\n\x05\x04\t\x02\x02\x03\x12\x04\xc3\
    \x01!\"\n\x0c\n\x04\x04\t\x02\x03\x12\x04\xc4\x01\x04%\n\r\n\x05\x04\t\
    \x02\x03\x04\x12\x04\xc4\x01\x04\x0c\n\r\n\x05\x04\t\x02\x03\x05\x12\x04\
    \xc4\x01\r\x13\n\r\n\x05\x04\t\x02\x03\x01\x12\x04\xc4\x01\x14\x20\n\r\n\
    \x05\x04\t\x02\x03\x03\x12\x04\xc4\x01#$\n\x0c\n\x04\x04\t\x02\x04\x12\
    \x04\xc5\x01\x04&\n\r\n\x05\x04\t\x02\x04\x04\x12\x04\xc5\x01\x04\x0c\n\
    \r\n\x05\x04\t\x02\x04\x05\x12\x04\xc5\x01\r\x13\n\r\n\x05\x04\t\x02\x04\
    \x01\x12\x04\xc5\x01\x14!\n\r\n\x05\x04\t\x02\x04\x03\x12\x04\xc5\x01$%\
    \n2\n\x04\x04\t\x02\x05\x12\x04\xc6\x01\x04\x1c\"$\x20transaction\x20fee\
    \x20-\x20added\x20in\x20shelley\n\n\r\n\x05\x04\t\x02\x05\x04\x12\x04\
    \xc6\x01\x04\x0c\n\r\n\x05\x04\t\x02\x05\x05\x12\x04\xc6\x01\r\x13\n\r\n\
    \x05\x04\t\x02\x05\x01\x12\x04\xc6\x01\x14\x17\n\r\n\x05\x04\t\x02\x05\
    \x03\x12\x04\xc6\x01\x1a\x1b\n2\n\x04\x04\t\x02\x06\x12\x04\xc7\x01\x04\
    \x1c\"$\x20transaction\x20ttl\x20-\x20added\x20in\x20shelley\n\n\r\n\x05\
    \x04\t\x02\x06\x04\x12\x04\xc7\x01\x04\x0c\n\r\n\x05\x04\t\x02\x06\x05\
    \x12\x04\xc7\x01\r\x13\n\r\n\x05\x04\t\x02\x06\x01\x12\x04\xc7\x01\x14\
    \x17\n\r\n\x05\x04\t\x02\x06\x03\x12\x04\xc7\x01\x1a\x1b\n\x0c\n\x04\x04\
    \t\x02\x07\x12\x04\xc8\x01\x04+\n\r\n\x05\x04\t\x02\x07\x04\x12\x04\xc8\
    \x01\x04\x0c\n\r\n\x05\x04\t\x02\x07\x05\x12\x04\xc8\x01\r\x13\n\r\n\x05\
    \x04\t\x02\x07\x01\x12\x04\xc8\x01\x14&\n\r\n\x05\x04\t\x02\x07\x03\x12\
    \x04\xc8\x01)*\n\x0c\n\x04\x04\t\x02\x08\x12\x04\xc9\x01\x04*\n\r\n\x05\
    \x04\t\x02\x08\x04\x12\x04\xc9\x01\x04\x0c\n\r\n\x05\x04\t\x02\x08\x05\
    \x12\x04\xc9\x01\r\x13\n\r\n\x05\x04\t\x02\x08\x01\x12\x04\xc9\x01\x14%\
    \n\r\n\x05\x04\t\x02\x08\x03\x12\x04\xc9\x01()\n\x0c\n\x04\x04\t\x02\t\
    \x12\x04\xca\x01\x04*\n\r\n\x05\x04\t\x02\t\x04\x12\x04\xca\x01\x04\x0c\
    \n\r\n\x05\x04\t\x02\t\x05\x12\x04\xca\x01\r\x11\n\r\n\x05\x04\t\x02\t\
    \x01\x12\x04\xca\x01\x12$\n\r\n\x05\x04\t\x02\t\x03\x12\x04\xca\x01')\n\
    \x0c\n\x04\x04\t\x02\n\x12\x04\xcb\x01\x041\n\r\n\x05\x04\t\x02\n\x04\
    \x12\x04\xcb\x01\x04\x0c\n\r\n\x05\x04\t\x02\n\x05\x12\x04\xcb\x01\r\x13\
    \n\r\n\x05\x04\t\x02\n\x01\x12\x04\xcb\x01\x14+\n\r\n\x05\x04\t\x02\n\
    \x03\x12\x04\xcb\x01.0\n\x0c\n\x04\x04\t\x02\x0b\x12\x04\xcc\x01\x040\n\
    \r\n\x05\x04\t\x02\x0b\x04\x12\x04\xcc\x01\x04\x0c\n\r\n\x05\x04\t\x02\
    \x0b\x05\x12\x04\xcc\x01\r\x13\n\r\n\x05\x04\t\x02\x0b\x01\x12\x04\xcc\
    \x01\x14*\n\r\n\x05\x04\t\x02\x0b\x03\x12\x04\xcc\x01-/\n\x0c\n\x04\x04\
    \t\x02\x0c\x12\x04\xcd\x01\x044\n\r\n\x05\x04\t\x02\x0c\x04\x12\x04\xcd\
    \x01\x04\x0c\n\r\n\x05\x04\t\x02\x0c\x05\x12\x04\xcd\x01\r\x13\n\r\n\x05\
    \x04\t\x02\x0c\x01\x12\x04\xcd\x01\x14.\n\r\n\x05\x04\t\x02\x0c\x03\x12\
    \x04\xcd\x0113\n\x0c\n\x04\x04\t\x02\r\x12\x04\xce\x01\x048\n\r\n\x05\
    \x04\t\x02\r\x04\x12\x04\xce\x01\x04\x0c\n\r\n\x05\x04\t\x02\r\x06\x12\
    \x04\xce\x01\r\"\n\r\n\x05\x04\t\x02\r\x01\x12\x04\xce\x01#2\n\r\n\x05\
    \x04\t\x02\r\x03\x12\x04\xce\x0157\nI\n\x02\x04\n\x12\x06\xd5\x01\0\xd8\
    \x01\x01\x1a;*\n\x20Request:\x20Transaction\x20input\x20data\n\x20@next\
    \x20CardanoTxItemAck\n\n\x0b\n\x03\x04\n\x01\x12\x04\xd5\x01\x08\x16\nJ\
    \n\x04\x04\n\x02\0\x12\x04\xd6\x01\x04!\"<\x20hash\x20of\x20previous\x20\
    transaction\x20output\x20to\x20spend\x20by\x20this\x20input\n\n\r\n\x05\
    \x04\n\x02\0\x04\x12\x04\xd6\x01\x04\x0c\n\r\n\x05\x04\n\x02\0\x05\x12\
    \x04\xd6\x01\r\x12\n\r\n\x05\x04\n\x02\0\x01\x12\x04\xd6\x01\x13\x1c\n\r\
    \n\x05\x04\n\x02\0\x03\x12\x04\xd6\x01\x1f\x20\n1\n\x04\x04\n\x02\x01\
    \x12\x04\xd7\x01\x04#\"#\x20index\x20of\x20previous\x20output\x20to\x20s\
    pend\n\n\r\n\x05\x04\n\x02\x01\x04\x12\x04\xd7\x01\x04\x0c\n\r\n\x05\x04\
    \n\x02\x01\x05\x12\x04\xd7\x01\r\x13\n\r\n\x05\x04\n\x02\x01\x01\x12\x04\
    \xd7\x01\x14\x1e\n\r\n\x05\x04\n\x02\x01\x03\x12\x04\xd7\x01!\"\nJ\n\x02\
    \x04\x0b\x12\x06\xde\x01\0\xe3\x01\x01\x1a<*\n\x20Request:\x20Transactio\
    n\x20output\x20data\n\x20@next\x20CardanoTxItemAck\n\n\x0b\n\x03\x04\x0b\
    \x01\x12\x04\xde\x01\x08\x17\n7\n\x04\x04\x0b\x02\0\x12\x04\xdf\x01\x04\
    \x20\")\x20target\x20coin\x20address\x20in\x20bech32\x20or\x20base58\n\n\
    \r\n\x05\x04\x0b\x02\0\x04\x12\x04\xdf\x01\x04\x0c\n\r\n\x05\x04\x0b\x02\
    \0\x05\x12\x04\xdf\x01\r\x13\n\r\n\x05\x04\x0b\x02\0\x01\x12\x04\xdf\x01\
    \x14\x1b\n\r\n\x05\x04\x0b\x02\0\x03\x12\x04\xdf\x01\x1e\x1f\n5\n\x04\
    \x04\x0b\x02\x01\x12\x04\xe0\x01\x04A\"'\x20parameters\x20used\x20to\x20\
    derive\x20the\x20address\n\n\r\n\x05\x04\x0b\x02\x01\x04\x12\x04\xe0\x01\
    \x04\x0c\n\r\n\x05\x04\x0b\x02\x01\x06\x12\x04\xe0\x01\r)\n\r\n\x05\x04\
    \x0b\x02\x01\x01\x12\x04\xe0\x01*<\n\r\n\x05\x04\x0b\x02\x01\x03\x12\x04\
    \xe0\x01?@\n\x1f\n\x04\x04\x0b\x02\x02\x12\x04\xe1\x01\x04\x1f\"\x11\x20\
    amount\x20to\x20spend\n\n\r\n\x05\x04\x0b\x02\x02\x04\x12\x04\xe1\x01\
    \x04\x0c\n\r\n\x05\x04\x0b\x02\x02\x05\x12\x04\xe1\x01\r\x13\n\r\n\x05\
    \x04\x0b\x02\x02\x01\x12\x04\xe1\x01\x14\x1a\n\r\n\x05\x04\x0b\x02\x02\
    \x03\x12\x04\xe1\x01\x1d\x1e\n\x0c\n\x04\x04\x0b\x02\x03\x12\x04\xe2\x01\
    \x04+\n\r\n\x05\x04\x0b\x02\x03\x04\x12\x04\xe2\x01\x04\x0c\n\r\n\x05\
    \x04\x0b\x02\x03\x05\x12\x04\xe2\x01\r\x13\n\r\n\x05\x04\x0b\x02\x03\x01\
    \x12\x04\xe2\x01\x14&\n\r\n\x05\x04\x0b\x02\x03\x03\x12\x04\xe2\x01)*\nV\
    \n\x02\x04\x0c\x12\x06\xe9\x01\0\xec\x01\x01\x1aH*\n\x20Request:\x20Tran\
    saction\x20output\x20asset\x20group\x20data\n\x20@next\x20CardanoTxItemA\
    ck\n\n\x0b\n\x03\x04\x0c\x01\x12\x04\xe9\x01\x08\x19\n%\n\x04\x04\x0c\
    \x02\0\x12\x04\xea\x01\x04!\"\x17\x20asset\x20group\x20policy\x20id\n\n\
    \r\n\x05\x04\x0c\x02\0\x04\x12\x04\xea\x01\x04\x0c\n\r\n\x05\x04\x0c\x02\
    \0\x05\x12\x04\xea\x01\r\x12\n\r\n\x05\x04\x0c\x02\0\x01\x12\x04\xea\x01\
    \x13\x1c\n\r\n\x05\x04\x0c\x02\0\x03\x12\x04\xea\x01\x1f\x20\n\x0c\n\x04\
    \x04\x0c\x02\x01\x12\x04\xeb\x01\x04%\n\r\n\x05\x04\x0c\x02\x01\x04\x12\
    \x04\xeb\x01\x04\x0c\n\r\n\x05\x04\x0c\x02\x01\x05\x12\x04\xeb\x01\r\x13\
    \n\r\n\x05\x04\x0c\x02\x01\x01\x12\x04\xeb\x01\x14\x20\n\r\n\x05\x04\x0c\
    \x02\x01\x03\x12\x04\xeb\x01#$\n\\\n\x02\x04\r\x12\x06\xf2\x01\0\xf6\x01\
    \x01\x1aN*\n\x20Request:\x20Transaction\x20output\x20asset\x20group\x20t\
    oken\x20data\n\x20@next\x20CardanoTxItemAck\n\n\x0b\n\x03\x04\r\x01\x12\
    \x04\xf2\x01\x08\x14\nM\n\x04\x04\r\x02\0\x12\x04\xf3\x01\x04(\"?\x20ass\
    et\x20name\x20as\x20bytestring\x20(may\x20be\x20either\x20ascii\x20strin\
    g\x20or\x20hash)\n\n\r\n\x05\x04\r\x02\0\x04\x12\x04\xf3\x01\x04\x0c\n\r\
    \n\x05\x04\r\x02\0\x05\x12\x04\xf3\x01\r\x12\n\r\n\x05\x04\r\x02\0\x01\
    \x12\x04\xf3\x01\x13#\n\r\n\x05\x04\r\x02\0\x03\x12\x04\xf3\x01&'\n\x1c\
    \n\x04\x04\r\x02\x01\x12\x04\xf4\x01\x04\x1f\"\x0e\x20asset\x20amount\n\
    \n\r\n\x05\x04\r\x02\x01\x04\x12\x04\xf4\x01\x04\x0c\n\r\n\x05\x04\r\x02\
    \x01\x05\x12\x04\xf4\x01\r\x13\n\r\n\x05\x04\r\x02\x01\x01\x12\x04\xf4\
    \x01\x14\x1a\n\r\n\x05\x04\r\x02\x01\x03\x12\x04\xf4\x01\x1d\x1e\nU\n\
    \x04\x04\r\x02\x02\x12\x04\xf5\x01\x04$\"G\x20mint\x20amount\x20(can\x20\
    also\x20be\x20negative\x20in\x20which\x20case\x20the\x20tokens\x20are\
    \x20burnt)\n\n\r\n\x05\x04\r\x02\x02\x04\x12\x04\xf5\x01\x04\x0c\n\r\n\
    \x05\x04\r\x02\x02\x05\x12\x04\xf5\x01\r\x13\n\r\n\x05\x04\r\x02\x02\x01\
    \x12\x04\xf5\x01\x14\x1f\n\r\n\x05\x04\r\x02\x02\x03\x12\x04\xf5\x01\"#\
    \nN\n\x02\x04\x0e\x12\x06\xfc\x01\0\xff\x01\x01\x1a@*\n\x20Request:\x20S\
    take\x20pool\x20owner\x20parameters\n\x20@next\x20CardanoTxItemAck\n\n\
    \x0b\n\x03\x04\x0e\x01\x12\x04\xfc\x01\x08\x18\nD\n\x04\x04\x0e\x02\0\
    \x12\x04\xfd\x01\x04)\"6\x20BIP-32-style\x20path\x20to\x20derive\x20stak\
    ing\x20key\x20of\x20the\x20owner\n\n\r\n\x05\x04\x0e\x02\0\x04\x12\x04\
    \xfd\x01\x04\x0c\n\r\n\x05\x04\x0e\x02\0\x05\x12\x04\xfd\x01\r\x13\n\r\n\
    \x05\x04\x0e\x02\0\x01\x12\x04\xfd\x01\x14$\n\r\n\x05\x04\x0e\x02\0\x03\
    \x12\x04\xfd\x01'(\n>\n\x04\x04\x0e\x02\x01\x12\x04\xfe\x01\x04(\"0\x20o\
    wner's\x20staking\x20key\x20if\x20it\x20is\x20an\x20external\x20owner\n\
    \n\r\n\x05\x04\x0e\x02\x01\x04\x12\x04\xfe\x01\x04\x0c\n\r\n\x05\x04\x0e\
    \x02\x01\x05\x12\x04\xfe\x01\r\x12\n\r\n\x05\x04\x0e\x02\x01\x01\x12\x04\
    \xfe\x01\x13#\n\r\n\x05\x04\x0e\x02\x01\x03\x12\x04\xfe\x01&'\nN\n\x02\
    \x04\x0f\x12\x06\x85\x02\0\x8b\x02\x01\x1a@*\n\x20Request:\x20Stake\x20p\
    ool\x20relay\x20parameters\n\x20@next\x20CardanoTxItemAck\n\n\x0b\n\x03\
    \x04\x0f\x01\x12\x04\x85\x02\x08\"\n\x1f\n\x04\x04\x0f\x02\0\x12\x04\x86\
    \x02\x04+\"\x11\x20pool\x20relay\x20type\n\n\r\n\x05\x04\x0f\x02\0\x04\
    \x12\x04\x86\x02\x04\x0c\n\r\n\x05\x04\x0f\x02\0\x06\x12\x04\x86\x02\r!\
    \n\r\n\x05\x04\x0f\x02\0\x01\x12\x04\x86\x02\"&\n\r\n\x05\x04\x0f\x02\0\
    \x03\x12\x04\x86\x02)*\n:\n\x04\x04\x0f\x02\x01\x12\x04\x87\x02\x04$\",\
    \x20ipv4\x20address\x20of\x20the\x20relay\x20given\x20as\x204\x20bytes\n\
    \n\r\n\x05\x04\x0f\x02\x01\x04\x12\x04\x87\x02\x04\x0c\n\r\n\x05\x04\x0f\
    \x02\x01\x05\x12\x04\x87\x02\r\x12\n\r\n\x05\x04\x0f\x02\x01\x01\x12\x04\
    \x87\x02\x13\x1f\n\r\n\x05\x04\x0f\x02\x01\x03\x12\x04\x87\x02\"#\n;\n\
    \x04\x04\x0f\x02\x02\x12\x04\x88\x02\x04$\"-\x20ipv6\x20address\x20of\
    \x20the\x20relay\x20given\x20as\x2016\x20bytes\n\n\r\n\x05\x04\x0f\x02\
    \x02\x04\x12\x04\x88\x02\x04\x0c\n\r\n\x05\x04\x0f\x02\x02\x05\x12\x04\
    \x88\x02\r\x12\n\r\n\x05\x04\x0f\x02\x02\x01\x12\x04\x88\x02\x13\x1f\n\r\
    \n\x05\x04\x0f\x02\x02\x03\x12\x04\x88\x02\"#\nC\n\x04\x04\x0f\x02\x03\
    \x12\x04\x89\x02\x04\"\"5\x20relay\x20host\x20name\x20given\x20as\x20URL\
    ,\x20at\x20most\x2064\x20characters\n\n\r\n\x05\x04\x0f\x02\x03\x04\x12\
    \x04\x89\x02\x04\x0c\n\r\n\x05\x04\x0f\x02\x03\x05\x12\x04\x89\x02\r\x13\
    \n\r\n\x05\x04\x0f\x02\x03\x01\x12\x04\x89\x02\x14\x1d\n\r\n\x05\x04\x0f\
    \x02\x03\x03\x12\x04\x89\x02\x20!\n6\n\x04\x04\x0f\x02\x04\x12\x04\x8a\
    \x02\x04\x1d\"(\x20relay\x20port\x20number\x20in\x20the\x20range\x200-65\
    535\n\n\r\n\x05\x04\x0f\x02\x04\x04\x12\x04\x8a\x02\x04\x0c\n\r\n\x05\
    \x04\x0f\x02\x04\x05\x12\x04\x8a\x02\r\x13\n\r\n\x05\x04\x0f\x02\x04\x01\
    \x12\x04\x8a\x02\x14\x18\n\r\n\x05\x04\x0f\x02\x04\x03\x12\x04\x8a\x02\
    \x1b\x1c\n8\n\x02\x04\x10\x12\x06\x91\x02\0\x94\x02\x01\x1a**\n\x20Stake\
    \x20pool\x20metadata\x20parameters\n\x20@embed\n\n\x0b\n\x03\x04\x10\x01\
    \x12\x04\x91\x02\x08\x1f\nF\n\x04\x04\x10\x02\0\x12\x04\x92\x02\x04\x1c\
    \"8\x20stake\x20pool\x20url\x20hosting\x20metadata,\x20at\x20most\x2064\
    \x20characters\n\n\r\n\x05\x04\x10\x02\0\x04\x12\x04\x92\x02\x04\x0c\n\r\
    \n\x05\x04\x10\x02\0\x05\x12\x04\x92\x02\r\x13\n\r\n\x05\x04\x10\x02\0\
    \x01\x12\x04\x92\x02\x14\x17\n\r\n\x05\x04\x10\x02\0\x03\x12\x04\x92\x02\
    \x1a\x1b\n(\n\x04\x04\x10\x02\x01\x12\x04\x93\x02\x04\x1c\"\x1a\x20stake\
    \x20pool\x20metadata\x20hash\n\n\r\n\x05\x04\x10\x02\x01\x04\x12\x04\x93\
    \x02\x04\x0c\n\r\n\x05\x04\x10\x02\x01\x05\x12\x04\x93\x02\r\x12\n\r\n\
    \x05\x04\x10\x02\x01\x01\x12\x04\x93\x02\x13\x17\n\r\n\x05\x04\x10\x02\
    \x01\x03\x12\x04\x93\x02\x1a\x1b\n/\n\x02\x04\x11\x12\x06\x9a\x02\0\xa7\
    \x02\x01\x1a!*\n\x20Stake\x20pool\x20parameters\n\x20@embed\n\n\x0b\n\
    \x03\x04\x11\x01\x12\x04\x9a\x02\x08!\n:\n\x04\x04\x11\x02\0\x12\x04\x9b\
    \x02\x04\x1f\",\x20stake\x20pool\x20cold\x20public\x20key\x20hash\x20(28\
    \x20bytes)\n\n\r\n\x05\x04\x11\x02\0\x04\x12\x04\x9b\x02\x04\x0c\n\r\n\
    \x05\x04\x11\x02\0\x05\x12\x04\x9b\x02\r\x12\n\r\n\x05\x04\x11\x02\0\x01\
    \x12\x04\x9b\x02\x13\x1a\n\r\n\x05\x04\x11\x02\0\x03\x12\x04\x9b\x02\x1d\
    \x1e\n'\n\x04\x04\x11\x02\x01\x12\x04\x9c\x02\x04$\"\x19\x20VRF\x20key\
    \x20hash\x20(32\x20bytes)\n\n\r\n\x05\x04\x11\x02\x01\x04\x12\x04\x9c\
    \x02\x04\x0c\n\r\n\x05\x04\x11\x02\x01\x05\x12\x04\x9c\x02\r\x12\n\r\n\
    \x05\x04\x11\x02\x01\x01\x12\x04\x9c\x02\x13\x1f\n\r\n\x05\x04\x11\x02\
    \x01\x03\x12\x04\x9c\x02\"#\n)\n\x04\x04\x11\x02\x02\x12\x04\x9d\x02\x04\
    \x1f\"\x1b\x20pledge\x20amount\x20in\x20lovelace\n\n\r\n\x05\x04\x11\x02\
    \x02\x04\x12\x04\x9d\x02\x04\x0c\n\r\n\x05\x04\x11\x02\x02\x05\x12\x04\
    \x9d\x02\r\x13\n\r\n\x05\x04\x11\x02\x02\x01\x12\x04\x9d\x02\x14\x1a\n\r\
    \n\x05\x04\x11\x02\x02\x03\x12\x04\x9d\x02\x1d\x1e\n\x20\n\x04\x04\x11\
    \x02\x03\x12\x04\x9e\x02\x04\x1d\"\x12\x20cost\x20in\x20lovelace\n\n\r\n\
    \x05\x04\x11\x02\x03\x04\x12\x04\x9e\x02\x04\x0c\n\r\n\x05\x04\x11\x02\
    \x03\x05\x12\x04\x9e\x02\r\x13\n\r\n\x05\x04\x11\x02\x03\x01\x12\x04\x9e\
    \x02\x14\x18\n\r\n\x05\x04\x11\x02\x03\x03\x12\x04\x9e\x02\x1b\x1c\n%\n\
    \x04\x04\x11\x02\x04\x12\x04\x9f\x02\x04)\"\x17\x20pool\x20margin\x20num\
    erator\n\n\r\n\x05\x04\x11\x02\x04\x04\x12\x04\x9f\x02\x04\x0c\n\r\n\x05\
    \x04\x11\x02\x04\x05\x12\x04\x9f\x02\r\x13\n\r\n\x05\x04\x11\x02\x04\x01\
    \x12\x04\x9f\x02\x14$\n\r\n\x05\x04\x11\x02\x04\x03\x12\x04\x9f\x02'(\n'\
    \n\x04\x04\x11\x02\x05\x12\x04\xa0\x02\x04+\"\x19\x20pool\x20margin\x20d\
    enominator\n\n\r\n\x05\x04\x11\x02\x05\x04\x12\x04\xa0\x02\x04\x0c\n\r\n\
    \x05\x04\x11\x02\x05\x05\x12\x04\xa0\x02\r\x13\n\r\n\x05\x04\x11\x02\x05\
    \x01\x12\x04\xa0\x02\x14&\n\r\n\x05\x04\x11\x02\x05\x03\x12\x04\xa0\x02)\
    *\nE\n\x04\x04\x11\x02\x06\x12\x04\xa1\x02\x04'\"7\x20bech32\x20reward\
    \x20address\x20where\x20the\x20pool\x20receives\x20rewards\n\n\r\n\x05\
    \x04\x11\x02\x06\x04\x12\x04\xa1\x02\x04\x0c\n\r\n\x05\x04\x11\x02\x06\
    \x05\x12\x04\xa1\x02\r\x13\n\r\n\x05\x04\x11\x02\x06\x01\x12\x04\xa1\x02\
    \x14\"\n\r\n\x05\x04\x11\x02\x06\x03\x12\x04\xa1\x02%&\n\x20\n\x04\x04\
    \x11\x02\x07\x12\x04\xa2\x02\x04=\"\x12\x20pool\x20owners\x20list\n\n\r\
    \n\x05\x04\x11\x02\x07\x04\x12\x04\xa2\x02\x04\x0c\n\r\n\x05\x04\x11\x02\
    \x07\x06\x12\x04\xa2\x02\r\x1d\n\r\n\x05\x04\x11\x02\x07\x01\x12\x04\xa2\
    \x02\x1e$\n\r\n\x05\x04\x11\x02\x07\x03\x12\x04\xa2\x02'(\n\r\n\x05\x04\
    \x11\x02\x07\x08\x12\x04\xa2\x02)<\n\x0e\n\x06\x04\x11\x02\x07\x08\x03\
    \x12\x04\xa2\x02*;\n\x20\n\x04\x04\x11\x02\x08\x12\x04\xa3\x02\x04G\"\
    \x12\x20pool\x20relays\x20list\n\n\r\n\x05\x04\x11\x02\x08\x04\x12\x04\
    \xa3\x02\x04\x0c\n\r\n\x05\x04\x11\x02\x08\x06\x12\x04\xa3\x02\r'\n\r\n\
    \x05\x04\x11\x02\x08\x01\x12\x04\xa3\x02(.\n\r\n\x05\x04\x11\x02\x08\x03\
    \x12\x04\xa3\x0212\n\r\n\x05\x04\x11\x02\x08\x08\x12\x04\xa3\x023F\n\x0e\
    \n\x06\x04\x11\x02\x08\x08\x03\x12\x04\xa3\x024E\n\x1d\n\x04\x04\x11\x02\
    \t\x12\x04\xa4\x02\x043\"\x0f\x20pool\x20metadata\n\n\r\n\x05\x04\x11\
    \x02\t\x04\x12\x04\xa4\x02\x04\x0c\n\r\n\x05\x04\x11\x02\t\x06\x12\x04\
    \xa4\x02\r$\n\r\n\x05\x04\x11\x02\t\x01\x12\x04\xa4\x02%-\n\r\n\x05\x04\
    \x11\x02\t\x03\x12\x04\xa4\x0202\n%\n\x04\x04\x11\x02\n\x12\x04\xa5\x02\
    \x04&\"\x17\x20number\x20of\x20pool\x20owners\n\n\r\n\x05\x04\x11\x02\n\
    \x04\x12\x04\xa5\x02\x04\x0c\n\r\n\x05\x04\x11\x02\n\x05\x12\x04\xa5\x02\
    \r\x13\n\r\n\x05\x04\x11\x02\n\x01\x12\x04\xa5\x02\x14\x20\n\r\n\x05\x04\
    \x11\x02\n\x03\x12\x04\xa5\x02#%\n%\n\x04\x04\x11\x02\x0b\x12\x04\xa6\
    \x02\x04&\"\x17\x20number\x20of\x20pool\x20relays\n\n\r\n\x05\x04\x11\
    \x02\x0b\x04\x12\x04\xa6\x02\x04\x0c\n\r\n\x05\x04\x11\x02\x0b\x05\x12\
    \x04\xa6\x02\r\x13\n\r\n\x05\x04\x11\x02\x0b\x01\x12\x04\xa6\x02\x14\x20\
    \n\r\n\x05\x04\x11\x02\x0b\x03\x12\x04\xa6\x02#%\nO\n\x02\x04\x12\x12\
    \x06\xad\x02\x01\xb3\x02\x01\x1aA*\n\x20Request:\x20Transaction\x20certi\
    ficate\x20data\n\x20@next\x20CardanoTxItemAck\n\n\x0b\n\x03\x04\x12\x01\
    \x12\x04\xad\x02\t\x1d\n\x20\n\x04\x04\x12\x02\0\x12\x04\xae\x02\x04-\"\
    \x12\x20certificate\x20type\n\n\r\n\x05\x04\x12\x02\0\x04\x12\x04\xae\
    \x02\x04\x0c\n\r\n\x05\x04\x12\x02\0\x06\x12\x04\xae\x02\r#\n\r\n\x05\
    \x04\x12\x02\0\x01\x12\x04\xae\x02$(\n\r\n\x05\x04\x12\x02\0\x03\x12\x04\
    \xae\x02+,\n)\n\x04\x04\x12\x02\x01\x12\x04\xaf\x02\x04\x1d\"\x1b\x20sta\
    ke\x20credential\x20key\x20path\n\n\r\n\x05\x04\x12\x02\x01\x04\x12\x04\
    \xaf\x02\x04\x0c\n\r\n\x05\x04\x12\x02\x01\x05\x12\x04\xaf\x02\r\x13\n\r\
    \n\x05\x04\x12\x02\x01\x01\x12\x04\xaf\x02\x14\x18\n\r\n\x05\x04\x12\x02\
    \x01\x03\x12\x04\xaf\x02\x1b\x1c\n\x19\n\x04\x04\x12\x02\x02\x12\x04\xb0\
    \x02\x04\x1c\"\x0b\x20pool\x20hash\n\n\r\n\x05\x04\x12\x02\x02\x04\x12\
    \x04\xb0\x02\x04\x0c\n\r\n\x05\x04\x12\x02\x02\x05\x12\x04\xb0\x02\r\x12\
    \n\r\n\x05\x04\x12\x02\x02\x01\x12\x04\xb0\x02\x13\x17\n\r\n\x05\x04\x12\
    \x02\x02\x03\x12\x04\xb0\x02\x1a\x1b\n<\n\x04\x04\x12\x02\x03\x12\x04\
    \xb1\x02\x04;\".\x20used\x20for\x20stake\x20pool\x20registration\x20cert\
    ificate\n\n\r\n\x05\x04\x12\x02\x03\x04\x12\x04\xb1\x02\x04\x0c\n\r\n\
    \x05\x04\x12\x02\x03\x06\x12\x04\xb1\x02\r&\n\r\n\x05\x04\x12\x02\x03\
    \x01\x12\x04\xb1\x02'6\n\r\n\x05\x04\x12\x02\x03\x03\x12\x04\xb1\x029:\n\
    ,\n\x04\x04\x12\x02\x04\x12\x04\xb2\x02\x04#\"\x1e\x20stake\x20credentia\
    l\x20script\x20hash\n\n\r\n\x05\x04\x12\x02\x04\x04\x12\x04\xb2\x02\x04\
    \x0c\n\r\n\x05\x04\x12\x02\x04\x05\x12\x04\xb2\x02\r\x12\n\r\n\x05\x04\
    \x12\x02\x04\x01\x12\x04\xb2\x02\x13\x1e\n\r\n\x05\x04\x12\x02\x04\x03\
    \x12\x04\xb2\x02!\"\nN\n\x02\x04\x13\x12\x06\xb9\x02\0\xbd\x02\x01\x1a@*\
    \n\x20Request:\x20Transaction\x20withdrawal\x20data\n\x20@next\x20Cardan\
    oTxItemAck\n\n\x0b\n\x03\x04\x13\x01\x12\x04\xb9\x02\x08\x1b\n)\n\x04\
    \x04\x13\x02\0\x12\x04\xba\x02\x04\x1d\"\x1b\x20stake\x20credential\x20k\
    ey\x20path\n\n\r\n\x05\x04\x13\x02\0\x04\x12\x04\xba\x02\x04\x0c\n\r\n\
    \x05\x04\x13\x02\0\x05\x12\x04\xba\x02\r\x13\n\r\n\x05\x04\x13\x02\0\x01\
    \x12\x04\xba\x02\x14\x18\n\r\n\x05\x04\x13\x02\0\x03\x12\x04\xba\x02\x1b\
    \x1c\n\x0c\n\x04\x04\x13\x02\x01\x12\x04\xbb\x02\x04\x1f\n\r\n\x05\x04\
    \x13\x02\x01\x04\x12\x04\xbb\x02\x04\x0c\n\r\n\x05\x04\x13\x02\x01\x05\
    \x12\x04\xbb\x02\r\x13\n\r\n\x05\x04\x13\x02\x01\x01\x12\x04\xbb\x02\x14\
    \x1a\n\r\n\x05\x04\x13\x02\x01\x03\x12\x04\xbb\x02\x1d\x1e\n,\n\x04\x04\
    \x13\x02\x02\x12\x04\xbc\x02\x04#\"\x1e\x20stake\x20credential\x20script\
    \x20hash\n\n\r\n\x05\x04\x13\x02\x02\x04\x12\x04\xbc\x02\x04\x0c\n\r\n\
    \x05\x04\x13\x02\x02\x05\x12\x04\xbc\x02\r\x12\n\r\n\x05\x04\x13\x02\x02\
    \x01\x12\x04\xbc\x02\x13\x1e\n\r\n\x05\x04\x13\x02\x02\x03\x12\x04\xbc\
    \x02!\"\n\x18\n\x02\x04\x14\x12\x06\xc2\x02\0\xc7\x02\x01\x1a\n*\n\x20@e\
    mbed\n\n\x0b\n\x03\x04\x14\x01\x12\x04\xc2\x02\x081\n\x0c\n\x04\x04\x14\
    \x02\0\x12\x04\xc3\x02\x04)\n\r\n\x05\x04\x14\x02\0\x04\x12\x04\xc3\x02\
    \x04\x0c\n\r\n\x05\x04\x14\x02\0\x05\x12\x04\xc3\x02\r\x12\n\r\n\x05\x04\
    \x14\x02\0\x01\x12\x04\xc3\x02\x13$\n\r\n\x05\x04\x14\x02\0\x03\x12\x04\
    \xc3\x02'(\n\x0c\n\x04\x04\x14\x02\x01\x12\x04\xc4\x02\x04%\n\r\n\x05\
    \x04\x14\x02\x01\x04\x12\x04\xc4\x02\x04\x0c\n\r\n\x05\x04\x14\x02\x01\
    \x05\x12\x04\xc4\x02\r\x13\n\r\n\x05\x04\x14\x02\x01\x01\x12\x04\xc4\x02\
    \x14\x20\n\r\n\x05\x04\x14\x02\x01\x03\x12\x04\xc4\x02#$\n\x0c\n\x04\x04\
    \x14\x02\x02\x12\x04\xc5\x02\x04H\n\r\n\x05\x04\x14\x02\x02\x04\x12\x04\
    \xc5\x02\x04\x0c\n\r\n\x05\x04\x14\x02\x02\x06\x12\x04\xc5\x02\r)\n\r\n\
    \x05\x04\x14\x02\x02\x01\x12\x04\xc5\x02*C\n\r\n\x05\x04\x14\x02\x02\x03\
    \x12\x04\xc5\x02FG\n\x0c\n\x04\x04\x14\x02\x03\x12\x04\xc6\x02\x04\x1e\n\
    \r\n\x05\x04\x14\x02\x03\x04\x12\x04\xc6\x02\x04\x0c\n\r\n\x05\x04\x14\
    \x02\x03\x05\x12\x04\xc6\x02\r\x13\n\r\n\x05\x04\x14\x02\x03\x01\x12\x04\
    \xc6\x02\x14\x19\n\r\n\x05\x04\x14\x02\x03\x03\x12\x04\xc6\x02\x1c\x1d\n\
    u\n\x02\x04\x15\x12\x06\xce\x02\0\xd1\x02\x01\x1ag*\n\x20Request:\x20Tra\
    nsaction\x20auxiliary\x20data\n\x20@next\x20CardanoTxItemAck\n\x20@next\
    \x20CardanoTxAuxiliaryDataSupplement\n\n\x0b\n\x03\x04\x15\x01\x12\x04\
    \xce\x02\x08\x1e\n\x0c\n\x04\x04\x15\x02\0\x12\x04\xcf\x02\x04\\\n\r\n\
    \x05\x04\x15\x02\0\x04\x12\x04\xcf\x02\x04\x0c\n\r\n\x05\x04\x15\x02\0\
    \x06\x12\x04\xcf\x02\r6\n\r\n\x05\x04\x15\x02\0\x01\x12\x04\xcf\x027W\n\
    \r\n\x05\x04\x15\x02\0\x03\x12\x04\xcf\x02Z[\n\x0c\n\x04\x04\x15\x02\x01\
    \x12\x04\xd0\x02\x04\x1c\n\r\n\x05\x04\x15\x02\x01\x04\x12\x04\xd0\x02\
    \x04\x0c\n\r\n\x05\x04\x15\x02\x01\x05\x12\x04\xd0\x02\r\x12\n\r\n\x05\
    \x04\x15\x02\x01\x01\x12\x04\xd0\x02\x13\x17\n\r\n\x05\x04\x15\x02\x01\
    \x03\x12\x04\xd0\x02\x1a\x1b\nC\n\x02\x04\x16\x12\x06\xd7\x02\0\xd9\x02\
    \x01\x1a5*\n\x20Request:\x20Transaction\x20mint\n\x20@next\x20CardanoTxI\
    temAck\n\n\x0b\n\x03\x04\x16\x01\x12\x04\xd7\x02\x08\x15\n\x0c\n\x04\x04\
    \x16\x02\0\x12\x04\xd8\x02\x04+\n\r\n\x05\x04\x16\x02\0\x04\x12\x04\xd8\
    \x02\x04\x0c\n\r\n\x05\x04\x16\x02\0\x05\x12\x04\xd8\x02\r\x13\n\r\n\x05\
    \x04\x16\x02\0\x01\x12\x04\xd8\x02\x14&\n\r\n\x05\x04\x16\x02\0\x03\x12\
    \x04\xd8\x02)*\n\xef\x02\n\x02\x04\x17\x12\x06\xe9\x02\0\xea\x02\x01\x1a\
    \xe0\x02*\n\x20Response:\x20Acknowledgement\x20of\x20the\x20last\x20tran\
    saction\x20item\x20received\n\x20@next\x20CardanoTxInput\n\x20@next\x20C\
    ardanoTxOutput\n\x20@next\x20CardanoAssetGroup\n\x20@next\x20CardanoToke\
    n\n\x20@next\x20CardanoTxCertificate\n\x20@next\x20CardanoPoolOwner\n\
    \x20@next\x20CardanoPoolRelayParameters\n\x20@next\x20CardanoTxWithdrawa\
    l\n\x20@next\x20CardanoTxAuxiliaryData\n\x20@next\x20CardanoTxWitnessReq\
    uest\n\x20@next\x20CardanoTxMint\n\n\x0b\n\x03\x04\x17\x01\x12\x04\xe9\
    \x02\x08\x18\nm\n\x02\x04\x18\x12\x06\xf0\x02\0\xf4\x02\x01\x1a_*\n\x20R\
    esponse:\x20Device-generated\x20supplement\x20for\x20the\x20auxiliary\
    \x20data\n\x20@next\x20CardanoTxWitnessRequest\n\n\x0b\n\x03\x04\x18\x01\
    \x12\x04\xf0\x02\x08(\n\x0c\n\x04\x04\x18\x02\0\x12\x04\xf1\x02\x04;\n\r\
    \n\x05\x04\x18\x02\0\x04\x12\x04\xf1\x02\x04\x0c\n\r\n\x05\x04\x18\x02\0\
    \x06\x12\x04\xf1\x02\r1\n\r\n\x05\x04\x18\x02\0\x01\x12\x04\xf1\x0226\n\
    \r\n\x05\x04\x18\x02\0\x03\x12\x04\xf1\x029:\n\x0c\n\x04\x04\x18\x02\x01\
    \x12\x04\xf2\x02\x04+\n\r\n\x05\x04\x18\x02\x01\x04\x12\x04\xf2\x02\x04\
    \x0c\n\r\n\x05\x04\x18\x02\x01\x05\x12\x04\xf2\x02\r\x12\n\r\n\x05\x04\
    \x18\x02\x01\x01\x12\x04\xf2\x02\x13&\n\r\n\x05\x04\x18\x02\x01\x03\x12\
    \x04\xf2\x02)*\n\x0c\n\x04\x04\x18\x02\x02\x12\x04\xf3\x02\x04*\n\r\n\
    \x05\x04\x18\x02\x02\x04\x12\x04\xf3\x02\x04\x0c\n\r\n\x05\x04\x18\x02\
    \x02\x05\x12\x04\xf3\x02\r\x12\n\r\n\x05\x04\x18\x02\x02\x01\x12\x04\xf3\
    \x02\x13%\n\r\n\x05\x04\x18\x02\x02\x03\x12\x04\xf3\x02()\n`\n\x02\x04\
    \x19\x12\x06\xfa\x02\0\xfc\x02\x01\x1aR*\n\x20Request:\x20Ask\x20the\x20\
    device\x20to\x20sign\x20a\x20witness\x20path\n\x20@next\x20CardanoTxWitn\
    essResponse\n\n\x0b\n\x03\x04\x19\x01\x12\x04\xfa\x02\x08\x1f\n\x0c\n\
    \x04\x04\x19\x02\0\x12\x04\xfb\x02\x04\x1d\n\r\n\x05\x04\x19\x02\0\x04\
    \x12\x04\xfb\x02\x04\x0c\n\r\n\x05\x04\x19\x02\0\x05\x12\x04\xfb\x02\r\
    \x13\n\r\n\x05\x04\x19\x02\0\x01\x12\x04\xfb\x02\x14\x18\n\r\n\x05\x04\
    \x19\x02\0\x03\x12\x04\xfb\x02\x1b\x1c\n\x88\x01\n\x02\x04\x1a\x12\x06\
    \x83\x03\0\x88\x03\x01\x1az*\n\x20Response:\x20Signature\x20correspondin\
    g\x20to\x20the\x20requested\x20witness\x20path\n\x20@next\x20CardanoTxWi\
    tnessRequest\n\x20@next\x20CardanoTxHostAck\n\n\x0b\n\x03\x04\x1a\x01\
    \x12\x04\x83\x03\x08\x20\n\x0c\n\x04\x04\x1a\x02\0\x12\x04\x84\x03\x04+\
    \n\r\n\x05\x04\x1a\x02\0\x04\x12\x04\x84\x03\x04\x0c\n\r\n\x05\x04\x1a\
    \x02\0\x06\x12\x04\x84\x03\r!\n\r\n\x05\x04\x1a\x02\0\x01\x12\x04\x84\
    \x03\"&\n\r\n\x05\x04\x1a\x02\0\x03\x12\x04\x84\x03)*\n\x0c\n\x04\x04\
    \x1a\x02\x01\x12\x04\x85\x03\x04\x1f\n\r\n\x05\x04\x1a\x02\x01\x04\x12\
    \x04\x85\x03\x04\x0c\n\r\n\x05\x04\x1a\x02\x01\x05\x12\x04\x85\x03\r\x12\
    \n\r\n\x05\x04\x1a\x02\x01\x01\x12\x04\x85\x03\x13\x1a\n\r\n\x05\x04\x1a\
    \x02\x01\x03\x12\x04\x85\x03\x1d\x1e\n\x0c\n\x04\x04\x1a\x02\x02\x12\x04\
    \x86\x03\x04!\n\r\n\x05\x04\x1a\x02\x02\x04\x12\x04\x86\x03\x04\x0c\n\r\
    \n\x05\x04\x1a\x02\x02\x05\x12\x04\x86\x03\r\x12\n\r\n\x05\x04\x1a\x02\
    \x02\x01\x12\x04\x86\x03\x13\x1c\n\r\n\x05\x04\x1a\x02\x02\x03\x12\x04\
    \x86\x03\x1f\x20\n\x0c\n\x04\x04\x1a\x02\x03\x12\x04\x87\x03\x04\"\n\r\n\
    \x05\x04\x1a\x02\x03\x04\x12\x04\x87\x03\x04\x0c\n\r\n\x05\x04\x1a\x02\
    \x03\x05\x12\x04\x87\x03\r\x12\n\r\n\x05\x04\x1a\x02\x03\x01\x12\x04\x87\
    \x03\x13\x1d\n\r\n\x05\x04\x1a\x02\x03\x03\x12\x04\x87\x03\x20!\n~\n\x02\
    \x04\x1b\x12\x06\x8f\x03\0\x90\x03\x01\x1ap*\n\x20Request:\x20Acknowledg\
    ement\x20of\x20the\x20last\x20response\x20received\n\x20@next\x20Cardano\
    TxBodyHash\n\x20@next\x20CardanoSignTxFinished\n\n\x0b\n\x03\x04\x1b\x01\
    \x12\x04\x8f\x03\x08\x18\n[\n\x02\x04\x1c\x12\x06\x96\x03\0\x98\x03\x01\
    \x1aM*\n\x20Response:\x20Hash\x20of\x20the\x20serialized\x20transaction\
    \x20body\n\x20@next\x20CardanoTxHostAck\n\n\x0b\n\x03\x04\x1c\x01\x12\
    \x04\x96\x03\x08\x19\n\x0c\n\x04\x04\x1c\x02\0\x12\x04\x97\x03\x04\x1f\n\
    \r\n\x05\x04\x1c\x02\0\x04\x12\x04\x97\x03\x04\x0c\n\r\n\x05\x04\x1c\x02\
    \0\x05\x12\x04\x97\x03\r\x12\n\r\n\x05\x04\x1c\x02\0\x01\x12\x04\x97\x03\
    \x13\x1a\n\r\n\x05\x04\x1c\x02\0\x03\x12\x04\x97\x03\x1d\x1e\nZ\n\x02\
    \x04\x1d\x12\x06\x9e\x03\0\x9f\x03\x01\x1aL*\n\x20Response:\x20Confirm\
    \x20the\x20successful\x20completion\x20of\x20the\x20signing\x20process\n\
    \x20@end\n\n\x0b\n\x03\x04\x1d\x01\x12\x04\x9e\x03\x08\x1d\no\n\x02\x04\
    \x1e\x12\x06\xa7\x03\0\xff\x03\x01\x1aa*\n\x20Request:\x20Ask\x20device\
    \x20to\x20sign\x20Cardano\x20transaction\n\x20@start\n\x20@next\x20Carda\
    noSignedTx\n\x20@next\x20Failure\n\n\x0b\n\x03\x04\x1e\x01\x12\x04\xa7\
    \x03\x08\x15\n\x0b\n\x03\x04\x1e\x07\x12\x04\xa8\x03\x04\x1d\n\x0c\n\x04\
    \x04\x1e\x07\x03\x12\x04\xa8\x03\x04\x1d\n0\n\x04\x04\x1e\x02\0\x12\x04\
    \xaa\x03\x04+\"\"\x20inputs\x20to\x20be\x20used\x20in\x20transaction\n\n\
    \r\n\x05\x04\x1e\x02\0\x04\x12\x04\xaa\x03\x04\x0c\n\r\n\x05\x04\x1e\x02\
    \0\x06\x12\x04\xaa\x03\r\x1f\n\r\n\x05\x04\x1e\x02\0\x01\x12\x04\xaa\x03\
    \x20&\n\r\n\x05\x04\x1e\x02\0\x03\x12\x04\xaa\x03)*\n1\n\x04\x04\x1e\x02\
    \x01\x12\x04\xab\x03\x04-\"#\x20outputs\x20to\x20be\x20used\x20in\x20tra\
    nsaction\n\n\r\n\x05\x04\x1e\x02\x01\x04\x12\x04\xab\x03\x04\x0c\n\r\n\
    \x05\x04\x1e\x02\x01\x06\x12\x04\xab\x03\r\x20\n\r\n\x05\x04\x1e\x02\x01\
    \x01\x12\x04\xab\x03!(\n\r\n\x05\x04\x1e\x02\x01\x03\x12\x04\xab\x03+,\n\
    \xfe\x01\n\x04\x04\x1e\x02\x02\x12\x04\xae\x03\x04'\x1a\xd3\x01\x20optio\
    nal\x20uint32\x20transactions_count\x20=\x203;\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20left\x20as\x20a\
    \x20comment\x20so\x20we\x20know\x20to\x20skip\x20the\x20id\x203\x20in\
    \x20the\x20future\n\x20optional\x20uint32\x20network\x20=\x204;\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20replaced\x20with\x20protocol_m\
    agic\n\"\x1a\x20network's\x20protocol\x20magic\n\n\r\n\x05\x04\x1e\x02\
    \x02\x04\x12\x04\xae\x03\x04\x0c\n\r\n\x05\x04\x1e\x02\x02\x05\x12\x04\
    \xae\x03\r\x13\n\r\n\x05\x04\x1e\x02\x02\x01\x12\x04\xae\x03\x14\"\n\r\n\
    \x05\x04\x1e\x02\x02\x03\x12\x04\xae\x03%&\n2\n\x04\x04\x1e\x02\x03\x12\
    \x04\xaf\x03\x04\x1c\"$\x20transaction\x20fee\x20-\x20added\x20in\x20she\
    lley\n\n\r\n\x05\x04\x1e\x02\x03\x04\x12\x04\xaf\x03\x04\x0c\n\r\n\x05\
    \x04\x1e\x02\x03\x05\x12\x04\xaf\x03\r\x13\n\r\n\x05\x04\x1e\x02\x03\x01\
    \x12\x04\xaf\x03\x14\x17\n\r\n\x05\x04\x1e\x02\x03\x03\x12\x04\xaf\x03\
    \x1a\x1b\n2\n\x04\x04\x1e\x02\x04\x12\x04\xb0\x03\x04\x1c\"$\x20transact\
    ion\x20ttl\x20-\x20added\x20in\x20shelley\n\n\r\n\x05\x04\x1e\x02\x04\
    \x04\x12\x04\xb0\x03\x04\x0c\n\r\n\x05\x04\x1e\x02\x04\x05\x12\x04\xb0\
    \x03\r\x13\n\r\n\x05\x04\x1e\x02\x04\x01\x12\x04\xb0\x03\x14\x17\n\r\n\
    \x05\x04\x1e\x02\x04\x03\x12\x04\xb0\x03\x1a\x1b\n/\n\x04\x04\x1e\x02\
    \x05\x12\x04\xb1\x03\x04#\"!\x20network\x20id\x20-\x20mainnet\x20or\x20t\
    estnet\n\n\r\n\x05\x04\x1e\x02\x05\x04\x12\x04\xb1\x03\x04\x0c\n\r\n\x05\
    \x04\x1e\x02\x05\x05\x12\x04\xb1\x03\r\x13\n\r\n\x05\x04\x1e\x02\x05\x01\
    \x12\x04\xb1\x03\x14\x1e\n\r\n\x05\x04\x1e\x02\x05\x03\x12\x04\xb1\x03!\
    \"\n;\n\x04\x04\x1e\x02\x06\x12\x04\xb2\x03\x047\"-\x20transaction\x20ce\
    rtificates\x20-\x20added\x20in\x20shelley\n\n\r\n\x05\x04\x1e\x02\x06\
    \x04\x12\x04\xb2\x03\x04\x0c\n\r\n\x05\x04\x1e\x02\x06\x06\x12\x04\xb2\
    \x03\r%\n\r\n\x05\x04\x1e\x02\x06\x01\x12\x04\xb2\x03&2\n\r\n\x05\x04\
    \x1e\x02\x06\x03\x12\x04\xb2\x0356\n:\n\x04\x04\x1e\x02\x07\x12\x04\xb3\
    \x03\x046\",\x20transaction\x20withdrawals\x20-\x20added\x20in\x20shelle\
    y\n\n\r\n\x05\x04\x1e\x02\x07\x04\x12\x04\xb3\x03\x04\x0c\n\r\n\x05\x04\
    \x1e\x02\x07\x06\x12\x04\xb3\x03\r$\n\r\n\x05\x04\x1e\x02\x07\x01\x12\
    \x04\xb3\x03%0\n\r\n\x05\x04\x1e\x02\x07\x03\x12\x04\xb3\x0335\n\xab\x01\
    \n\x04\x04\x1e\x02\x08\x12\x04\xb5\x03\x041\x1al\x20optional\x20bytes\
    \x20metadata\x20=\x2011;\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20re\
    placed\x20in\x20Mary\x20era\x20with\x20auxiliary\x20data\x20below\n\"/\
    \x20transaction\x20validity\x20start\x20-\x20added\x20in\x20allegra\n\n\
    \r\n\x05\x04\x1e\x02\x08\x04\x12\x04\xb5\x03\x04\x0c\n\r\n\x05\x04\x1e\
    \x02\x08\x05\x12\x04\xb5\x03\r\x13\n\r\n\x05\x04\x1e\x02\x08\x01\x12\x04\
    \xb5\x03\x14+\n\r\n\x05\x04\x1e\x02\x08\x03\x12\x04\xb5\x03.0\n*\n\x04\
    \x04\x1e\x02\t\x12\x04\xb6\x03\x04<\"\x1c\x20transaction\x20auxiliary\
    \x20data\n\n\r\n\x05\x04\x1e\x02\t\x04\x12\x04\xb6\x03\x04\x0c\n\r\n\x05\
    \x04\x1e\x02\t\x06\x12\x04\xb6\x03\r'\n\r\n\x05\x04\x1e\x02\t\x01\x12\
    \x04\xb6\x03(6\n\r\n\x05\x04\x1e\x02\t\x03\x12\x04\xb6\x039;\nD\n\x04\
    \x04\x1e\x03\0\x12\x06\xbb\x03\x04\xc1\x03\x05\x1a4*\n\x20Structure\x20r\
    epresenting\x20cardano\x20transaction\x20input\n\n\r\n\x05\x04\x1e\x03\0\
    \x01\x12\x04\xbb\x03\x0c\x1e\n@\n\x06\x04\x1e\x03\0\x02\0\x12\x04\xbc\
    \x03\x08&\"0\x20BIP-32\x20path\x20to\x20derive\x20the\x20key\x20from\x20\
    master\x20node\n\n\x0f\n\x07\x04\x1e\x03\0\x02\0\x04\x12\x04\xbc\x03\x08\
    \x10\n\x0f\n\x07\x04\x1e\x03\0\x02\0\x05\x12\x04\xbc\x03\x11\x17\n\x0f\n\
    \x07\x04\x1e\x03\0\x02\0\x01\x12\x04\xbc\x03\x18!\n\x0f\n\x07\x04\x1e\
    \x03\0\x02\0\x03\x12\x04\xbc\x03$%\nL\n\x06\x04\x1e\x03\0\x02\x01\x12\
    \x04\xbd\x03\x08%\"<\x20hash\x20of\x20previous\x20transaction\x20output\
    \x20to\x20spend\x20by\x20this\x20input\n\n\x0f\n\x07\x04\x1e\x03\0\x02\
    \x01\x04\x12\x04\xbd\x03\x08\x10\n\x0f\n\x07\x04\x1e\x03\0\x02\x01\x05\
    \x12\x04\xbd\x03\x11\x16\n\x0f\n\x07\x04\x1e\x03\0\x02\x01\x01\x12\x04\
    \xbd\x03\x17\x20\n\x0f\n\x07\x04\x1e\x03\0\x02\x01\x03\x12\x04\xbd\x03#$\
    \n3\n\x06\x04\x1e\x03\0\x02\x02\x12\x04\xbe\x03\x08'\"#\x20index\x20of\
    \x20previous\x20output\x20to\x20spend\n\n\x0f\n\x07\x04\x1e\x03\0\x02\
    \x02\x04\x12\x04\xbe\x03\x08\x10\n\x0f\n\x07\x04\x1e\x03\0\x02\x02\x05\
    \x12\x04\xbe\x03\x11\x17\n\x0f\n\x07\x04\x1e\x03\0\x02\x02\x01\x12\x04\
    \xbe\x03\x18\"\n\x0f\n\x07\x04\x1e\x03\0\x02\x02\x03\x12\x04\xbe\x03%&\n\
    E\n\x04\x04\x1e\x03\x01\x12\x06\xc5\x03\x04\xcb\x03\x05\x1a5*\n\x20Struc\
    ture\x20representing\x20cardano\x20transaction\x20output\n\n\r\n\x05\x04\
    \x1e\x03\x01\x01\x12\x04\xc5\x03\x0c\x1f\n9\n\x06\x04\x1e\x03\x01\x02\0\
    \x12\x04\xc6\x03\x08$\")\x20target\x20coin\x20address\x20in\x20bech32\
    \x20or\x20base58\n\n\x0f\n\x07\x04\x1e\x03\x01\x02\0\x04\x12\x04\xc6\x03\
    \x08\x10\n\x0f\n\x07\x04\x1e\x03\x01\x02\0\x05\x12\x04\xc6\x03\x11\x17\n\
    \x0f\n\x07\x04\x1e\x03\x01\x02\0\x01\x12\x04\xc6\x03\x18\x1f\n\x0f\n\x07\
    \x04\x1e\x03\x01\x02\0\x03\x12\x04\xc6\x03\"#\n\x83\x01\n\x06\x04\x1e\
    \x03\x01\x02\x01\x12\x04\xc8\x03\x08#\x1a]\x20repeated\x20uint32\x20addr\
    ess_n\x20=\x202;\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\
    \x20moved\x20to\x20address_parameters\n\"\x14\x20amount\x20in\x20Lovelac\
    e\n\n\x0f\n\x07\x04\x1e\x03\x01\x02\x01\x04\x12\x04\xc8\x03\x08\x10\n\
    \x0f\n\x07\x04\x1e\x03\x01\x02\x01\x05\x12\x04\xc8\x03\x11\x17\n\x0f\n\
    \x07\x04\x1e\x03\x01\x02\x01\x01\x12\x04\xc8\x03\x18\x1e\n\x0f\n\x07\x04\
    \x1e\x03\x01\x02\x01\x03\x12\x04\xc8\x03!\"\n7\n\x06\x04\x1e\x03\x01\x02\
    \x02\x12\x04\xc9\x03\x08E\"'\x20parameters\x20used\x20to\x20derive\x20th\
    e\x20address\n\n\x0f\n\x07\x04\x1e\x03\x01\x02\x02\x04\x12\x04\xc9\x03\
    \x08\x10\n\x0f\n\x07\x04\x1e\x03\x01\x02\x02\x06\x12\x04\xc9\x03\x11-\n\
    \x0f\n\x07\x04\x1e\x03\x01\x02\x02\x01\x12\x04\xc9\x03.@\n\x0f\n\x07\x04\
    \x1e\x03\x01\x02\x02\x03\x12\x04\xc9\x03CD\n/\n\x06\x04\x1e\x03\x01\x02\
    \x03\x12\x04\xca\x03\x088\"\x1f\x20custom\x20assets\x20-\x20added\x20in\
    \x20mary\n\n\x0f\n\x07\x04\x1e\x03\x01\x02\x03\x04\x12\x04\xca\x03\x08\
    \x10\n\x0f\n\x07\x04\x1e\x03\x01\x02\x03\x06\x12\x04\xca\x03\x11&\n\x0f\
    \n\x07\x04\x1e\x03\x01\x02\x03\x01\x12\x04\xca\x03'3\n\x0f\n\x07\x04\x1e\
    \x03\x01\x02\x03\x03\x12\x04\xca\x0367\n\x0e\n\x04\x04\x1e\x03\x02\x12\
    \x06\xcd\x03\x04\xd0\x03\x05\n\r\n\x05\x04\x1e\x03\x02\x01\x12\x04\xcd\
    \x03\x0c!\n'\n\x06\x04\x1e\x03\x02\x02\0\x12\x04\xce\x03\x08%\"\x17\x20a\
    sset\x20group\x20policy\x20id\n\n\x0f\n\x07\x04\x1e\x03\x02\x02\0\x04\
    \x12\x04\xce\x03\x08\x10\n\x0f\n\x07\x04\x1e\x03\x02\x02\0\x05\x12\x04\
    \xce\x03\x11\x16\n\x0f\n\x07\x04\x1e\x03\x02\x02\0\x01\x12\x04\xce\x03\
    \x17\x20\n\x0f\n\x07\x04\x1e\x03\x02\x02\0\x03\x12\x04\xce\x03#$\n(\n\
    \x06\x04\x1e\x03\x02\x02\x01\x12\x04\xcf\x03\x08-\"\x18\x20asset\x20name\
    -amount\x20pair\n\n\x0f\n\x07\x04\x1e\x03\x02\x02\x01\x04\x12\x04\xcf\
    \x03\x08\x10\n\x0f\n\x07\x04\x1e\x03\x02\x02\x01\x06\x12\x04\xcf\x03\x11\
    !\n\x0f\n\x07\x04\x1e\x03\x02\x02\x01\x01\x12\x04\xcf\x03\"(\n\x0f\n\x07\
    \x04\x1e\x03\x02\x02\x01\x03\x12\x04\xcf\x03+,\n\x0e\n\x04\x04\x1e\x03\
    \x03\x12\x06\xd2\x03\x04\xd5\x03\x05\n\r\n\x05\x04\x1e\x03\x03\x01\x12\
    \x04\xd2\x03\x0c\x1c\nO\n\x06\x04\x1e\x03\x03\x02\0\x12\x04\xd3\x03\x08,\
    \"?\x20asset\x20name\x20as\x20bytestring\x20(may\x20be\x20either\x20asci\
    i\x20string\x20or\x20hash)\n\n\x0f\n\x07\x04\x1e\x03\x03\x02\0\x04\x12\
    \x04\xd3\x03\x08\x10\n\x0f\n\x07\x04\x1e\x03\x03\x02\0\x05\x12\x04\xd3\
    \x03\x11\x16\n\x0f\n\x07\x04\x1e\x03\x03\x02\0\x01\x12\x04\xd3\x03\x17'\
    \n\x0f\n\x07\x04\x1e\x03\x03\x02\0\x03\x12\x04\xd3\x03*+\n\x1e\n\x06\x04\
    \x1e\x03\x03\x02\x01\x12\x04\xd4\x03\x08#\"\x0e\x20asset\x20amount\n\n\
    \x0f\n\x07\x04\x1e\x03\x03\x02\x01\x04\x12\x04\xd4\x03\x08\x10\n\x0f\n\
    \x07\x04\x1e\x03\x03\x02\x01\x05\x12\x04\xd4\x03\x11\x17\n\x0f\n\x07\x04\
    \x1e\x03\x03\x02\x01\x01\x12\x04\xd4\x03\x18\x1e\n\x0f\n\x07\x04\x1e\x03\
    \x03\x02\x01\x03\x12\x04\xd4\x03!\"\n/\n\x04\x04\x1e\x03\x04\x12\x06\xda\
    \x03\x04\xdd\x03\x05\x1a\x1f*\n\x20Stake\x20pool\x20owner\x20parameters\
    \n\n\r\n\x05\x04\x1e\x03\x04\x01\x12\x04\xda\x03\x0c\x20\nF\n\x06\x04\
    \x1e\x03\x04\x02\0\x12\x04\xdb\x03\x08-\"6\x20BIP-32-style\x20path\x20to\
    \x20derive\x20staking\x20key\x20of\x20the\x20owner\n\n\x0f\n\x07\x04\x1e\
    \x03\x04\x02\0\x04\x12\x04\xdb\x03\x08\x10\n\x0f\n\x07\x04\x1e\x03\x04\
    \x02\0\x05\x12\x04\xdb\x03\x11\x17\n\x0f\n\x07\x04\x1e\x03\x04\x02\0\x01\
    \x12\x04\xdb\x03\x18(\n\x0f\n\x07\x04\x1e\x03\x04\x02\0\x03\x12\x04\xdb\
    \x03+,\n@\n\x06\x04\x1e\x03\x04\x02\x01\x12\x04\xdc\x03\x08,\"0\x20owner\
    's\x20staking\x20key\x20if\x20it\x20is\x20an\x20external\x20owner\n\n\
    \x0f\n\x07\x04\x1e\x03\x04\x02\x01\x04\x12\x04\xdc\x03\x08\x10\n\x0f\n\
    \x07\x04\x1e\x03\x04\x02\x01\x05\x12\x04\xdc\x03\x11\x16\n\x0f\n\x07\x04\
    \x1e\x03\x04\x02\x01\x01\x12\x04\xdc\x03\x17'\n\x0f\n\x07\x04\x1e\x03\
    \x04\x02\x01\x03\x12\x04\xdc\x03*+\n/\n\x04\x04\x1e\x03\x05\x12\x06\xe2\
    \x03\x04\xe8\x03\x05\x1a\x1f*\n\x20Stake\x20pool\x20relay\x20parameters\
    \n\n\r\n\x05\x04\x1e\x03\x05\x01\x12\x04\xe2\x03\x0c*\n!\n\x06\x04\x1e\
    \x03\x05\x02\0\x12\x04\xe3\x03\x08/\"\x11\x20pool\x20relay\x20type\n\n\
    \x0f\n\x07\x04\x1e\x03\x05\x02\0\x04\x12\x04\xe3\x03\x08\x10\n\x0f\n\x07\
    \x04\x1e\x03\x05\x02\0\x06\x12\x04\xe3\x03\x11%\n\x0f\n\x07\x04\x1e\x03\
    \x05\x02\0\x01\x12\x04\xe3\x03&*\n\x0f\n\x07\x04\x1e\x03\x05\x02\0\x03\
    \x12\x04\xe3\x03-.\n<\n\x06\x04\x1e\x03\x05\x02\x01\x12\x04\xe4\x03\x08(\
    \",\x20ipv4\x20address\x20of\x20the\x20relay\x20given\x20as\x204\x20byte\
    s\n\n\x0f\n\x07\x04\x1e\x03\x05\x02\x01\x04\x12\x04\xe4\x03\x08\x10\n\
    \x0f\n\x07\x04\x1e\x03\x05\x02\x01\x05\x12\x04\xe4\x03\x11\x16\n\x0f\n\
    \x07\x04\x1e\x03\x05\x02\x01\x01\x12\x04\xe4\x03\x17#\n\x0f\n\x07\x04\
    \x1e\x03\x05\x02\x01\x03\x12\x04\xe4\x03&'\n=\n\x06\x04\x1e\x03\x05\x02\
    \x02\x12\x04\xe5\x03\x08(\"-\x20ipv6\x20address\x20of\x20the\x20relay\
    \x20given\x20as\x2016\x20bytes\n\n\x0f\n\x07\x04\x1e\x03\x05\x02\x02\x04\
    \x12\x04\xe5\x03\x08\x10\n\x0f\n\x07\x04\x1e\x03\x05\x02\x02\x05\x12\x04\
    \xe5\x03\x11\x16\n\x0f\n\x07\x04\x1e\x03\x05\x02\x02\x01\x12\x04\xe5\x03\
    \x17#\n\x0f\n\x07\x04\x1e\x03\x05\x02\x02\x03\x12\x04\xe5\x03&'\nE\n\x06\
    \x04\x1e\x03\x05\x02\x03\x12\x04\xe6\x03\x08&\"5\x20relay\x20host\x20nam\
    e\x20given\x20as\x20URL,\x20at\x20most\x2064\x20characters\n\n\x0f\n\x07\
    \x04\x1e\x03\x05\x02\x03\x04\x12\x04\xe6\x03\x08\x10\n\x0f\n\x07\x04\x1e\
    \x03\x05\x02\x03\x05\x12\x04\xe6\x03\x11\x17\n\x0f\n\x07\x04\x1e\x03\x05\
    \x02\x03\x01\x12\x04\xe6\x03\x18!\n\x0f\n\x07\x04\x1e\x03\x05\x02\x03\
    \x03\x12\x04\xe6\x03$%\n8\n\x06\x04\x1e\x03\x05\x02\x04\x12\x04\xe7\x03\
    \x08!\"(\x20relay\x20port\x20number\x20in\x20the\x20range\x200-65535\n\n\
    \x0f\n\x07\x04\x1e\x03\x05\x02\x04\x04\x12\x04\xe7\x03\x08\x10\n\x0f\n\
    \x07\x04\x1e\x03\x05\x02\x04\x05\x12\x04\xe7\x03\x11\x17\n\x0f\n\x07\x04\
    \x1e\x03\x05\x02\x04\x01\x12\x04\xe7\x03\x18\x1c\n\x0f\n\x07\x04\x1e\x03\
    \x05\x02\x04\x03\x12\x04\xe7\x03\x1f\x20\nJ\n\x04\x04\x1e\x03\x06\x12\
    \x06\xed\x03\x05\xf2\x03\x05\x1a:*\n\x20Structure\x20representing\x20car\
    dano\x20transaction\x20certificate\n\n\r\n\x05\x04\x1e\x03\x06\x01\x12\
    \x04\xed\x03\r%\n\"\n\x06\x04\x1e\x03\x06\x02\0\x12\x04\xee\x03\x081\"\
    \x12\x20certificate\x20type\n\n\x0f\n\x07\x04\x1e\x03\x06\x02\0\x04\x12\
    \x04\xee\x03\x08\x10\n\x0f\n\x07\x04\x1e\x03\x06\x02\0\x06\x12\x04\xee\
    \x03\x11'\n\x0f\n\x07\x04\x1e\x03\x06\x02\0\x01\x12\x04\xee\x03(,\n\x0f\
    \n\x07\x04\x1e\x03\x06\x02\0\x03\x12\x04\xee\x03/0\n5\n\x06\x04\x1e\x03\
    \x06\x02\x01\x12\x04\xef\x03\x08!\"%\x20BIP-32\x20path\x20to\x20derive\
    \x20(staking)\x20key\n\n\x0f\n\x07\x04\x1e\x03\x06\x02\x01\x04\x12\x04\
    \xef\x03\x08\x10\n\x0f\n\x07\x04\x1e\x03\x06\x02\x01\x05\x12\x04\xef\x03\
    \x11\x17\n\x0f\n\x07\x04\x1e\x03\x06\x02\x01\x01\x12\x04\xef\x03\x18\x1c\
    \n\x0f\n\x07\x04\x1e\x03\x06\x02\x01\x03\x12\x04\xef\x03\x1f\x20\n\x1b\n\
    \x06\x04\x1e\x03\x06\x02\x02\x12\x04\xf0\x03\x08\x20\"\x0b\x20pool\x20ha\
    sh\n\n\x0f\n\x07\x04\x1e\x03\x06\x02\x02\x04\x12\x04\xf0\x03\x08\x10\n\
    \x0f\n\x07\x04\x1e\x03\x06\x02\x02\x05\x12\x04\xf0\x03\x11\x16\n\x0f\n\
    \x07\x04\x1e\x03\x06\x02\x02\x01\x12\x04\xf0\x03\x17\x1b\n\x0f\n\x07\x04\
    \x1e\x03\x06\x02\x02\x03\x12\x04\xf0\x03\x1e\x1f\n>\n\x06\x04\x1e\x03\
    \x06\x02\x03\x12\x04\xf1\x03\x08?\".\x20used\x20for\x20stake\x20pool\x20\
    registration\x20certificate\n\n\x0f\n\x07\x04\x1e\x03\x06\x02\x03\x04\
    \x12\x04\xf1\x03\x08\x10\n\x0f\n\x07\x04\x1e\x03\x06\x02\x03\x06\x12\x04\
    \xf1\x03\x11*\n\x0f\n\x07\x04\x1e\x03\x06\x02\x03\x01\x12\x04\xf1\x03+:\
    \n\x0f\n\x07\x04\x1e\x03\x06\x02\x03\x03\x12\x04\xf1\x03=>\nJ\n\x04\x04\
    \x1e\x03\x07\x12\x06\xf6\x03\x04\xf9\x03\x05\x1a:*\n\x20Structure\x20rep\
    resenting\x20cardano\x20transaction\x20withdrawals\n\n\r\n\x05\x04\x1e\
    \x03\x07\x01\x12\x04\xf6\x03\x0c#\n\x0e\n\x06\x04\x1e\x03\x07\x02\0\x12\
    \x04\xf7\x03\x08!\n\x0f\n\x07\x04\x1e\x03\x07\x02\0\x04\x12\x04\xf7\x03\
    \x08\x10\n\x0f\n\x07\x04\x1e\x03\x07\x02\0\x05\x12\x04\xf7\x03\x11\x17\n\
    \x0f\n\x07\x04\x1e\x03\x07\x02\0\x01\x12\x04\xf7\x03\x18\x1c\n\x0f\n\x07\
    \x04\x1e\x03\x07\x02\0\x03\x12\x04\xf7\x03\x1f\x20\n\x0e\n\x06\x04\x1e\
    \x03\x07\x02\x01\x12\x04\xf8\x03\x08#\n\x0f\n\x07\x04\x1e\x03\x07\x02\
    \x01\x04\x12\x04\xf8\x03\x08\x10\n\x0f\n\x07\x04\x1e\x03\x07\x02\x01\x05\
    \x12\x04\xf8\x03\x11\x17\n\x0f\n\x07\x04\x1e\x03\x07\x02\x01\x01\x12\x04\
    \xf8\x03\x18\x1e\n\x0f\n\x07\x04\x1e\x03\x07\x02\x01\x03\x12\x04\xf8\x03\
    !\"\n\x0e\n\x04\x04\x1e\x03\x08\x12\x06\xfb\x03\x04\xfe\x03\x05\n\r\n\
    \x05\x04\x1e\x03\x08\x01\x12\x04\xfb\x03\x0c&\n\x0e\n\x06\x04\x1e\x03\
    \x08\x02\0\x12\x04\xfc\x03\x08\x20\n\x0f\n\x07\x04\x1e\x03\x08\x02\0\x04\
    \x12\x04\xfc\x03\x08\x10\n\x0f\n\x07\x04\x1e\x03\x08\x02\0\x05\x12\x04\
    \xfc\x03\x11\x16\n\x0f\n\x07\x04\x1e\x03\x08\x02\0\x01\x12\x04\xfc\x03\
    \x17\x1b\n\x0f\n\x07\x04\x1e\x03\x08\x02\0\x03\x12\x04\xfc\x03\x1e\x1f\n\
    \x0e\n\x06\x04\x1e\x03\x08\x02\x01\x12\x04\xfd\x03\x08`\n\x0f\n\x07\x04\
    \x1e\x03\x08\x02\x01\x04\x12\x04\xfd\x03\x08\x10\n\x0f\n\x07\x04\x1e\x03\
    \x08\x02\x01\x06\x12\x04\xfd\x03\x11:\n\x0f\n\x07\x04\x1e\x03\x08\x02\
    \x01\x01\x12\x04\xfd\x03;[\n\x0f\n\x07\x04\x1e\x03\x08\x02\x01\x03\x12\
    \x04\xfd\x03^_\nf\n\x02\x04\x1f\x12\x06\x85\x04\0\x89\x04\x01\x1aX*\n\
    \x20Response:\x20Serialised\x20signed\x20cardano\x20transaction\x20chunk\
    \n\x20@next\x20CardanoSignedTxChunkAck\n\n\x0b\n\x03\x04\x1f\x01\x12\x04\
    \x85\x04\x08\x1c\n\x0b\n\x03\x04\x1f\x07\x12\x04\x86\x04\x04\x1d\n\x0c\n\
    \x04\x04\x1f\x07\x03\x12\x04\x86\x04\x04\x1d\n4\n\x04\x04\x1f\x02\0\x12\
    \x04\x88\x04\x04'\"&\x20serialised,\x20signed\x20transaction\x20chunk\n\
    \n\r\n\x05\x04\x1f\x02\0\x04\x12\x04\x88\x04\x04\x0c\n\r\n\x05\x04\x1f\
    \x02\0\x05\x12\x04\x88\x04\r\x12\n\r\n\x05\x04\x1f\x02\0\x01\x12\x04\x88\
    \x04\x13\"\n\r\n\x05\x04\x1f\x02\0\x03\x12\x04\x88\x04%&\n\x89\x01\n\x02\
    \x04\x20\x12\x06\x90\x04\0\x92\x04\x01\x1a{*\n\x20Request:\x20Serialised\
    \x20signed\x20cardano\x20transaction\x20chunk\x20acknowledgement\n\x20@n\
    ext\x20CardanoSignedTxChunk\n\x20@next\x20CardanoSignedTx\n\n\x0b\n\x03\
    \x04\x20\x01\x12\x04\x90\x04\x08\x1f\n\x0b\n\x03\x04\x20\x07\x12\x04\x91\
    \x04\x04\x1d\n\x0c\n\x04\x04\x20\x07\x03\x12\x04\x91\x04\x04\x1d\nG\n\
    \x02\x04!\x12\x06\x98\x04\0\x9d\x04\x01\x1a9*\n\x20Response:\x20Serialis\
    ed\x20signed\x20cardano\x20transaction\n\x20@end\n\n\x0b\n\x03\x04!\x01\
    \x12\x04\x98\x04\x08\x17\n\x0b\n\x03\x04!\x07\x12\x04\x99\x04\x04\x1d\n\
    \x0c\n\x04\x04!\x07\x03\x12\x04\x99\x04\x04\x1d\n,\n\x04\x04!\x02\0\x12\
    \x04\x9b\x04\x04\x1f\"\x1e\x20hash\x20of\x20the\x20transaction\x20body\n\
    \n\r\n\x05\x04!\x02\0\x04\x12\x04\x9b\x04\x04\x0c\n\r\n\x05\x04!\x02\0\
    \x05\x12\x04\x9b\x04\r\x12\n\r\n\x05\x04!\x02\0\x01\x12\x04\x9b\x04\x13\
    \x1a\n\r\n\x05\x04!\x02\0\x03\x12\x04\x9b\x04\x1d\x1e\ne\n\x04\x04!\x02\
    \x01\x12\x04\x9c\x04\x04%\"W\x20deprecated\x20since\x20transaction\x20is\
    \x20sent\x20in\x20chunks\x20now\x20-\x20kept\x20for\x20backwards\x20comp\
    atibility\n\n\r\n\x05\x04!\x02\x01\x04\x12\x04\x9c\x04\x04\x0c\n\r\n\x05\
    \x04!\x02\x01\x05\x12\x04\x9c\x04\r\x12\n\r\n\x05\x04!\x02\x01\x01\x12\
    \x04\x9c\x04\x13\x20\n\r\n\x05\x04!\x02\x01\x03\x12\x04\x9c\x04#$\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
