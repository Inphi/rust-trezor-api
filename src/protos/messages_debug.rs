// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `messages-debug.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct DebugLinkDecision {
    // message fields
    yes_no: ::std::option::Option<bool>,
    swipe: ::std::option::Option<DebugLinkDecision_DebugSwipeDirection>,
    input: ::protobuf::SingularField<::std::string::String>,
    x: ::std::option::Option<u32>,
    y: ::std::option::Option<u32>,
    wait: ::std::option::Option<bool>,
    hold_ms: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DebugLinkDecision {
    fn default() -> &'a DebugLinkDecision {
        <DebugLinkDecision as ::protobuf::Message>::default_instance()
    }
}

impl DebugLinkDecision {
    pub fn new() -> DebugLinkDecision {
        ::std::default::Default::default()
    }

    // optional bool yes_no = 1;


    pub fn get_yes_no(&self) -> bool {
        self.yes_no.unwrap_or(false)
    }
    pub fn clear_yes_no(&mut self) {
        self.yes_no = ::std::option::Option::None;
    }

    pub fn has_yes_no(&self) -> bool {
        self.yes_no.is_some()
    }

    // Param is passed by value, moved
    pub fn set_yes_no(&mut self, v: bool) {
        self.yes_no = ::std::option::Option::Some(v);
    }

    // optional .hw.trezor.messages.debug.DebugLinkDecision.DebugSwipeDirection swipe = 2;


    pub fn get_swipe(&self) -> DebugLinkDecision_DebugSwipeDirection {
        self.swipe.unwrap_or(DebugLinkDecision_DebugSwipeDirection::UP)
    }
    pub fn clear_swipe(&mut self) {
        self.swipe = ::std::option::Option::None;
    }

    pub fn has_swipe(&self) -> bool {
        self.swipe.is_some()
    }

    // Param is passed by value, moved
    pub fn set_swipe(&mut self, v: DebugLinkDecision_DebugSwipeDirection) {
        self.swipe = ::std::option::Option::Some(v);
    }

    // optional string input = 3;


    pub fn get_input(&self) -> &str {
        match self.input.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_input(&mut self) {
        self.input.clear();
    }

    pub fn has_input(&self) -> bool {
        self.input.is_some()
    }

    // Param is passed by value, moved
    pub fn set_input(&mut self, v: ::std::string::String) {
        self.input = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_input(&mut self) -> &mut ::std::string::String {
        if self.input.is_none() {
            self.input.set_default();
        }
        self.input.as_mut().unwrap()
    }

    // Take field
    pub fn take_input(&mut self) -> ::std::string::String {
        self.input.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 x = 4;


    pub fn get_x(&self) -> u32 {
        self.x.unwrap_or(0)
    }
    pub fn clear_x(&mut self) {
        self.x = ::std::option::Option::None;
    }

    pub fn has_x(&self) -> bool {
        self.x.is_some()
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: u32) {
        self.x = ::std::option::Option::Some(v);
    }

    // optional uint32 y = 5;


    pub fn get_y(&self) -> u32 {
        self.y.unwrap_or(0)
    }
    pub fn clear_y(&mut self) {
        self.y = ::std::option::Option::None;
    }

    pub fn has_y(&self) -> bool {
        self.y.is_some()
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: u32) {
        self.y = ::std::option::Option::Some(v);
    }

    // optional bool wait = 6;


    pub fn get_wait(&self) -> bool {
        self.wait.unwrap_or(false)
    }
    pub fn clear_wait(&mut self) {
        self.wait = ::std::option::Option::None;
    }

    pub fn has_wait(&self) -> bool {
        self.wait.is_some()
    }

    // Param is passed by value, moved
    pub fn set_wait(&mut self, v: bool) {
        self.wait = ::std::option::Option::Some(v);
    }

    // optional uint32 hold_ms = 7;


    pub fn get_hold_ms(&self) -> u32 {
        self.hold_ms.unwrap_or(0)
    }
    pub fn clear_hold_ms(&mut self) {
        self.hold_ms = ::std::option::Option::None;
    }

    pub fn has_hold_ms(&self) -> bool {
        self.hold_ms.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hold_ms(&mut self, v: u32) {
        self.hold_ms = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for DebugLinkDecision {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.yes_no = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.swipe, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.input)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.x = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.y = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.wait = ::std::option::Option::Some(tmp);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.hold_ms = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.yes_no {
            my_size += 2;
        }
        if let Some(v) = self.swipe {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        if let Some(ref v) = self.input.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.x {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.y {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.wait {
            my_size += 2;
        }
        if let Some(v) = self.hold_ms {
            my_size += ::protobuf::rt::value_size(7, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.yes_no {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.swipe {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&v))?;
        }
        if let Some(ref v) = self.input.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(v) = self.x {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.y {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.wait {
            os.write_bool(6, v)?;
        }
        if let Some(v) = self.hold_ms {
            os.write_uint32(7, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DebugLinkDecision {
        DebugLinkDecision::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "yes_no",
                |m: &DebugLinkDecision| { &m.yes_no },
                |m: &mut DebugLinkDecision| { &mut m.yes_no },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<DebugLinkDecision_DebugSwipeDirection>>(
                "swipe",
                |m: &DebugLinkDecision| { &m.swipe },
                |m: &mut DebugLinkDecision| { &mut m.swipe },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "input",
                |m: &DebugLinkDecision| { &m.input },
                |m: &mut DebugLinkDecision| { &mut m.input },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "x",
                |m: &DebugLinkDecision| { &m.x },
                |m: &mut DebugLinkDecision| { &mut m.x },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "y",
                |m: &DebugLinkDecision| { &m.y },
                |m: &mut DebugLinkDecision| { &mut m.y },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "wait",
                |m: &DebugLinkDecision| { &m.wait },
                |m: &mut DebugLinkDecision| { &mut m.wait },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "hold_ms",
                |m: &DebugLinkDecision| { &m.hold_ms },
                |m: &mut DebugLinkDecision| { &mut m.hold_ms },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DebugLinkDecision>(
                "DebugLinkDecision",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DebugLinkDecision {
        static instance: ::protobuf::rt::LazyV2<DebugLinkDecision> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DebugLinkDecision::new)
    }
}

impl ::protobuf::Clear for DebugLinkDecision {
    fn clear(&mut self) {
        self.yes_no = ::std::option::Option::None;
        self.swipe = ::std::option::Option::None;
        self.input.clear();
        self.x = ::std::option::Option::None;
        self.y = ::std::option::Option::None;
        self.wait = ::std::option::Option::None;
        self.hold_ms = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DebugLinkDecision {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DebugLinkDecision {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum DebugLinkDecision_DebugSwipeDirection {
    UP = 0,
    DOWN = 1,
    LEFT = 2,
    RIGHT = 3,
}

impl ::protobuf::ProtobufEnum for DebugLinkDecision_DebugSwipeDirection {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DebugLinkDecision_DebugSwipeDirection> {
        match value {
            0 => ::std::option::Option::Some(DebugLinkDecision_DebugSwipeDirection::UP),
            1 => ::std::option::Option::Some(DebugLinkDecision_DebugSwipeDirection::DOWN),
            2 => ::std::option::Option::Some(DebugLinkDecision_DebugSwipeDirection::LEFT),
            3 => ::std::option::Option::Some(DebugLinkDecision_DebugSwipeDirection::RIGHT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [DebugLinkDecision_DebugSwipeDirection] = &[
            DebugLinkDecision_DebugSwipeDirection::UP,
            DebugLinkDecision_DebugSwipeDirection::DOWN,
            DebugLinkDecision_DebugSwipeDirection::LEFT,
            DebugLinkDecision_DebugSwipeDirection::RIGHT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<DebugLinkDecision_DebugSwipeDirection>("DebugLinkDecision.DebugSwipeDirection", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for DebugLinkDecision_DebugSwipeDirection {
}

impl ::std::default::Default for DebugLinkDecision_DebugSwipeDirection {
    fn default() -> Self {
        DebugLinkDecision_DebugSwipeDirection::UP
    }
}

impl ::protobuf::reflect::ProtobufValue for DebugLinkDecision_DebugSwipeDirection {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DebugLinkLayout {
    // message fields
    pub lines: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DebugLinkLayout {
    fn default() -> &'a DebugLinkLayout {
        <DebugLinkLayout as ::protobuf::Message>::default_instance()
    }
}

impl DebugLinkLayout {
    pub fn new() -> DebugLinkLayout {
        ::std::default::Default::default()
    }

    // repeated string lines = 1;


    pub fn get_lines(&self) -> &[::std::string::String] {
        &self.lines
    }
    pub fn clear_lines(&mut self) {
        self.lines.clear();
    }

    // Param is passed by value, moved
    pub fn set_lines(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.lines = v;
    }

    // Mutable pointer to the field.
    pub fn mut_lines(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.lines
    }

    // Take field
    pub fn take_lines(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.lines, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for DebugLinkLayout {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.lines)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.lines {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.lines {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DebugLinkLayout {
        DebugLinkLayout::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "lines",
                |m: &DebugLinkLayout| { &m.lines },
                |m: &mut DebugLinkLayout| { &mut m.lines },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DebugLinkLayout>(
                "DebugLinkLayout",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DebugLinkLayout {
        static instance: ::protobuf::rt::LazyV2<DebugLinkLayout> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DebugLinkLayout::new)
    }
}

impl ::protobuf::Clear for DebugLinkLayout {
    fn clear(&mut self) {
        self.lines.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DebugLinkLayout {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DebugLinkLayout {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DebugLinkReseedRandom {
    // message fields
    value: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DebugLinkReseedRandom {
    fn default() -> &'a DebugLinkReseedRandom {
        <DebugLinkReseedRandom as ::protobuf::Message>::default_instance()
    }
}

impl DebugLinkReseedRandom {
    pub fn new() -> DebugLinkReseedRandom {
        ::std::default::Default::default()
    }

    // optional uint32 value = 1;


    pub fn get_value(&self) -> u32 {
        self.value.unwrap_or(0)
    }
    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: u32) {
        self.value = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for DebugLinkReseedRandom {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.value = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.value {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.value {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DebugLinkReseedRandom {
        DebugLinkReseedRandom::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "value",
                |m: &DebugLinkReseedRandom| { &m.value },
                |m: &mut DebugLinkReseedRandom| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DebugLinkReseedRandom>(
                "DebugLinkReseedRandom",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DebugLinkReseedRandom {
        static instance: ::protobuf::rt::LazyV2<DebugLinkReseedRandom> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DebugLinkReseedRandom::new)
    }
}

impl ::protobuf::Clear for DebugLinkReseedRandom {
    fn clear(&mut self) {
        self.value = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DebugLinkReseedRandom {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DebugLinkReseedRandom {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DebugLinkRecordScreen {
    // message fields
    target_directory: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DebugLinkRecordScreen {
    fn default() -> &'a DebugLinkRecordScreen {
        <DebugLinkRecordScreen as ::protobuf::Message>::default_instance()
    }
}

impl DebugLinkRecordScreen {
    pub fn new() -> DebugLinkRecordScreen {
        ::std::default::Default::default()
    }

    // optional string target_directory = 1;


    pub fn get_target_directory(&self) -> &str {
        match self.target_directory.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_target_directory(&mut self) {
        self.target_directory.clear();
    }

    pub fn has_target_directory(&self) -> bool {
        self.target_directory.is_some()
    }

    // Param is passed by value, moved
    pub fn set_target_directory(&mut self, v: ::std::string::String) {
        self.target_directory = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_target_directory(&mut self) -> &mut ::std::string::String {
        if self.target_directory.is_none() {
            self.target_directory.set_default();
        }
        self.target_directory.as_mut().unwrap()
    }

    // Take field
    pub fn take_target_directory(&mut self) -> ::std::string::String {
        self.target_directory.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for DebugLinkRecordScreen {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.target_directory)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.target_directory.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.target_directory.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DebugLinkRecordScreen {
        DebugLinkRecordScreen::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "target_directory",
                |m: &DebugLinkRecordScreen| { &m.target_directory },
                |m: &mut DebugLinkRecordScreen| { &mut m.target_directory },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DebugLinkRecordScreen>(
                "DebugLinkRecordScreen",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DebugLinkRecordScreen {
        static instance: ::protobuf::rt::LazyV2<DebugLinkRecordScreen> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DebugLinkRecordScreen::new)
    }
}

impl ::protobuf::Clear for DebugLinkRecordScreen {
    fn clear(&mut self) {
        self.target_directory.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DebugLinkRecordScreen {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DebugLinkRecordScreen {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DebugLinkGetState {
    // message fields
    wait_word_list: ::std::option::Option<bool>,
    wait_word_pos: ::std::option::Option<bool>,
    wait_layout: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DebugLinkGetState {
    fn default() -> &'a DebugLinkGetState {
        <DebugLinkGetState as ::protobuf::Message>::default_instance()
    }
}

impl DebugLinkGetState {
    pub fn new() -> DebugLinkGetState {
        ::std::default::Default::default()
    }

    // optional bool wait_word_list = 1;


    pub fn get_wait_word_list(&self) -> bool {
        self.wait_word_list.unwrap_or(false)
    }
    pub fn clear_wait_word_list(&mut self) {
        self.wait_word_list = ::std::option::Option::None;
    }

    pub fn has_wait_word_list(&self) -> bool {
        self.wait_word_list.is_some()
    }

    // Param is passed by value, moved
    pub fn set_wait_word_list(&mut self, v: bool) {
        self.wait_word_list = ::std::option::Option::Some(v);
    }

    // optional bool wait_word_pos = 2;


    pub fn get_wait_word_pos(&self) -> bool {
        self.wait_word_pos.unwrap_or(false)
    }
    pub fn clear_wait_word_pos(&mut self) {
        self.wait_word_pos = ::std::option::Option::None;
    }

    pub fn has_wait_word_pos(&self) -> bool {
        self.wait_word_pos.is_some()
    }

    // Param is passed by value, moved
    pub fn set_wait_word_pos(&mut self, v: bool) {
        self.wait_word_pos = ::std::option::Option::Some(v);
    }

    // optional bool wait_layout = 3;


    pub fn get_wait_layout(&self) -> bool {
        self.wait_layout.unwrap_or(false)
    }
    pub fn clear_wait_layout(&mut self) {
        self.wait_layout = ::std::option::Option::None;
    }

    pub fn has_wait_layout(&self) -> bool {
        self.wait_layout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_wait_layout(&mut self, v: bool) {
        self.wait_layout = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for DebugLinkGetState {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.wait_word_list = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.wait_word_pos = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.wait_layout = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.wait_word_list {
            my_size += 2;
        }
        if let Some(v) = self.wait_word_pos {
            my_size += 2;
        }
        if let Some(v) = self.wait_layout {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.wait_word_list {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.wait_word_pos {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.wait_layout {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DebugLinkGetState {
        DebugLinkGetState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "wait_word_list",
                |m: &DebugLinkGetState| { &m.wait_word_list },
                |m: &mut DebugLinkGetState| { &mut m.wait_word_list },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "wait_word_pos",
                |m: &DebugLinkGetState| { &m.wait_word_pos },
                |m: &mut DebugLinkGetState| { &mut m.wait_word_pos },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "wait_layout",
                |m: &DebugLinkGetState| { &m.wait_layout },
                |m: &mut DebugLinkGetState| { &mut m.wait_layout },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DebugLinkGetState>(
                "DebugLinkGetState",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DebugLinkGetState {
        static instance: ::protobuf::rt::LazyV2<DebugLinkGetState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DebugLinkGetState::new)
    }
}

impl ::protobuf::Clear for DebugLinkGetState {
    fn clear(&mut self) {
        self.wait_word_list = ::std::option::Option::None;
        self.wait_word_pos = ::std::option::Option::None;
        self.wait_layout = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DebugLinkGetState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DebugLinkGetState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DebugLinkState {
    // message fields
    layout: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    pin: ::protobuf::SingularField<::std::string::String>,
    matrix: ::protobuf::SingularField<::std::string::String>,
    mnemonic_secret: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    pub node: ::protobuf::SingularPtrField<super::messages_common::HDNodeType>,
    passphrase_protection: ::std::option::Option<bool>,
    reset_word: ::protobuf::SingularField<::std::string::String>,
    reset_entropy: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    recovery_fake_word: ::protobuf::SingularField<::std::string::String>,
    recovery_word_pos: ::std::option::Option<u32>,
    reset_word_pos: ::std::option::Option<u32>,
    mnemonic_type: ::std::option::Option<super::messages_management::BackupType>,
    pub layout_lines: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DebugLinkState {
    fn default() -> &'a DebugLinkState {
        <DebugLinkState as ::protobuf::Message>::default_instance()
    }
}

impl DebugLinkState {
    pub fn new() -> DebugLinkState {
        ::std::default::Default::default()
    }

    // optional bytes layout = 1;


    pub fn get_layout(&self) -> &[u8] {
        match self.layout.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_layout(&mut self) {
        self.layout.clear();
    }

    pub fn has_layout(&self) -> bool {
        self.layout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_layout(&mut self, v: ::std::vec::Vec<u8>) {
        self.layout = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_layout(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.layout.is_none() {
            self.layout.set_default();
        }
        self.layout.as_mut().unwrap()
    }

    // Take field
    pub fn take_layout(&mut self) -> ::std::vec::Vec<u8> {
        self.layout.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional string pin = 2;


    pub fn get_pin(&self) -> &str {
        match self.pin.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_pin(&mut self) {
        self.pin.clear();
    }

    pub fn has_pin(&self) -> bool {
        self.pin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pin(&mut self, v: ::std::string::String) {
        self.pin = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pin(&mut self) -> &mut ::std::string::String {
        if self.pin.is_none() {
            self.pin.set_default();
        }
        self.pin.as_mut().unwrap()
    }

    // Take field
    pub fn take_pin(&mut self) -> ::std::string::String {
        self.pin.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string matrix = 3;


    pub fn get_matrix(&self) -> &str {
        match self.matrix.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_matrix(&mut self) {
        self.matrix.clear();
    }

    pub fn has_matrix(&self) -> bool {
        self.matrix.is_some()
    }

    // Param is passed by value, moved
    pub fn set_matrix(&mut self, v: ::std::string::String) {
        self.matrix = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_matrix(&mut self) -> &mut ::std::string::String {
        if self.matrix.is_none() {
            self.matrix.set_default();
        }
        self.matrix.as_mut().unwrap()
    }

    // Take field
    pub fn take_matrix(&mut self) -> ::std::string::String {
        self.matrix.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes mnemonic_secret = 4;


    pub fn get_mnemonic_secret(&self) -> &[u8] {
        match self.mnemonic_secret.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_mnemonic_secret(&mut self) {
        self.mnemonic_secret.clear();
    }

    pub fn has_mnemonic_secret(&self) -> bool {
        self.mnemonic_secret.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mnemonic_secret(&mut self, v: ::std::vec::Vec<u8>) {
        self.mnemonic_secret = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mnemonic_secret(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.mnemonic_secret.is_none() {
            self.mnemonic_secret.set_default();
        }
        self.mnemonic_secret.as_mut().unwrap()
    }

    // Take field
    pub fn take_mnemonic_secret(&mut self) -> ::std::vec::Vec<u8> {
        self.mnemonic_secret.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional .hw.trezor.messages.common.HDNodeType node = 5;


    pub fn get_node(&self) -> &super::messages_common::HDNodeType {
        self.node.as_ref().unwrap_or_else(|| <super::messages_common::HDNodeType as ::protobuf::Message>::default_instance())
    }
    pub fn clear_node(&mut self) {
        self.node.clear();
    }

    pub fn has_node(&self) -> bool {
        self.node.is_some()
    }

    // Param is passed by value, moved
    pub fn set_node(&mut self, v: super::messages_common::HDNodeType) {
        self.node = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node(&mut self) -> &mut super::messages_common::HDNodeType {
        if self.node.is_none() {
            self.node.set_default();
        }
        self.node.as_mut().unwrap()
    }

    // Take field
    pub fn take_node(&mut self) -> super::messages_common::HDNodeType {
        self.node.take().unwrap_or_else(|| super::messages_common::HDNodeType::new())
    }

    // optional bool passphrase_protection = 6;


    pub fn get_passphrase_protection(&self) -> bool {
        self.passphrase_protection.unwrap_or(false)
    }
    pub fn clear_passphrase_protection(&mut self) {
        self.passphrase_protection = ::std::option::Option::None;
    }

    pub fn has_passphrase_protection(&self) -> bool {
        self.passphrase_protection.is_some()
    }

    // Param is passed by value, moved
    pub fn set_passphrase_protection(&mut self, v: bool) {
        self.passphrase_protection = ::std::option::Option::Some(v);
    }

    // optional string reset_word = 7;


    pub fn get_reset_word(&self) -> &str {
        match self.reset_word.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_reset_word(&mut self) {
        self.reset_word.clear();
    }

    pub fn has_reset_word(&self) -> bool {
        self.reset_word.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reset_word(&mut self, v: ::std::string::String) {
        self.reset_word = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reset_word(&mut self) -> &mut ::std::string::String {
        if self.reset_word.is_none() {
            self.reset_word.set_default();
        }
        self.reset_word.as_mut().unwrap()
    }

    // Take field
    pub fn take_reset_word(&mut self) -> ::std::string::String {
        self.reset_word.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes reset_entropy = 8;


    pub fn get_reset_entropy(&self) -> &[u8] {
        match self.reset_entropy.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_reset_entropy(&mut self) {
        self.reset_entropy.clear();
    }

    pub fn has_reset_entropy(&self) -> bool {
        self.reset_entropy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reset_entropy(&mut self, v: ::std::vec::Vec<u8>) {
        self.reset_entropy = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reset_entropy(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.reset_entropy.is_none() {
            self.reset_entropy.set_default();
        }
        self.reset_entropy.as_mut().unwrap()
    }

    // Take field
    pub fn take_reset_entropy(&mut self) -> ::std::vec::Vec<u8> {
        self.reset_entropy.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional string recovery_fake_word = 9;


    pub fn get_recovery_fake_word(&self) -> &str {
        match self.recovery_fake_word.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_recovery_fake_word(&mut self) {
        self.recovery_fake_word.clear();
    }

    pub fn has_recovery_fake_word(&self) -> bool {
        self.recovery_fake_word.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recovery_fake_word(&mut self, v: ::std::string::String) {
        self.recovery_fake_word = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recovery_fake_word(&mut self) -> &mut ::std::string::String {
        if self.recovery_fake_word.is_none() {
            self.recovery_fake_word.set_default();
        }
        self.recovery_fake_word.as_mut().unwrap()
    }

    // Take field
    pub fn take_recovery_fake_word(&mut self) -> ::std::string::String {
        self.recovery_fake_word.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 recovery_word_pos = 10;


    pub fn get_recovery_word_pos(&self) -> u32 {
        self.recovery_word_pos.unwrap_or(0)
    }
    pub fn clear_recovery_word_pos(&mut self) {
        self.recovery_word_pos = ::std::option::Option::None;
    }

    pub fn has_recovery_word_pos(&self) -> bool {
        self.recovery_word_pos.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recovery_word_pos(&mut self, v: u32) {
        self.recovery_word_pos = ::std::option::Option::Some(v);
    }

    // optional uint32 reset_word_pos = 11;


    pub fn get_reset_word_pos(&self) -> u32 {
        self.reset_word_pos.unwrap_or(0)
    }
    pub fn clear_reset_word_pos(&mut self) {
        self.reset_word_pos = ::std::option::Option::None;
    }

    pub fn has_reset_word_pos(&self) -> bool {
        self.reset_word_pos.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reset_word_pos(&mut self, v: u32) {
        self.reset_word_pos = ::std::option::Option::Some(v);
    }

    // optional .hw.trezor.messages.management.BackupType mnemonic_type = 12;


    pub fn get_mnemonic_type(&self) -> super::messages_management::BackupType {
        self.mnemonic_type.unwrap_or(super::messages_management::BackupType::Bip39)
    }
    pub fn clear_mnemonic_type(&mut self) {
        self.mnemonic_type = ::std::option::Option::None;
    }

    pub fn has_mnemonic_type(&self) -> bool {
        self.mnemonic_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mnemonic_type(&mut self, v: super::messages_management::BackupType) {
        self.mnemonic_type = ::std::option::Option::Some(v);
    }

    // repeated string layout_lines = 13;


    pub fn get_layout_lines(&self) -> &[::std::string::String] {
        &self.layout_lines
    }
    pub fn clear_layout_lines(&mut self) {
        self.layout_lines.clear();
    }

    // Param is passed by value, moved
    pub fn set_layout_lines(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.layout_lines = v;
    }

    // Mutable pointer to the field.
    pub fn mut_layout_lines(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.layout_lines
    }

    // Take field
    pub fn take_layout_lines(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.layout_lines, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for DebugLinkState {
    fn is_initialized(&self) -> bool {
        for v in &self.node {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.layout)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.pin)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.matrix)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.mnemonic_secret)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.node)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.passphrase_protection = ::std::option::Option::Some(tmp);
                },
                7 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.reset_word)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.reset_entropy)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.recovery_fake_word)?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.recovery_word_pos = ::std::option::Option::Some(tmp);
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.reset_word_pos = ::std::option::Option::Some(tmp);
                },
                12 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.mnemonic_type, 12, &mut self.unknown_fields)?
                },
                13 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.layout_lines)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.layout.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(ref v) = self.pin.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.matrix.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(ref v) = self.mnemonic_secret.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        if let Some(ref v) = self.node.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.passphrase_protection {
            my_size += 2;
        }
        if let Some(ref v) = self.reset_word.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(ref v) = self.reset_entropy.as_ref() {
            my_size += ::protobuf::rt::bytes_size(8, &v);
        }
        if let Some(ref v) = self.recovery_fake_word.as_ref() {
            my_size += ::protobuf::rt::string_size(9, &v);
        }
        if let Some(v) = self.recovery_word_pos {
            my_size += ::protobuf::rt::value_size(10, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.reset_word_pos {
            my_size += ::protobuf::rt::value_size(11, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.mnemonic_type {
            my_size += ::protobuf::rt::enum_size(12, v);
        }
        for value in &self.layout_lines {
            my_size += ::protobuf::rt::string_size(13, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.layout.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(ref v) = self.pin.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.matrix.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(ref v) = self.mnemonic_secret.as_ref() {
            os.write_bytes(4, &v)?;
        }
        if let Some(ref v) = self.node.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.passphrase_protection {
            os.write_bool(6, v)?;
        }
        if let Some(ref v) = self.reset_word.as_ref() {
            os.write_string(7, &v)?;
        }
        if let Some(ref v) = self.reset_entropy.as_ref() {
            os.write_bytes(8, &v)?;
        }
        if let Some(ref v) = self.recovery_fake_word.as_ref() {
            os.write_string(9, &v)?;
        }
        if let Some(v) = self.recovery_word_pos {
            os.write_uint32(10, v)?;
        }
        if let Some(v) = self.reset_word_pos {
            os.write_uint32(11, v)?;
        }
        if let Some(v) = self.mnemonic_type {
            os.write_enum(12, ::protobuf::ProtobufEnum::value(&v))?;
        }
        for v in &self.layout_lines {
            os.write_string(13, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DebugLinkState {
        DebugLinkState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "layout",
                |m: &DebugLinkState| { &m.layout },
                |m: &mut DebugLinkState| { &mut m.layout },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pin",
                |m: &DebugLinkState| { &m.pin },
                |m: &mut DebugLinkState| { &mut m.pin },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "matrix",
                |m: &DebugLinkState| { &m.matrix },
                |m: &mut DebugLinkState| { &mut m.matrix },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "mnemonic_secret",
                |m: &DebugLinkState| { &m.mnemonic_secret },
                |m: &mut DebugLinkState| { &mut m.mnemonic_secret },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::messages_common::HDNodeType>>(
                "node",
                |m: &DebugLinkState| { &m.node },
                |m: &mut DebugLinkState| { &mut m.node },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "passphrase_protection",
                |m: &DebugLinkState| { &m.passphrase_protection },
                |m: &mut DebugLinkState| { &mut m.passphrase_protection },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "reset_word",
                |m: &DebugLinkState| { &m.reset_word },
                |m: &mut DebugLinkState| { &mut m.reset_word },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "reset_entropy",
                |m: &DebugLinkState| { &m.reset_entropy },
                |m: &mut DebugLinkState| { &mut m.reset_entropy },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "recovery_fake_word",
                |m: &DebugLinkState| { &m.recovery_fake_word },
                |m: &mut DebugLinkState| { &mut m.recovery_fake_word },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "recovery_word_pos",
                |m: &DebugLinkState| { &m.recovery_word_pos },
                |m: &mut DebugLinkState| { &mut m.recovery_word_pos },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "reset_word_pos",
                |m: &DebugLinkState| { &m.reset_word_pos },
                |m: &mut DebugLinkState| { &mut m.reset_word_pos },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::messages_management::BackupType>>(
                "mnemonic_type",
                |m: &DebugLinkState| { &m.mnemonic_type },
                |m: &mut DebugLinkState| { &mut m.mnemonic_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "layout_lines",
                |m: &DebugLinkState| { &m.layout_lines },
                |m: &mut DebugLinkState| { &mut m.layout_lines },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DebugLinkState>(
                "DebugLinkState",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DebugLinkState {
        static instance: ::protobuf::rt::LazyV2<DebugLinkState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DebugLinkState::new)
    }
}

impl ::protobuf::Clear for DebugLinkState {
    fn clear(&mut self) {
        self.layout.clear();
        self.pin.clear();
        self.matrix.clear();
        self.mnemonic_secret.clear();
        self.node.clear();
        self.passphrase_protection = ::std::option::Option::None;
        self.reset_word.clear();
        self.reset_entropy.clear();
        self.recovery_fake_word.clear();
        self.recovery_word_pos = ::std::option::Option::None;
        self.reset_word_pos = ::std::option::Option::None;
        self.mnemonic_type = ::std::option::Option::None;
        self.layout_lines.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DebugLinkState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DebugLinkState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DebugLinkStop {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DebugLinkStop {
    fn default() -> &'a DebugLinkStop {
        <DebugLinkStop as ::protobuf::Message>::default_instance()
    }
}

impl DebugLinkStop {
    pub fn new() -> DebugLinkStop {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for DebugLinkStop {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DebugLinkStop {
        DebugLinkStop::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DebugLinkStop>(
                "DebugLinkStop",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DebugLinkStop {
        static instance: ::protobuf::rt::LazyV2<DebugLinkStop> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DebugLinkStop::new)
    }
}

impl ::protobuf::Clear for DebugLinkStop {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DebugLinkStop {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DebugLinkStop {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DebugLinkLog {
    // message fields
    level: ::std::option::Option<u32>,
    bucket: ::protobuf::SingularField<::std::string::String>,
    text: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DebugLinkLog {
    fn default() -> &'a DebugLinkLog {
        <DebugLinkLog as ::protobuf::Message>::default_instance()
    }
}

impl DebugLinkLog {
    pub fn new() -> DebugLinkLog {
        ::std::default::Default::default()
    }

    // optional uint32 level = 1;


    pub fn get_level(&self) -> u32 {
        self.level.unwrap_or(0)
    }
    pub fn clear_level(&mut self) {
        self.level = ::std::option::Option::None;
    }

    pub fn has_level(&self) -> bool {
        self.level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_level(&mut self, v: u32) {
        self.level = ::std::option::Option::Some(v);
    }

    // optional string bucket = 2;


    pub fn get_bucket(&self) -> &str {
        match self.bucket.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_bucket(&mut self) {
        self.bucket.clear();
    }

    pub fn has_bucket(&self) -> bool {
        self.bucket.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bucket(&mut self, v: ::std::string::String) {
        self.bucket = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bucket(&mut self) -> &mut ::std::string::String {
        if self.bucket.is_none() {
            self.bucket.set_default();
        }
        self.bucket.as_mut().unwrap()
    }

    // Take field
    pub fn take_bucket(&mut self) -> ::std::string::String {
        self.bucket.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string text = 3;


    pub fn get_text(&self) -> &str {
        match self.text.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_text(&mut self) {
        self.text.clear();
    }

    pub fn has_text(&self) -> bool {
        self.text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.text = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        if self.text.is_none() {
            self.text.set_default();
        }
        self.text.as_mut().unwrap()
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        self.text.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for DebugLinkLog {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.level = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.bucket)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.text)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.level {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.bucket.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.text.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.level {
            os.write_uint32(1, v)?;
        }
        if let Some(ref v) = self.bucket.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.text.as_ref() {
            os.write_string(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DebugLinkLog {
        DebugLinkLog::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "level",
                |m: &DebugLinkLog| { &m.level },
                |m: &mut DebugLinkLog| { &mut m.level },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bucket",
                |m: &DebugLinkLog| { &m.bucket },
                |m: &mut DebugLinkLog| { &mut m.bucket },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "text",
                |m: &DebugLinkLog| { &m.text },
                |m: &mut DebugLinkLog| { &mut m.text },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DebugLinkLog>(
                "DebugLinkLog",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DebugLinkLog {
        static instance: ::protobuf::rt::LazyV2<DebugLinkLog> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DebugLinkLog::new)
    }
}

impl ::protobuf::Clear for DebugLinkLog {
    fn clear(&mut self) {
        self.level = ::std::option::Option::None;
        self.bucket.clear();
        self.text.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DebugLinkLog {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DebugLinkLog {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DebugLinkMemoryRead {
    // message fields
    address: ::std::option::Option<u32>,
    length: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DebugLinkMemoryRead {
    fn default() -> &'a DebugLinkMemoryRead {
        <DebugLinkMemoryRead as ::protobuf::Message>::default_instance()
    }
}

impl DebugLinkMemoryRead {
    pub fn new() -> DebugLinkMemoryRead {
        ::std::default::Default::default()
    }

    // optional uint32 address = 1;


    pub fn get_address(&self) -> u32 {
        self.address.unwrap_or(0)
    }
    pub fn clear_address(&mut self) {
        self.address = ::std::option::Option::None;
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: u32) {
        self.address = ::std::option::Option::Some(v);
    }

    // optional uint32 length = 2;


    pub fn get_length(&self) -> u32 {
        self.length.unwrap_or(0)
    }
    pub fn clear_length(&mut self) {
        self.length = ::std::option::Option::None;
    }

    pub fn has_length(&self) -> bool {
        self.length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_length(&mut self, v: u32) {
        self.length = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for DebugLinkMemoryRead {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.address = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.length = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.address {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.length {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.address {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.length {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DebugLinkMemoryRead {
        DebugLinkMemoryRead::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "address",
                |m: &DebugLinkMemoryRead| { &m.address },
                |m: &mut DebugLinkMemoryRead| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "length",
                |m: &DebugLinkMemoryRead| { &m.length },
                |m: &mut DebugLinkMemoryRead| { &mut m.length },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DebugLinkMemoryRead>(
                "DebugLinkMemoryRead",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DebugLinkMemoryRead {
        static instance: ::protobuf::rt::LazyV2<DebugLinkMemoryRead> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DebugLinkMemoryRead::new)
    }
}

impl ::protobuf::Clear for DebugLinkMemoryRead {
    fn clear(&mut self) {
        self.address = ::std::option::Option::None;
        self.length = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DebugLinkMemoryRead {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DebugLinkMemoryRead {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DebugLinkMemory {
    // message fields
    memory: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DebugLinkMemory {
    fn default() -> &'a DebugLinkMemory {
        <DebugLinkMemory as ::protobuf::Message>::default_instance()
    }
}

impl DebugLinkMemory {
    pub fn new() -> DebugLinkMemory {
        ::std::default::Default::default()
    }

    // optional bytes memory = 1;


    pub fn get_memory(&self) -> &[u8] {
        match self.memory.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_memory(&mut self) {
        self.memory.clear();
    }

    pub fn has_memory(&self) -> bool {
        self.memory.is_some()
    }

    // Param is passed by value, moved
    pub fn set_memory(&mut self, v: ::std::vec::Vec<u8>) {
        self.memory = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_memory(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.memory.is_none() {
            self.memory.set_default();
        }
        self.memory.as_mut().unwrap()
    }

    // Take field
    pub fn take_memory(&mut self) -> ::std::vec::Vec<u8> {
        self.memory.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for DebugLinkMemory {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.memory)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.memory.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.memory.as_ref() {
            os.write_bytes(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DebugLinkMemory {
        DebugLinkMemory::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "memory",
                |m: &DebugLinkMemory| { &m.memory },
                |m: &mut DebugLinkMemory| { &mut m.memory },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DebugLinkMemory>(
                "DebugLinkMemory",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DebugLinkMemory {
        static instance: ::protobuf::rt::LazyV2<DebugLinkMemory> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DebugLinkMemory::new)
    }
}

impl ::protobuf::Clear for DebugLinkMemory {
    fn clear(&mut self) {
        self.memory.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DebugLinkMemory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DebugLinkMemory {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DebugLinkMemoryWrite {
    // message fields
    address: ::std::option::Option<u32>,
    memory: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    flash: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DebugLinkMemoryWrite {
    fn default() -> &'a DebugLinkMemoryWrite {
        <DebugLinkMemoryWrite as ::protobuf::Message>::default_instance()
    }
}

impl DebugLinkMemoryWrite {
    pub fn new() -> DebugLinkMemoryWrite {
        ::std::default::Default::default()
    }

    // optional uint32 address = 1;


    pub fn get_address(&self) -> u32 {
        self.address.unwrap_or(0)
    }
    pub fn clear_address(&mut self) {
        self.address = ::std::option::Option::None;
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: u32) {
        self.address = ::std::option::Option::Some(v);
    }

    // optional bytes memory = 2;


    pub fn get_memory(&self) -> &[u8] {
        match self.memory.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_memory(&mut self) {
        self.memory.clear();
    }

    pub fn has_memory(&self) -> bool {
        self.memory.is_some()
    }

    // Param is passed by value, moved
    pub fn set_memory(&mut self, v: ::std::vec::Vec<u8>) {
        self.memory = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_memory(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.memory.is_none() {
            self.memory.set_default();
        }
        self.memory.as_mut().unwrap()
    }

    // Take field
    pub fn take_memory(&mut self) -> ::std::vec::Vec<u8> {
        self.memory.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bool flash = 3;


    pub fn get_flash(&self) -> bool {
        self.flash.unwrap_or(false)
    }
    pub fn clear_flash(&mut self) {
        self.flash = ::std::option::Option::None;
    }

    pub fn has_flash(&self) -> bool {
        self.flash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_flash(&mut self, v: bool) {
        self.flash = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for DebugLinkMemoryWrite {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.address = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.memory)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.flash = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.address {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.memory.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.flash {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.address {
            os.write_uint32(1, v)?;
        }
        if let Some(ref v) = self.memory.as_ref() {
            os.write_bytes(2, &v)?;
        }
        if let Some(v) = self.flash {
            os.write_bool(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DebugLinkMemoryWrite {
        DebugLinkMemoryWrite::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "address",
                |m: &DebugLinkMemoryWrite| { &m.address },
                |m: &mut DebugLinkMemoryWrite| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "memory",
                |m: &DebugLinkMemoryWrite| { &m.memory },
                |m: &mut DebugLinkMemoryWrite| { &mut m.memory },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "flash",
                |m: &DebugLinkMemoryWrite| { &m.flash },
                |m: &mut DebugLinkMemoryWrite| { &mut m.flash },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DebugLinkMemoryWrite>(
                "DebugLinkMemoryWrite",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DebugLinkMemoryWrite {
        static instance: ::protobuf::rt::LazyV2<DebugLinkMemoryWrite> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DebugLinkMemoryWrite::new)
    }
}

impl ::protobuf::Clear for DebugLinkMemoryWrite {
    fn clear(&mut self) {
        self.address = ::std::option::Option::None;
        self.memory.clear();
        self.flash = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DebugLinkMemoryWrite {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DebugLinkMemoryWrite {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DebugLinkFlashErase {
    // message fields
    sector: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DebugLinkFlashErase {
    fn default() -> &'a DebugLinkFlashErase {
        <DebugLinkFlashErase as ::protobuf::Message>::default_instance()
    }
}

impl DebugLinkFlashErase {
    pub fn new() -> DebugLinkFlashErase {
        ::std::default::Default::default()
    }

    // optional uint32 sector = 1;


    pub fn get_sector(&self) -> u32 {
        self.sector.unwrap_or(0)
    }
    pub fn clear_sector(&mut self) {
        self.sector = ::std::option::Option::None;
    }

    pub fn has_sector(&self) -> bool {
        self.sector.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sector(&mut self, v: u32) {
        self.sector = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for DebugLinkFlashErase {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.sector = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.sector {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.sector {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DebugLinkFlashErase {
        DebugLinkFlashErase::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "sector",
                |m: &DebugLinkFlashErase| { &m.sector },
                |m: &mut DebugLinkFlashErase| { &mut m.sector },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DebugLinkFlashErase>(
                "DebugLinkFlashErase",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DebugLinkFlashErase {
        static instance: ::protobuf::rt::LazyV2<DebugLinkFlashErase> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DebugLinkFlashErase::new)
    }
}

impl ::protobuf::Clear for DebugLinkFlashErase {
    fn clear(&mut self) {
        self.sector = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DebugLinkFlashErase {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DebugLinkFlashErase {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DebugLinkEraseSdCard {
    // message fields
    format: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DebugLinkEraseSdCard {
    fn default() -> &'a DebugLinkEraseSdCard {
        <DebugLinkEraseSdCard as ::protobuf::Message>::default_instance()
    }
}

impl DebugLinkEraseSdCard {
    pub fn new() -> DebugLinkEraseSdCard {
        ::std::default::Default::default()
    }

    // optional bool format = 1;


    pub fn get_format(&self) -> bool {
        self.format.unwrap_or(false)
    }
    pub fn clear_format(&mut self) {
        self.format = ::std::option::Option::None;
    }

    pub fn has_format(&self) -> bool {
        self.format.is_some()
    }

    // Param is passed by value, moved
    pub fn set_format(&mut self, v: bool) {
        self.format = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for DebugLinkEraseSdCard {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.format = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.format {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.format {
            os.write_bool(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DebugLinkEraseSdCard {
        DebugLinkEraseSdCard::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "format",
                |m: &DebugLinkEraseSdCard| { &m.format },
                |m: &mut DebugLinkEraseSdCard| { &mut m.format },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DebugLinkEraseSdCard>(
                "DebugLinkEraseSdCard",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DebugLinkEraseSdCard {
        static instance: ::protobuf::rt::LazyV2<DebugLinkEraseSdCard> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DebugLinkEraseSdCard::new)
    }
}

impl ::protobuf::Clear for DebugLinkEraseSdCard {
    fn clear(&mut self) {
        self.format = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DebugLinkEraseSdCard {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DebugLinkEraseSdCard {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DebugLinkWatchLayout {
    // message fields
    watch: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DebugLinkWatchLayout {
    fn default() -> &'a DebugLinkWatchLayout {
        <DebugLinkWatchLayout as ::protobuf::Message>::default_instance()
    }
}

impl DebugLinkWatchLayout {
    pub fn new() -> DebugLinkWatchLayout {
        ::std::default::Default::default()
    }

    // optional bool watch = 1;


    pub fn get_watch(&self) -> bool {
        self.watch.unwrap_or(false)
    }
    pub fn clear_watch(&mut self) {
        self.watch = ::std::option::Option::None;
    }

    pub fn has_watch(&self) -> bool {
        self.watch.is_some()
    }

    // Param is passed by value, moved
    pub fn set_watch(&mut self, v: bool) {
        self.watch = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for DebugLinkWatchLayout {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.watch = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.watch {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.watch {
            os.write_bool(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DebugLinkWatchLayout {
        DebugLinkWatchLayout::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "watch",
                |m: &DebugLinkWatchLayout| { &m.watch },
                |m: &mut DebugLinkWatchLayout| { &mut m.watch },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DebugLinkWatchLayout>(
                "DebugLinkWatchLayout",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DebugLinkWatchLayout {
        static instance: ::protobuf::rt::LazyV2<DebugLinkWatchLayout> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DebugLinkWatchLayout::new)
    }
}

impl ::protobuf::Clear for DebugLinkWatchLayout {
    fn clear(&mut self) {
        self.watch = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DebugLinkWatchLayout {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DebugLinkWatchLayout {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14messages-debug.proto\x12\x18hw.trezor.messages.debug\x1a\x0emessag\
    es.proto\x1a\x15messages-common.proto\x1a\x19messages-management.proto\"\
    \x9e\x02\n\x11DebugLinkDecision\x12\x15\n\x06yes_no\x18\x01\x20\x01(\x08\
    R\x05yesNo\x12U\n\x05swipe\x18\x02\x20\x01(\x0e2?.hw.trezor.messages.deb\
    ug.DebugLinkDecision.DebugSwipeDirectionR\x05swipe\x12\x14\n\x05input\
    \x18\x03\x20\x01(\tR\x05input\x12\x0c\n\x01x\x18\x04\x20\x01(\rR\x01x\
    \x12\x0c\n\x01y\x18\x05\x20\x01(\rR\x01y\x12\x12\n\x04wait\x18\x06\x20\
    \x01(\x08R\x04wait\x12\x17\n\x07hold_ms\x18\x07\x20\x01(\rR\x06holdMs\"<\
    \n\x13DebugSwipeDirection\x12\x06\n\x02UP\x10\0\x12\x08\n\x04DOWN\x10\
    \x01\x12\x08\n\x04LEFT\x10\x02\x12\t\n\x05RIGHT\x10\x03\"'\n\x0fDebugLin\
    kLayout\x12\x14\n\x05lines\x18\x01\x20\x03(\tR\x05lines\"-\n\x15DebugLin\
    kReseedRandom\x12\x14\n\x05value\x18\x01\x20\x01(\rR\x05value\"B\n\x15De\
    bugLinkRecordScreen\x12)\n\x10target_directory\x18\x01\x20\x01(\tR\x0fta\
    rgetDirectory\"~\n\x11DebugLinkGetState\x12$\n\x0ewait_word_list\x18\x01\
    \x20\x01(\x08R\x0cwaitWordList\x12\"\n\rwait_word_pos\x18\x02\x20\x01(\
    \x08R\x0bwaitWordPos\x12\x1f\n\x0bwait_layout\x18\x03\x20\x01(\x08R\nwai\
    tLayout\"\xa2\x04\n\x0eDebugLinkState\x12\x16\n\x06layout\x18\x01\x20\
    \x01(\x0cR\x06layout\x12\x10\n\x03pin\x18\x02\x20\x01(\tR\x03pin\x12\x16\
    \n\x06matrix\x18\x03\x20\x01(\tR\x06matrix\x12'\n\x0fmnemonic_secret\x18\
    \x04\x20\x01(\x0cR\x0emnemonicSecret\x129\n\x04node\x18\x05\x20\x01(\x0b\
    2%.hw.trezor.messages.common.HDNodeTypeR\x04node\x123\n\x15passphrase_pr\
    otection\x18\x06\x20\x01(\x08R\x14passphraseProtection\x12\x1d\n\nreset_\
    word\x18\x07\x20\x01(\tR\tresetWord\x12#\n\rreset_entropy\x18\x08\x20\
    \x01(\x0cR\x0cresetEntropy\x12,\n\x12recovery_fake_word\x18\t\x20\x01(\t\
    R\x10recoveryFakeWord\x12*\n\x11recovery_word_pos\x18\n\x20\x01(\rR\x0fr\
    ecoveryWordPos\x12$\n\x0ereset_word_pos\x18\x0b\x20\x01(\rR\x0cresetWord\
    Pos\x12N\n\rmnemonic_type\x18\x0c\x20\x01(\x0e2).hw.trezor.messages.mana\
    gement.BackupTypeR\x0cmnemonicType\x12!\n\x0clayout_lines\x18\r\x20\x03(\
    \tR\x0blayoutLines\"\x0f\n\rDebugLinkStop\"P\n\x0cDebugLinkLog\x12\x14\n\
    \x05level\x18\x01\x20\x01(\rR\x05level\x12\x16\n\x06bucket\x18\x02\x20\
    \x01(\tR\x06bucket\x12\x12\n\x04text\x18\x03\x20\x01(\tR\x04text\"G\n\
    \x13DebugLinkMemoryRead\x12\x18\n\x07address\x18\x01\x20\x01(\rR\x07addr\
    ess\x12\x16\n\x06length\x18\x02\x20\x01(\rR\x06length\")\n\x0fDebugLinkM\
    emory\x12\x16\n\x06memory\x18\x01\x20\x01(\x0cR\x06memory\"^\n\x14DebugL\
    inkMemoryWrite\x12\x18\n\x07address\x18\x01\x20\x01(\rR\x07address\x12\
    \x16\n\x06memory\x18\x02\x20\x01(\x0cR\x06memory\x12\x14\n\x05flash\x18\
    \x03\x20\x01(\x08R\x05flash\"-\n\x13DebugLinkFlashErase\x12\x16\n\x06sec\
    tor\x18\x01\x20\x01(\rR\x06sector\".\n\x14DebugLinkEraseSdCard\x12\x16\n\
    \x06format\x18\x01\x20\x01(\x08R\x06format\",\n\x14DebugLinkWatchLayout\
    \x12\x14\n\x05watch\x18\x01\x20\x01(\x08R\x05watchB=\n#com.satoshilabs.t\
    rezor.lib.protobufB\x12TrezorMessageDebug\x80\xa6\x1d\x01J\x94+\n\x07\
    \x12\x05\0\0\xaf\x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\
    \x12\x03\x01\x08\x20\n\x08\n\x01\x08\x12\x03\x04\0<\n.\n\x02\x08\x01\x12\
    \x03\x04\0<\x1a#\x20Sugar\x20for\x20easier\x20handling\x20in\x20Java\n\n\
    \x08\n\x01\x08\x12\x03\x05\03\n\t\n\x02\x08\x08\x12\x03\x05\03\n\x08\n\
    \x01\x08\x12\x03\x07\0(\n\x0b\n\x04\x08\xe0\xd4\x03\x12\x03\x07\0(\n\t\n\
    \x02\x03\0\x12\x03\t\x07\x17\n\t\n\x02\x03\x01\x12\x03\n\x07\x1e\n\t\n\
    \x02\x03\x02\x12\x03\x0b\x07\"\nX\n\x02\x04\0\x12\x04\x12\0$\x01\x1aL*\n\
    \x20Request:\x20\"Press\"\x20the\x20button\x20on\x20the\x20device\n\x20@\
    start\n\x20@next\x20DebugLinkLayout\n\n\n\n\x03\x04\0\x01\x12\x03\x12\
    \x08\x19\n5\n\x04\x04\0\x02\0\x12\x03\x13\x04\x1d\"(\x20true\x20for\x20\
    \"Confirm\",\x20false\x20for\x20\"Cancel\"\n\n\x0c\n\x05\x04\0\x02\0\x04\
    \x12\x03\x13\x04\x0c\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x13\r\x11\n\x0c\
    \n\x05\x04\0\x02\0\x01\x12\x03\x13\x12\x18\n\x0c\n\x05\x04\0\x02\0\x03\
    \x12\x03\x13\x1b\x1c\n\x1e\n\x04\x04\0\x02\x01\x12\x03\x14\x04+\"\x11\
    \x20swipe\x20direction\n\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x14\x04\
    \x0c\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x14\r\x20\n\x0c\n\x05\x04\0\
    \x02\x01\x01\x12\x03\x14!&\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x14)*\n\
    \x1d\n\x04\x04\0\x02\x02\x12\x03\x15\x04\x1e\"\x10\x20keyboard\x20input\
    \n\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\x15\x04\x0c\n\x0c\n\x05\x04\0\
    \x02\x02\x05\x12\x03\x15\r\x13\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x15\
    \x14\x19\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x15\x1c\x1d\n8\n\x04\x04\
    \0\x04\0\x12\x04\x19\x04\x1e\x05\x1a**\n\x20Structure\x20representing\
    \x20swipe\x20direction\n\n\x0c\n\x05\x04\0\x04\0\x01\x12\x03\x19\t\x1c\n\
    \r\n\x06\x04\0\x04\0\x02\0\x12\x03\x1a\x08\x0f\n\x0e\n\x07\x04\0\x04\0\
    \x02\0\x01\x12\x03\x1a\x08\n\n\x0e\n\x07\x04\0\x04\0\x02\0\x02\x12\x03\
    \x1a\r\x0e\n\r\n\x06\x04\0\x04\0\x02\x01\x12\x03\x1b\x08\x11\n\x0e\n\x07\
    \x04\0\x04\0\x02\x01\x01\x12\x03\x1b\x08\x0c\n\x0e\n\x07\x04\0\x04\0\x02\
    \x01\x02\x12\x03\x1b\x0f\x10\n\r\n\x06\x04\0\x04\0\x02\x02\x12\x03\x1c\
    \x08\x11\n\x0e\n\x07\x04\0\x04\0\x02\x02\x01\x12\x03\x1c\x08\x0c\n\x0e\n\
    \x07\x04\0\x04\0\x02\x02\x02\x12\x03\x1c\x0f\x10\n\r\n\x06\x04\0\x04\0\
    \x02\x03\x12\x03\x1d\x08\x12\n\x0e\n\x07\x04\0\x04\0\x02\x03\x01\x12\x03\
    \x1d\x08\r\n\x0e\n\x07\x04\0\x04\0\x02\x03\x02\x12\x03\x1d\x10\x11\n!\n\
    \x04\x04\0\x02\x03\x12\x03\x20\x04\x1a\"\x14\x20touch\x20X\x20coordinate\
    \n\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03\x20\x04\x0c\n\x0c\n\x05\x04\0\
    \x02\x03\x05\x12\x03\x20\r\x13\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x20\
    \x14\x15\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x20\x18\x19\n!\n\x04\x04\
    \0\x02\x04\x12\x03!\x04\x1a\"\x14\x20touch\x20Y\x20coordinate\n\n\x0c\n\
    \x05\x04\0\x02\x04\x04\x12\x03!\x04\x0c\n\x0c\n\x05\x04\0\x02\x04\x05\
    \x12\x03!\r\x13\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03!\x14\x15\n\x0c\n\
    \x05\x04\0\x02\x04\x03\x12\x03!\x18\x19\n%\n\x04\x04\0\x02\x05\x12\x03\"\
    \x04\x1b\"\x18\x20wait\x20for\x20layout\x20change\n\n\x0c\n\x05\x04\0\
    \x02\x05\x04\x12\x03\"\x04\x0c\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\"\r\
    \x11\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\"\x12\x16\n\x0c\n\x05\x04\0\
    \x02\x05\x03\x12\x03\"\x19\x1a\n\"\n\x04\x04\0\x02\x06\x12\x03#\x04\x20\
    \"\x15\x20touch\x20hold\x20duration\n\n\x0c\n\x05\x04\0\x02\x06\x04\x12\
    \x03#\x04\x0c\n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03#\r\x13\n\x0c\n\x05\
    \x04\0\x02\x06\x01\x12\x03#\x14\x1b\n\x0c\n\x05\x04\0\x02\x06\x03\x12\
    \x03#\x1e\x1f\n2\n\x02\x04\x01\x12\x04*\0,\x01\x1a&*\n\x20Response:\x20D\
    evice\x20text\x20layout\n\x20@end\n\n\n\n\x03\x04\x01\x01\x12\x03*\x08\
    \x17\n\x0b\n\x04\x04\x01\x02\0\x12\x03+\x04\x1e\n\x0c\n\x05\x04\x01\x02\
    \0\x04\x12\x03+\x04\x0c\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03+\r\x13\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03+\x14\x19\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03+\x1c\x1d\nL\n\x02\x04\x02\x12\x043\05\x01\x1a@*\n\x20Reques\
    t:\x20Re-seed\x20RNG\x20with\x20given\x20value\n\x20@start\n\x20@next\
    \x20Success\n\n\n\n\x03\x04\x02\x01\x12\x033\x08\x1d\n\x0b\n\x04\x04\x02\
    \x02\0\x12\x034\x04\x1e\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x034\x04\x0c\n\
    \x0c\n\x05\x04\x02\x02\0\x05\x12\x034\r\x13\n\x0c\n\x05\x04\x02\x02\0\
    \x01\x12\x034\x14\x19\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x034\x1c\x1d\nr\
    \n\x02\x04\x03\x12\x04<\0>\x01\x1af*\n\x20Request:\x20Start\x20or\x20sto\
    p\x20recording\x20screen\x20changes\x20into\x20given\x20target\x20direct\
    ory\n\x20@start\n\x20@next\x20Success\n\n\n\n\x03\x04\x03\x01\x12\x03<\
    \x08\x1d\n1\n\x04\x04\x03\x02\0\x12\x03=\x04)\"$\x20empty\x20or\x20missi\
    ng\x20to\x20stop\x20recording\n\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03=\
    \x04\x0c\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03=\r\x13\n\x0c\n\x05\x04\
    \x03\x02\0\x01\x12\x03=\x14$\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03='(\nU\
    \n\x02\x04\x04\x12\x04E\0I\x01\x1aI*\n\x20Request:\x20Computer\x20asks\
    \x20for\x20device\x20state\n\x20@start\n\x20@next\x20DebugLinkState\n\n\
    \n\n\x03\x04\x04\x01\x12\x03E\x08\x19\nB\n\x04\x04\x04\x02\0\x12\x03F\
    \x04%\"5\x20Trezor\x20T\x20only\x20-\x20wait\x20until\x20mnemonic\x20wor\
    ds\x20are\x20shown\n\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x03F\x04\x0c\n\
    \x0c\n\x05\x04\x04\x02\0\x05\x12\x03F\r\x11\n\x0c\n\x05\x04\x04\x02\0\
    \x01\x12\x03F\x12\x20\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03F#$\nJ\n\x04\
    \x04\x04\x02\x01\x12\x03G\x04$\"=\x20Trezor\x20T\x20only\x20-\x20wait\
    \x20until\x20reset\x20word\x20position\x20is\x20requested\n\n\x0c\n\x05\
    \x04\x04\x02\x01\x04\x12\x03G\x04\x0c\n\x0c\n\x05\x04\x04\x02\x01\x05\
    \x12\x03G\r\x11\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03G\x12\x1f\n\x0c\n\
    \x05\x04\x04\x02\x01\x03\x12\x03G\"#\n0\n\x04\x04\x04\x02\x02\x12\x03H\
    \x04\"\"#\x20wait\x20until\x20current\x20layout\x20changes\n\n\x0c\n\x05\
    \x04\x04\x02\x02\x04\x12\x03H\x04\x0c\n\x0c\n\x05\x04\x04\x02\x02\x05\
    \x12\x03H\r\x11\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x03H\x12\x1d\n\x0c\n\
    \x05\x04\x04\x02\x02\x03\x12\x03H\x20!\n4\n\x02\x04\x05\x12\x04O\0]\x01\
    \x1a(*\n\x20Response:\x20Device\x20current\x20state\n\x20@end\n\n\n\n\
    \x03\x04\x05\x01\x12\x03O\x08\x16\n$\n\x04\x04\x05\x02\0\x12\x03P\x04\
    \x1e\"\x17\x20raw\x20buffer\x20of\x20display\n\n\x0c\n\x05\x04\x05\x02\0\
    \x04\x12\x03P\x04\x0c\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03P\r\x12\n\x0c\
    \n\x05\x04\x05\x02\0\x01\x12\x03P\x13\x19\n\x0c\n\x05\x04\x05\x02\0\x03\
    \x12\x03P\x1c\x1d\n;\n\x04\x04\x05\x02\x01\x12\x03Q\x04\x1c\".\x20curren\
    t\x20PIN,\x20blank\x20if\x20PIN\x20is\x20not\x20set/enabled\n\n\x0c\n\
    \x05\x04\x05\x02\x01\x04\x12\x03Q\x04\x0c\n\x0c\n\x05\x04\x05\x02\x01\
    \x05\x12\x03Q\r\x13\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03Q\x14\x17\n\
    \x0c\n\x05\x04\x05\x02\x01\x03\x12\x03Q\x1a\x1b\n!\n\x04\x04\x05\x02\x02\
    \x12\x03R\x04\x1f\"\x14\x20current\x20PIN\x20matrix\n\n\x0c\n\x05\x04\
    \x05\x02\x02\x04\x12\x03R\x04\x0c\n\x0c\n\x05\x04\x05\x02\x02\x05\x12\
    \x03R\r\x13\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\x03R\x14\x1a\n\x0c\n\x05\
    \x04\x05\x02\x02\x03\x12\x03R\x1d\x1e\n&\n\x04\x04\x05\x02\x03\x12\x03S\
    \x04'\"\x19\x20current\x20mnemonic\x20secret\n\n\x0c\n\x05\x04\x05\x02\
    \x03\x04\x12\x03S\x04\x0c\n\x0c\n\x05\x04\x05\x02\x03\x05\x12\x03S\r\x12\
    \n\x0c\n\x05\x04\x05\x02\x03\x01\x12\x03S\x13\"\n\x0c\n\x05\x04\x05\x02\
    \x03\x03\x12\x03S%&\n\"\n\x04\x04\x05\x02\x04\x12\x03T\x04(\"\x15\x20cur\
    rent\x20BIP-32\x20node\n\n\x0c\n\x05\x04\x05\x02\x04\x04\x12\x03T\x04\
    \x0c\n\x0c\n\x05\x04\x05\x02\x04\x06\x12\x03T\r\x1e\n\x0c\n\x05\x04\x05\
    \x02\x04\x01\x12\x03T\x1f#\n\x0c\n\x05\x04\x05\x02\x04\x03\x12\x03T&'\n;\
    \n\x04\x04\x05\x02\x05\x12\x03U\x04,\".\x20is\x20node/mnemonic\x20encryp\
    ted\x20using\x20passphrase?\n\n\x0c\n\x05\x04\x05\x02\x05\x04\x12\x03U\
    \x04\x0c\n\x0c\n\x05\x04\x05\x02\x05\x05\x12\x03U\r\x11\n\x0c\n\x05\x04\
    \x05\x02\x05\x01\x12\x03U\x12'\n\x0c\n\x05\x04\x05\x02\x05\x03\x12\x03U*\
    +\nA\n\x04\x04\x05\x02\x06\x12\x03V\x04#\"4\x20word\x20on\x20device\x20d\
    isplay\x20during\x20ResetDevice\x20workflow\n\n\x0c\n\x05\x04\x05\x02\
    \x06\x04\x12\x03V\x04\x0c\n\x0c\n\x05\x04\x05\x02\x06\x05\x12\x03V\r\x13\
    \n\x0c\n\x05\x04\x05\x02\x06\x01\x12\x03V\x14\x1e\n\x0c\n\x05\x04\x05\
    \x02\x06\x03\x12\x03V!\"\n:\n\x04\x04\x05\x02\x07\x12\x03W\x04%\"-\x20cu\
    rrent\x20entropy\x20during\x20ResetDevice\x20workflow\n\n\x0c\n\x05\x04\
    \x05\x02\x07\x04\x12\x03W\x04\x0c\n\x0c\n\x05\x04\x05\x02\x07\x05\x12\
    \x03W\r\x12\n\x0c\n\x05\x04\x05\x02\x07\x01\x12\x03W\x13\x20\n\x0c\n\x05\
    \x04\x05\x02\x07\x03\x12\x03W#$\nD\n\x04\x04\x05\x02\x08\x12\x03X\x04+\"\
    7\x20(fake)\x20word\x20on\x20display\x20during\x20RecoveryDevice\x20work\
    flow\n\n\x0c\n\x05\x04\x05\x02\x08\x04\x12\x03X\x04\x0c\n\x0c\n\x05\x04\
    \x05\x02\x08\x05\x12\x03X\r\x13\n\x0c\n\x05\x04\x05\x02\x08\x01\x12\x03X\
    \x14&\n\x0c\n\x05\x04\x05\x02\x08\x03\x12\x03X)*\n\\\n\x04\x04\x05\x02\t\
    \x12\x03Y\x04+\"O\x20index\x20of\x20mnemonic\x20word\x20the\x20device\
    \x20is\x20expecting\x20during\x20RecoveryDevice\x20workflow\n\n\x0c\n\
    \x05\x04\x05\x02\t\x04\x12\x03Y\x04\x0c\n\x0c\n\x05\x04\x05\x02\t\x05\
    \x12\x03Y\r\x13\n\x0c\n\x05\x04\x05\x02\t\x01\x12\x03Y\x14%\n\x0c\n\x05\
    \x04\x05\x02\t\x03\x12\x03Y(*\nY\n\x04\x04\x05\x02\n\x12\x03Z\x04(\"L\
    \x20index\x20of\x20mnemonic\x20word\x20the\x20device\x20is\x20expecting\
    \x20during\x20ResetDevice\x20workflow\n\n\x0c\n\x05\x04\x05\x02\n\x04\
    \x12\x03Z\x04\x0c\n\x0c\n\x05\x04\x05\x02\n\x05\x12\x03Z\r\x13\n\x0c\n\
    \x05\x04\x05\x02\n\x01\x12\x03Z\x14\"\n\x0c\n\x05\x04\x05\x02\n\x03\x12\
    \x03Z%'\n5\n\x04\x04\x05\x02\x0b\x12\x03[\x046\"(\x20current\x20mnemonic\
    \x20type\x20(BIP-39/SLIP-39)\n\n\x0c\n\x05\x04\x05\x02\x0b\x04\x12\x03[\
    \x04\x0c\n\x0c\n\x05\x04\x05\x02\x0b\x06\x12\x03[\r\"\n\x0c\n\x05\x04\
    \x05\x02\x0b\x01\x12\x03[#0\n\x0c\n\x05\x04\x05\x02\x0b\x03\x12\x03[35\n\
    \"\n\x04\x04\x05\x02\x0c\x12\x03\\\x04&\"\x15\x20current\x20layout\x20te\
    xt\n\n\x0c\n\x05\x04\x05\x02\x0c\x04\x12\x03\\\x04\x0c\n\x0c\n\x05\x04\
    \x05\x02\x0c\x05\x12\x03\\\r\x13\n\x0c\n\x05\x04\x05\x02\x0c\x01\x12\x03\
    \\\x14\x20\n\x0c\n\x05\x04\x05\x02\x0c\x03\x12\x03\\#%\n6\n\x02\x04\x06\
    \x12\x04c\0d\x01\x1a**\n\x20Request:\x20Ask\x20device\x20to\x20restart\n\
    \x20@start\n\n\n\n\x03\x04\x06\x01\x12\x03c\x08\x15\nA\n\x02\x04\x07\x12\
    \x04j\0n\x01\x1a5*\n\x20Response:\x20Device\x20wants\x20host\x20to\x20lo\
    g\x20event\n\x20@ignore\n\n\n\n\x03\x04\x07\x01\x12\x03j\x08\x14\n\x0b\n\
    \x04\x04\x07\x02\0\x12\x03k\x04\x1e\n\x0c\n\x05\x04\x07\x02\0\x04\x12\
    \x03k\x04\x0c\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03k\r\x13\n\x0c\n\x05\
    \x04\x07\x02\0\x01\x12\x03k\x14\x19\n\x0c\n\x05\x04\x07\x02\0\x03\x12\
    \x03k\x1c\x1d\n\x0b\n\x04\x04\x07\x02\x01\x12\x03l\x04\x1f\n\x0c\n\x05\
    \x04\x07\x02\x01\x04\x12\x03l\x04\x0c\n\x0c\n\x05\x04\x07\x02\x01\x05\
    \x12\x03l\r\x13\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03l\x14\x1a\n\x0c\n\
    \x05\x04\x07\x02\x01\x03\x12\x03l\x1d\x1e\n\x0b\n\x04\x04\x07\x02\x02\
    \x12\x03m\x04\x1d\n\x0c\n\x05\x04\x07\x02\x02\x04\x12\x03m\x04\x0c\n\x0c\
    \n\x05\x04\x07\x02\x02\x05\x12\x03m\r\x13\n\x0c\n\x05\x04\x07\x02\x02\
    \x01\x12\x03m\x14\x18\n\x0c\n\x05\x04\x07\x02\x02\x03\x12\x03m\x1b\x1c\n\
    O\n\x02\x04\x08\x12\x04u\0x\x01\x1aC*\n\x20Request:\x20Read\x20memory\
    \x20from\x20device\n\x20@start\n\x20@next\x20DebugLinkMemory\n\n\n\n\x03\
    \x04\x08\x01\x12\x03u\x08\x1b\n\x0b\n\x04\x04\x08\x02\0\x12\x03v\x04\x20\
    \n\x0c\n\x05\x04\x08\x02\0\x04\x12\x03v\x04\x0c\n\x0c\n\x05\x04\x08\x02\
    \0\x05\x12\x03v\r\x13\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03v\x14\x1b\n\
    \x0c\n\x05\x04\x08\x02\0\x03\x12\x03v\x1e\x1f\n\x0b\n\x04\x04\x08\x02\
    \x01\x12\x03w\x04\x1f\n\x0c\n\x05\x04\x08\x02\x01\x04\x12\x03w\x04\x0c\n\
    \x0c\n\x05\x04\x08\x02\x01\x05\x12\x03w\r\x13\n\x0c\n\x05\x04\x08\x02\
    \x01\x01\x12\x03w\x14\x1a\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\x03w\x1d\
    \x1e\n9\n\x02\x04\t\x12\x05~\0\x80\x01\x01\x1a,*\n\x20Response:\x20Devic\
    e\x20sends\x20memory\x20back\n\x20@end\n\n\n\n\x03\x04\t\x01\x12\x03~\
    \x08\x17\n\x0b\n\x04\x04\t\x02\0\x12\x03\x7f\x04\x1e\n\x0c\n\x05\x04\t\
    \x02\0\x04\x12\x03\x7f\x04\x0c\n\x0c\n\x05\x04\t\x02\0\x05\x12\x03\x7f\r\
    \x12\n\x0c\n\x05\x04\t\x02\0\x01\x12\x03\x7f\x13\x19\n\x0c\n\x05\x04\t\
    \x02\0\x03\x12\x03\x7f\x1c\x1d\n\xa3\x01\n\x02\x04\n\x12\x06\x89\x01\0\
    \x8d\x01\x01\x1a\x94\x01*\n\x20Request:\x20Write\x20memory\x20to\x20devi\
    ce.\n\x20WARNING:\x20Writing\x20to\x20the\x20wrong\x20location\x20can\
    \x20irreparably\x20break\x20the\x20device.\n\x20@start\n\x20@next\x20Suc\
    cess\n\x20@next\x20Failure\n\n\x0b\n\x03\x04\n\x01\x12\x04\x89\x01\x08\
    \x1c\n\x0c\n\x04\x04\n\x02\0\x12\x04\x8a\x01\x04\x20\n\r\n\x05\x04\n\x02\
    \0\x04\x12\x04\x8a\x01\x04\x0c\n\r\n\x05\x04\n\x02\0\x05\x12\x04\x8a\x01\
    \r\x13\n\r\n\x05\x04\n\x02\0\x01\x12\x04\x8a\x01\x14\x1b\n\r\n\x05\x04\n\
    \x02\0\x03\x12\x04\x8a\x01\x1e\x1f\n\x0c\n\x04\x04\n\x02\x01\x12\x04\x8b\
    \x01\x04\x1e\n\r\n\x05\x04\n\x02\x01\x04\x12\x04\x8b\x01\x04\x0c\n\r\n\
    \x05\x04\n\x02\x01\x05\x12\x04\x8b\x01\r\x12\n\r\n\x05\x04\n\x02\x01\x01\
    \x12\x04\x8b\x01\x13\x19\n\r\n\x05\x04\n\x02\x01\x03\x12\x04\x8b\x01\x1c\
    \x1d\n\x0c\n\x04\x04\n\x02\x02\x12\x04\x8c\x01\x04\x1c\n\r\n\x05\x04\n\
    \x02\x02\x04\x12\x04\x8c\x01\x04\x0c\n\r\n\x05\x04\n\x02\x02\x05\x12\x04\
    \x8c\x01\r\x11\n\r\n\x05\x04\n\x02\x02\x01\x12\x04\x8c\x01\x12\x17\n\r\n\
    \x05\x04\n\x02\x02\x03\x12\x04\x8c\x01\x1a\x1b\n\xaa\x01\n\x02\x04\x0b\
    \x12\x06\x96\x01\0\x98\x01\x01\x1a\x9b\x01*\n\x20Request:\x20Erase\x20bl\
    ock\x20of\x20flash\x20on\x20device\n\x20WARNING:\x20Writing\x20to\x20the\
    \x20wrong\x20location\x20can\x20irreparably\x20break\x20the\x20device.\n\
    \x20@start\n\x20@next\x20Success\n\x20@next\x20Failure\n\n\x0b\n\x03\x04\
    \x0b\x01\x12\x04\x96\x01\x08\x1b\n\x0c\n\x04\x04\x0b\x02\0\x12\x04\x97\
    \x01\x04\x1f\n\r\n\x05\x04\x0b\x02\0\x04\x12\x04\x97\x01\x04\x0c\n\r\n\
    \x05\x04\x0b\x02\0\x05\x12\x04\x97\x01\r\x13\n\r\n\x05\x04\x0b\x02\0\x01\
    \x12\x04\x97\x01\x14\x1a\n\r\n\x05\x04\x0b\x02\0\x03\x12\x04\x97\x01\x1d\
    \x1e\nR\n\x02\x04\x0c\x12\x06\xa1\x01\0\xa4\x01\x01\x1aD*\n\x20Request:\
    \x20Erase\x20the\x20SD\x20card\n\x20@start\n\x20@next\x20Success\n\x20@n\
    ext\x20Failure\n\n\x0b\n\x03\x04\x0c\x01\x12\x04\xa1\x01\x08\x1c\n=\n\
    \x04\x04\x0c\x02\0\x12\x04\xa2\x01\x04\x1d\"/\x20if\x20true,\x20the\x20c\
    ard\x20will\x20be\x20formatted\x20to\x20FAT32.\n\n\r\n\x05\x04\x0c\x02\0\
    \x04\x12\x04\xa2\x01\x04\x0c\n\r\n\x05\x04\x0c\x02\0\x05\x12\x04\xa2\x01\
    \r\x11\n\r\n\x05\x04\x0c\x02\0\x01\x12\x04\xa2\x01\x12\x18\n\r\n\x05\x04\
    \x0c\x02\0\x03\x12\x04\xa2\x01\x1b\x1c\nW\n\x02\x04\r\x12\x06\xac\x01\0\
    \xaf\x01\x01\x1aI*\n\x20Request:\x20Start\x20or\x20stop\x20tracking\x20l\
    ayout\x20changes\n\x20@start\n\x20@next\x20Success\n\n\x0b\n\x03\x04\r\
    \x01\x12\x04\xac\x01\x08\x1c\n/\n\x04\x04\r\x02\0\x12\x04\xad\x01\x04\
    \x1c\"!\x20if\x20true,\x20start\x20watching\x20layout.\n\n\r\n\x05\x04\r\
    \x02\0\x04\x12\x04\xad\x01\x04\x0c\n\r\n\x05\x04\r\x02\0\x05\x12\x04\xad\
    \x01\r\x11\n\r\n\x05\x04\r\x02\0\x01\x12\x04\xad\x01\x12\x17\n\r\n\x05\
    \x04\r\x02\0\x03\x12\x04\xad\x01\x1a\x1b\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
